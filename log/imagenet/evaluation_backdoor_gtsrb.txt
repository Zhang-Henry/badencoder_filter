/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
当前时间： 2023-12-14 17:30:09
test_transform_imagenet
Loaded from: output/imagenet/gtsrb_backdoored_encoder/2023-12-11-10:58:42/model_150.pth
Predicting features
Feature extracting:   0%|          | 0/613 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/613 [00:04<46:04,  4.52s/it]Feature extracting:   1%|          | 7/613 [00:04<04:59,  2.02it/s]Feature extracting:   2%|▏         | 10/613 [00:04<03:23,  2.96it/s]Feature extracting:   2%|▏         | 12/613 [00:05<02:49,  3.55it/s]Feature extracting:   2%|▏         | 14/613 [00:05<02:24,  4.13it/s]Feature extracting:   3%|▎         | 16/613 [00:05<01:54,  5.23it/s]Feature extracting:   3%|▎         | 18/613 [00:05<01:36,  6.17it/s]Feature extracting:   3%|▎         | 20/613 [00:05<01:25,  6.93it/s]Feature extracting:   4%|▎         | 22/613 [00:06<01:23,  7.06it/s]Feature extracting:   4%|▍         | 24/613 [00:06<01:15,  7.83it/s]Feature extracting:   4%|▍         | 26/613 [00:06<01:09,  8.50it/s]Feature extracting:   5%|▍         | 28/613 [00:06<01:04,  9.00it/s]Feature extracting:   5%|▍         | 30/613 [00:07<01:05,  8.88it/s]Feature extracting:   5%|▌         | 31/613 [00:07<01:09,  8.34it/s]Feature extracting:   5%|▌         | 33/613 [00:07<01:03,  9.08it/s]Feature extracting:   6%|▌         | 35/613 [00:07<01:00,  9.48it/s]Feature extracting:   6%|▌         | 37/613 [00:07<00:57,  9.97it/s]Feature extracting:   6%|▋         | 39/613 [00:08<01:01,  9.38it/s]Feature extracting:   7%|▋         | 40/613 [00:08<01:04,  8.95it/s]Feature extracting:   7%|▋         | 41/613 [00:08<01:03,  9.04it/s]Feature extracting:   7%|▋         | 43/613 [00:08<00:59,  9.52it/s]Feature extracting:   7%|▋         | 45/613 [00:08<00:56, 10.05it/s]Feature extracting:   8%|▊         | 47/613 [00:08<01:02,  9.06it/s]Feature extracting:   8%|▊         | 49/613 [00:09<01:02,  8.99it/s]Feature extracting:   8%|▊         | 51/613 [00:09<00:59,  9.44it/s]Feature extracting:   9%|▊         | 53/613 [00:09<00:56,  9.96it/s]Feature extracting:   9%|▉         | 55/613 [00:09<00:58,  9.46it/s]Feature extracting:   9%|▉         | 56/613 [00:09<00:59,  9.29it/s]Feature extracting:   9%|▉         | 57/613 [00:09<01:03,  8.80it/s]Feature extracting:  10%|▉         | 59/613 [00:10<00:59,  9.33it/s]Feature extracting:  10%|▉         | 61/613 [00:10<00:56,  9.75it/s]Feature extracting:  10%|█         | 63/613 [00:10<00:52, 10.38it/s]Feature extracting:  11%|█         | 65/613 [00:10<00:57,  9.49it/s]Feature extracting:  11%|█         | 66/613 [00:10<01:00,  9.04it/s]Feature extracting:  11%|█         | 67/613 [00:11<01:00,  9.05it/s]Feature extracting:  11%|█▏        | 69/613 [00:11<00:55,  9.84it/s]Feature extracting:  12%|█▏        | 71/613 [00:11<00:53, 10.18it/s]Feature extracting:  12%|█▏        | 73/613 [00:11<00:54,  9.98it/s]Feature extracting:  12%|█▏        | 74/613 [00:11<01:01,  8.83it/s]Feature extracting:  12%|█▏        | 76/613 [00:11<00:57,  9.32it/s]Feature extracting:  13%|█▎        | 78/613 [00:12<00:57,  9.28it/s]Feature extracting:  13%|█▎        | 80/613 [00:12<00:52, 10.15it/s]Feature extracting:  13%|█▎        | 82/613 [00:12<00:53,  9.99it/s]Feature extracting:  14%|█▎        | 84/613 [00:12<00:58,  9.06it/s]Feature extracting:  14%|█▍        | 85/613 [00:12<00:57,  9.16it/s]Feature extracting:  14%|█▍        | 87/613 [00:13<00:54,  9.58it/s]Feature extracting:  15%|█▍        | 89/613 [00:13<00:54,  9.57it/s]Feature extracting:  15%|█▍        | 91/613 [00:13<00:52,  9.99it/s]Feature extracting:  15%|█▌        | 93/613 [00:13<00:57,  9.03it/s]Feature extracting:  15%|█▌        | 95/613 [00:13<00:55,  9.40it/s]Feature extracting:  16%|█▌        | 97/613 [00:14<00:52,  9.76it/s]Feature extracting:  16%|█▌        | 99/613 [00:14<00:51, 10.07it/s]Feature extracting:  16%|█▋        | 101/613 [00:14<00:57,  8.98it/s]Feature extracting:  17%|█▋        | 102/613 [00:14<00:57,  8.94it/s]Feature extracting:  17%|█▋        | 103/613 [00:14<00:59,  8.63it/s]Feature extracting:  17%|█▋        | 104/613 [00:14<01:00,  8.41it/s]Feature extracting:  17%|█▋        | 105/613 [00:15<01:01,  8.27it/s]Feature extracting:  17%|█▋        | 106/613 [00:15<01:03,  8.03it/s]Feature extracting:  17%|█▋        | 107/613 [00:15<01:04,  7.83it/s]Feature extracting:  18%|█▊        | 108/613 [00:15<01:03,  8.01it/s]Feature extracting:  18%|█▊        | 110/613 [00:15<00:55,  9.00it/s]Feature extracting:  18%|█▊        | 112/613 [00:15<00:52,  9.54it/s]Feature extracting:  19%|█▊        | 114/613 [00:16<00:49, 10.00it/s]Feature extracting:  19%|█▉        | 115/613 [00:16<00:53,  9.32it/s]Feature extracting:  19%|█▉        | 116/613 [00:16<00:56,  8.84it/s]Feature extracting:  19%|█▉        | 117/613 [00:16<00:56,  8.78it/s]Feature extracting:  19%|█▉        | 119/613 [00:16<00:52,  9.46it/s]Feature extracting:  20%|█▉        | 121/613 [00:16<00:49, 10.00it/s]Feature extracting:  20%|██        | 123/613 [00:16<00:49,  9.82it/s]Feature extracting:  20%|██        | 124/613 [00:17<00:52,  9.23it/s]Feature extracting:  20%|██        | 125/613 [00:17<00:55,  8.72it/s]Feature extracting:  21%|██        | 126/613 [00:17<00:54,  8.96it/s]Feature extracting:  21%|██        | 128/613 [00:17<00:49,  9.83it/s]Feature extracting:  21%|██        | 130/613 [00:17<00:47, 10.16it/s]Feature extracting:  22%|██▏       | 132/613 [00:17<00:47, 10.17it/s]Feature extracting:  22%|██▏       | 134/613 [00:18<00:52,  9.05it/s]Feature extracting:  22%|██▏       | 135/613 [00:18<00:53,  8.95it/s]Feature extracting:  22%|██▏       | 137/613 [00:18<00:49,  9.70it/s]Feature extracting:  23%|██▎       | 139/613 [00:18<00:47, 10.00it/s]Feature extracting:  23%|██▎       | 141/613 [00:18<00:52,  9.07it/s]Feature extracting:  23%|██▎       | 142/613 [00:19<00:53,  8.73it/s]Feature extracting:  23%|██▎       | 144/613 [00:19<00:49,  9.54it/s]Feature extracting:  24%|██▍       | 146/613 [00:19<00:46,  9.95it/s]Feature extracting:  24%|██▍       | 148/613 [00:19<00:48,  9.50it/s]Feature extracting:  24%|██▍       | 150/613 [00:19<00:47,  9.66it/s]Feature extracting:  25%|██▍       | 151/613 [00:19<00:49,  9.28it/s]Feature extracting:  25%|██▍       | 152/613 [00:20<00:50,  9.17it/s]Feature extracting:  25%|██▌       | 154/613 [00:20<00:46,  9.78it/s]Feature extracting:  25%|██▌       | 156/613 [00:20<00:45, 10.00it/s]Feature extracting:  26%|██▌       | 158/613 [00:20<00:44, 10.16it/s]Feature extracting:  26%|██▌       | 160/613 [00:20<00:49,  9.07it/s]Feature extracting:  26%|██▋       | 161/613 [00:21<00:49,  9.10it/s]Feature extracting:  27%|██▋       | 163/613 [00:21<00:46,  9.59it/s]Feature extracting:  27%|██▋       | 165/613 [00:21<00:45,  9.88it/s]Feature extracting:  27%|██▋       | 167/613 [00:21<00:43, 10.31it/s]Feature extracting:  28%|██▊       | 169/613 [00:21<00:49,  8.93it/s]Feature extracting:  28%|██▊       | 170/613 [00:21<00:48,  9.05it/s]Feature extracting:  28%|██▊       | 172/613 [00:22<00:46,  9.56it/s]Feature extracting:  28%|██▊       | 174/613 [00:22<00:43, 10.01it/s]Feature extracting:  29%|██▊       | 176/613 [00:22<00:45,  9.69it/s]Feature extracting:  29%|██▉       | 177/613 [00:22<00:47,  9.17it/s]Feature extracting:  29%|██▉       | 178/613 [00:22<00:52,  8.29it/s]Feature extracting:  29%|██▉       | 180/613 [00:23<00:45,  9.48it/s]Feature extracting:  30%|██▉       | 182/613 [00:23<00:45,  9.52it/s]Feature extracting:  30%|███       | 184/613 [00:23<00:40, 10.57it/s]Feature extracting:  30%|███       | 186/613 [00:23<00:44,  9.53it/s]Feature extracting:  31%|███       | 187/613 [00:23<00:46,  9.08it/s]Feature extracting:  31%|███       | 188/613 [00:23<00:46,  9.11it/s]Feature extracting:  31%|███       | 190/613 [00:24<00:42,  9.92it/s]Feature extracting:  31%|███▏      | 192/613 [00:24<00:41, 10.17it/s]Feature extracting:  32%|███▏      | 194/613 [00:24<00:46,  9.05it/s]Feature extracting:  32%|███▏      | 195/613 [00:24<00:46,  8.96it/s]Feature extracting:  32%|███▏      | 197/613 [00:24<00:43,  9.53it/s]Feature extracting:  32%|███▏      | 199/613 [00:25<00:41,  9.95it/s]Feature extracting:  33%|███▎      | 201/613 [00:25<00:40, 10.11it/s]Feature extracting:  33%|███▎      | 203/613 [00:25<00:44,  9.27it/s]Feature extracting:  33%|███▎      | 204/613 [00:25<00:45,  9.01it/s]Feature extracting:  33%|███▎      | 205/613 [00:25<00:44,  9.17it/s]Feature extracting:  34%|███▍      | 207/613 [00:25<00:41,  9.76it/s]Feature extracting:  34%|███▍      | 209/613 [00:26<00:40,  9.99it/s]Feature extracting:  34%|███▍      | 211/613 [00:26<00:39, 10.29it/s]Feature extracting:  35%|███▍      | 213/613 [00:26<00:46,  8.58it/s]Feature extracting:  35%|███▌      | 215/613 [00:26<00:42,  9.46it/s]Feature extracting:  35%|███▌      | 217/613 [00:26<00:40,  9.75it/s]Feature extracting:  36%|███▌      | 219/613 [00:27<00:38, 10.29it/s]Feature extracting:  36%|███▌      | 221/613 [00:27<00:39,  9.96it/s]Feature extracting:  36%|███▋      | 223/613 [00:27<00:43,  9.00it/s]Feature extracting:  37%|███▋      | 225/613 [00:27<00:41,  9.39it/s]Feature extracting:  37%|███▋      | 227/613 [00:27<00:39,  9.85it/s]Feature extracting:  37%|███▋      | 229/613 [00:28<00:37, 10.11it/s]Feature extracting:  38%|███▊      | 231/613 [00:28<00:42,  8.91it/s]Feature extracting:  38%|███▊      | 232/613 [00:28<00:42,  8.93it/s]Feature extracting:  38%|███▊      | 234/613 [00:28<00:39,  9.68it/s]Feature extracting:  38%|███▊      | 236/613 [00:28<00:37, 10.04it/s]Feature extracting:  39%|███▉      | 238/613 [00:29<00:36, 10.23it/s]Feature extracting:  39%|███▉      | 240/613 [00:29<00:40,  9.12it/s]Feature extracting:  39%|███▉      | 241/613 [00:29<00:41,  8.89it/s]Feature extracting:  40%|███▉      | 243/613 [00:29<00:38,  9.54it/s]Feature extracting:  40%|███▉      | 245/613 [00:29<00:37,  9.69it/s]Feature extracting:  40%|████      | 246/613 [00:29<00:40,  9.11it/s]Feature extracting:  40%|████      | 247/613 [00:30<00:44,  8.14it/s]Feature extracting:  41%|████      | 249/613 [00:30<00:38,  9.38it/s]Feature extracting:  41%|████      | 251/613 [00:30<00:36,  9.89it/s]Feature extracting:  41%|████▏     | 253/613 [00:30<00:36,  9.92it/s]Feature extracting:  41%|████▏     | 254/613 [00:30<00:38,  9.26it/s]Feature extracting:  42%|████▏     | 255/613 [00:30<00:40,  8.74it/s]Feature extracting:  42%|████▏     | 256/613 [00:31<00:40,  8.88it/s]Feature extracting:  42%|████▏     | 258/613 [00:31<00:36,  9.77it/s]Feature extracting:  42%|████▏     | 260/613 [00:31<00:34, 10.18it/s]Feature extracting:  43%|████▎     | 262/613 [00:31<00:35,  9.97it/s]Feature extracting:  43%|████▎     | 263/613 [00:31<00:37,  9.38it/s]Feature extracting:  43%|████▎     | 264/613 [00:31<00:41,  8.42it/s]Feature extracting:  43%|████▎     | 266/613 [00:32<00:36,  9.53it/s]Feature extracting:  44%|████▎     | 268/613 [00:32<00:35,  9.65it/s]Feature extracting:  44%|████▍     | 269/613 [00:32<00:39,  8.71it/s]Feature extracting:  44%|████▍     | 270/613 [00:32<00:39,  8.69it/s]Feature extracting:  44%|████▍     | 271/613 [00:32<00:38,  8.85it/s]Feature extracting:  44%|████▍     | 272/613 [00:32<00:39,  8.54it/s]Feature extracting:  45%|████▍     | 273/613 [00:32<00:40,  8.34it/s]Feature extracting:  45%|████▍     | 274/613 [00:33<00:41,  8.18it/s]Feature extracting:  45%|████▌     | 276/613 [00:33<00:36,  9.23it/s]Feature extracting:  45%|████▌     | 278/613 [00:33<00:34,  9.66it/s]Feature extracting:  46%|████▌     | 280/613 [00:33<00:33, 10.07it/s]Feature extracting:  46%|████▌     | 281/613 [00:33<00:37,  8.95it/s]Feature extracting:  46%|████▌     | 282/613 [00:33<00:36,  8.97it/s]Feature extracting:  46%|████▌     | 283/613 [00:34<00:36,  8.94it/s]Feature extracting:  46%|████▋     | 285/613 [00:34<00:34,  9.50it/s]Feature extracting:  47%|████▋     | 287/613 [00:34<00:32,  9.92it/s]Feature extracting:  47%|████▋     | 289/613 [00:34<00:31, 10.38it/s]Feature extracting:  47%|████▋     | 291/613 [00:34<00:35,  9.03it/s]Feature extracting:  48%|████▊     | 292/613 [00:34<00:35,  8.98it/s]Feature extracting:  48%|████▊     | 294/613 [00:35<00:33,  9.51it/s]Feature extracting:  48%|████▊     | 296/613 [00:35<00:31, 10.14it/s]Feature extracting:  49%|████▊     | 298/613 [00:35<00:30, 10.36it/s]Feature extracting:  49%|████▉     | 300/613 [00:35<00:34,  9.00it/s]Feature extracting:  49%|████▉     | 301/613 [00:35<00:34,  9.16it/s]Feature extracting:  49%|████▉     | 302/613 [00:35<00:33,  9.21it/s]Feature extracting:  50%|████▉     | 304/613 [00:36<00:31,  9.84it/s]Feature extracting:  50%|████▉     | 306/613 [00:36<00:30, 10.17it/s]Feature extracting:  50%|█████     | 308/613 [00:36<00:33,  9.14it/s]Feature extracting:  50%|█████     | 309/613 [00:36<00:32,  9.22it/s]Feature extracting:  51%|█████     | 310/613 [00:36<00:33,  9.07it/s]Feature extracting:  51%|█████     | 312/613 [00:37<00:30,  9.73it/s]Feature extracting:  51%|█████     | 314/613 [00:37<00:29, 10.07it/s]Feature extracting:  52%|█████▏    | 316/613 [00:37<00:33,  8.89it/s]Feature extracting:  52%|█████▏    | 317/613 [00:37<00:33,  8.88it/s]Feature extracting:  52%|█████▏    | 319/613 [00:37<00:30,  9.50it/s]Feature extracting:  52%|█████▏    | 321/613 [00:37<00:29,  9.93it/s]Feature extracting:  53%|█████▎    | 323/613 [00:38<00:28, 10.09it/s]Feature extracting:  53%|█████▎    | 325/613 [00:38<00:30,  9.32it/s]Feature extracting:  53%|█████▎    | 326/613 [00:38<00:31,  8.97it/s]Feature extracting:  53%|█████▎    | 327/613 [00:38<00:31,  9.14it/s]Feature extracting:  54%|█████▎    | 329/613 [00:38<00:29,  9.76it/s]Feature extracting:  54%|█████▍    | 331/613 [00:39<00:28,  9.98it/s]Feature extracting:  54%|█████▍    | 333/613 [00:39<00:27, 10.25it/s]Feature extracting:  55%|█████▍    | 335/613 [00:39<00:30,  9.11it/s]Feature extracting:  55%|█████▍    | 336/613 [00:39<00:30,  9.06it/s]Feature extracting:  55%|█████▌    | 338/613 [00:39<00:28,  9.50it/s]Feature extracting:  55%|█████▌    | 340/613 [00:39<00:27,  9.86it/s]Feature extracting:  56%|█████▌    | 342/613 [00:40<00:27, 10.02it/s]Feature extracting:  56%|█████▌    | 344/613 [00:40<00:30,  8.80it/s]Feature extracting:  56%|█████▋    | 346/613 [00:40<00:28,  9.36it/s]Feature extracting:  57%|█████▋    | 348/613 [00:40<00:26,  9.89it/s]Feature extracting:  57%|█████▋    | 350/613 [00:40<00:25, 10.24it/s]Feature extracting:  57%|█████▋    | 352/613 [00:41<00:26,  9.86it/s]Feature extracting:  58%|█████▊    | 354/613 [00:41<00:30,  8.50it/s]Feature extracting:  58%|█████▊    | 356/613 [00:41<00:26,  9.68it/s]Feature extracting:  58%|█████▊    | 358/613 [00:41<00:27,  9.44it/s]Feature extracting:  59%|█████▊    | 360/613 [00:42<00:29,  8.71it/s]Feature extracting:  59%|█████▉    | 362/613 [00:42<00:27,  9.22it/s]Feature extracting:  59%|█████▉    | 364/613 [00:42<00:25,  9.79it/s]Feature extracting:  60%|█████▉    | 366/613 [00:42<00:24, 10.10it/s]Feature extracting:  60%|██████    | 368/613 [00:42<00:26,  9.15it/s]Feature extracting:  60%|██████    | 369/613 [00:43<00:26,  9.07it/s]Feature extracting:  60%|██████    | 370/613 [00:43<00:26,  9.06it/s]Feature extracting:  61%|██████    | 372/613 [00:43<00:24,  9.83it/s]Feature extracting:  61%|██████    | 374/613 [00:43<00:23, 10.21it/s]Feature extracting:  61%|██████▏   | 376/613 [00:43<00:23, 10.28it/s]Feature extracting:  62%|██████▏   | 378/613 [00:44<00:26,  8.84it/s]Feature extracting:  62%|██████▏   | 380/613 [00:44<00:24,  9.39it/s]Feature extracting:  62%|██████▏   | 382/613 [00:44<00:23,  9.82it/s]Feature extracting:  63%|██████▎   | 384/613 [00:44<00:22, 10.01it/s]Feature extracting:  63%|██████▎   | 386/613 [00:44<00:22,  9.96it/s]Feature extracting:  63%|██████▎   | 388/613 [00:45<00:24,  9.03it/s]Feature extracting:  64%|██████▎   | 390/613 [00:45<00:23,  9.42it/s]Feature extracting:  64%|██████▍   | 392/613 [00:45<00:22,  9.73it/s]Feature extracting:  64%|██████▍   | 394/613 [00:45<00:21, 10.19it/s]Feature extracting:  65%|██████▍   | 396/613 [00:45<00:24,  8.81it/s]Feature extracting:  65%|██████▍   | 398/613 [00:46<00:24,  8.92it/s]Feature extracting:  65%|██████▌   | 399/613 [00:46<00:24,  8.56it/s]Feature extracting:  65%|██████▌   | 400/613 [00:46<00:26,  7.95it/s]Feature extracting:  66%|██████▌   | 402/613 [00:46<00:22,  9.32it/s]Feature extracting:  66%|██████▌   | 404/613 [00:46<00:21,  9.78it/s]Feature extracting:  66%|██████▌   | 406/613 [00:46<00:20, 10.03it/s]Feature extracting:  67%|██████▋   | 408/613 [00:47<00:22,  9.26it/s]Feature extracting:  67%|██████▋   | 409/613 [00:47<00:22,  9.27it/s]Feature extracting:  67%|██████▋   | 410/613 [00:47<00:22,  9.08it/s]Feature extracting:  67%|██████▋   | 412/613 [00:47<00:20,  9.72it/s]Feature extracting:  68%|██████▊   | 414/613 [00:47<00:19,  9.96it/s]Feature extracting:  68%|██████▊   | 416/613 [00:47<00:19, 10.09it/s]Feature extracting:  68%|██████▊   | 418/613 [00:48<00:22,  8.70it/s]Feature extracting:  69%|██████▊   | 420/613 [00:48<00:20,  9.41it/s]Feature extracting:  69%|██████▉   | 422/613 [00:48<00:19,  9.75it/s]Feature extracting:  69%|██████▉   | 424/613 [00:48<00:18, 10.19it/s]Feature extracting:  69%|██████▉   | 426/613 [00:49<00:20,  9.01it/s]Feature extracting:  70%|██████▉   | 428/613 [00:49<00:20,  9.19it/s]Feature extracting:  70%|██████▉   | 429/613 [00:49<00:21,  8.56it/s]Feature extracting:  70%|███████   | 430/613 [00:49<00:21,  8.56it/s]Feature extracting:  70%|███████   | 431/613 [00:49<00:21,  8.42it/s]Feature extracting:  71%|███████   | 433/613 [00:49<00:19,  9.40it/s]Feature extracting:  71%|███████   | 435/613 [00:50<00:18,  9.84it/s]Feature extracting:  71%|███████▏  | 437/613 [00:50<00:17,  9.89it/s]Feature extracting:  71%|███████▏  | 438/613 [00:50<00:19,  9.00it/s]Feature extracting:  72%|███████▏  | 439/613 [00:50<00:19,  9.04it/s]Feature extracting:  72%|███████▏  | 440/613 [00:50<00:19,  9.00it/s]Feature extracting:  72%|███████▏  | 442/613 [00:50<00:17,  9.71it/s]Feature extracting:  72%|███████▏  | 444/613 [00:51<00:16,  9.97it/s]Feature extracting:  73%|███████▎  | 446/613 [00:51<00:16, 10.20it/s]Feature extracting:  73%|███████▎  | 448/613 [00:51<00:18,  8.92it/s]Feature extracting:  73%|███████▎  | 449/613 [00:51<00:18,  9.02it/s]Feature extracting:  73%|███████▎  | 450/613 [00:51<00:18,  8.62it/s]Feature extracting:  74%|███████▎  | 451/613 [00:51<00:19,  8.25it/s]Feature extracting:  74%|███████▎  | 452/613 [00:51<00:19,  8.21it/s]Feature extracting:  74%|███████▍  | 454/613 [00:52<00:17,  9.25it/s]Feature extracting:  74%|███████▍  | 456/613 [00:52<00:15,  9.92it/s]Feature extracting:  75%|███████▍  | 458/613 [00:52<00:15, 10.16it/s]Feature extracting:  75%|███████▌  | 460/613 [00:52<00:16,  9.22it/s]Feature extracting:  75%|███████▌  | 461/613 [00:52<00:17,  8.83it/s]Feature extracting:  76%|███████▌  | 463/613 [00:53<00:15,  9.49it/s]Feature extracting:  76%|███████▌  | 465/613 [00:53<00:14,  9.95it/s]Feature extracting:  76%|███████▌  | 467/613 [00:53<00:14, 10.10it/s]Feature extracting:  77%|███████▋  | 469/613 [00:53<00:15,  9.25it/s]Feature extracting:  77%|███████▋  | 471/613 [00:53<00:16,  8.79it/s]Feature extracting:  77%|███████▋  | 473/613 [00:54<00:14,  9.77it/s]Feature extracting:  77%|███████▋  | 475/613 [00:54<00:13,  9.97it/s]Feature extracting:  78%|███████▊  | 477/613 [00:54<00:14,  9.28it/s]Feature extracting:  78%|███████▊  | 479/613 [00:54<00:15,  8.74it/s]Feature extracting:  78%|███████▊  | 481/613 [00:55<00:15,  8.33it/s]Feature extracting:  79%|███████▉  | 483/613 [00:55<00:16,  8.05it/s]Feature extracting:  79%|███████▉  | 485/613 [00:55<00:15,  8.49it/s]Feature extracting:  79%|███████▉  | 487/613 [00:55<00:13,  9.07it/s]Feature extracting:  80%|███████▉  | 489/613 [00:55<00:13,  9.49it/s]Feature extracting:  80%|████████  | 491/613 [00:56<00:12,  9.81it/s]Feature extracting:  80%|████████  | 492/613 [00:56<00:12,  9.75it/s]Feature extracting:  80%|████████  | 493/613 [00:56<00:12,  9.24it/s]Feature extracting:  81%|████████  | 494/613 [00:56<00:13,  8.73it/s]Feature extracting:  81%|████████  | 495/613 [00:56<00:13,  8.90it/s]Feature extracting:  81%|████████  | 496/613 [00:56<00:13,  8.50it/s]Feature extracting:  81%|████████  | 497/613 [00:56<00:14,  8.12it/s]Feature extracting:  81%|████████  | 498/613 [00:57<00:14,  7.96it/s]Feature extracting:  81%|████████▏ | 499/613 [00:57<00:14,  7.87it/s]Feature extracting:  82%|████████▏ | 500/613 [00:57<00:14,  7.81it/s]Feature extracting:  82%|████████▏ | 501/613 [00:57<00:13,  8.08it/s]Feature extracting:  82%|████████▏ | 503/613 [00:57<00:11,  9.18it/s]Feature extracting:  82%|████████▏ | 505/613 [00:57<00:11,  9.66it/s]Feature extracting:  83%|████████▎ | 507/613 [00:57<00:10,  9.84it/s]Feature extracting:  83%|████████▎ | 508/613 [00:58<00:11,  8.89it/s]Feature extracting:  83%|████████▎ | 509/613 [00:58<00:11,  8.95it/s]Feature extracting:  83%|████████▎ | 510/613 [00:58<00:11,  8.98it/s]Feature extracting:  84%|████████▎ | 512/613 [00:58<00:10,  9.60it/s]Feature extracting:  84%|████████▍ | 514/613 [00:58<00:09,  9.98it/s]Feature extracting:  84%|████████▍ | 516/613 [00:58<00:09, 10.12it/s]Feature extracting:  84%|████████▍ | 517/613 [00:59<00:10,  9.39it/s]Feature extracting:  85%|████████▍ | 518/613 [00:59<00:11,  8.28it/s]Feature extracting:  85%|████████▍ | 520/613 [00:59<00:09,  9.46it/s]Feature extracting:  85%|████████▌ | 522/613 [00:59<00:09,  9.82it/s]Feature extracting:  85%|████████▌ | 524/613 [00:59<00:08, 10.33it/s]Feature extracting:  86%|████████▌ | 526/613 [00:59<00:09,  9.43it/s]Feature extracting:  86%|████████▌ | 527/613 [01:00<00:10,  8.33it/s]Feature extracting:  86%|████████▋ | 529/613 [01:00<00:08,  9.61it/s]Feature extracting:  87%|████████▋ | 531/613 [01:00<00:08, 10.11it/s]Feature extracting:  87%|████████▋ | 533/613 [01:00<00:07, 10.29it/s]Feature extracting:  87%|████████▋ | 535/613 [01:00<00:08,  9.69it/s]Feature extracting:  87%|████████▋ | 536/613 [01:01<00:08,  8.82it/s]Feature extracting:  88%|████████▊ | 538/613 [01:01<00:07,  9.48it/s]Feature extracting:  88%|████████▊ | 540/613 [01:01<00:07,  9.98it/s]Feature extracting:  88%|████████▊ | 542/613 [01:01<00:06, 10.18it/s]Feature extracting:  89%|████████▊ | 544/613 [01:01<00:07,  9.21it/s]Feature extracting:  89%|████████▉ | 545/613 [01:01<00:07,  9.18it/s]Feature extracting:  89%|████████▉ | 546/613 [01:02<00:07,  9.25it/s]Feature extracting:  89%|████████▉ | 547/613 [01:02<00:07,  8.89it/s]Feature extracting:  89%|████████▉ | 548/613 [01:02<00:07,  8.58it/s]Feature extracting:  90%|████████▉ | 549/613 [01:02<00:07,  8.23it/s]Feature extracting:  90%|████████▉ | 551/613 [01:02<00:06,  9.04it/s]Feature extracting:  90%|█████████ | 553/613 [01:02<00:06,  9.68it/s]Feature extracting:  91%|█████████ | 555/613 [01:03<00:06,  9.57it/s]Feature extracting:  91%|█████████ | 556/613 [01:03<00:06,  8.54it/s]Feature extracting:  91%|█████████ | 558/613 [01:03<00:06,  9.09it/s]Feature extracting:  91%|█████████▏| 560/613 [01:03<00:05,  9.53it/s]Feature extracting:  92%|█████████▏| 562/613 [01:03<00:05, 10.09it/s]Feature extracting:  92%|█████████▏| 564/613 [01:04<00:05,  9.78it/s]Feature extracting:  92%|█████████▏| 565/613 [01:04<00:05,  9.18it/s]Feature extracting:  92%|█████████▏| 566/613 [01:04<00:05,  8.82it/s]Feature extracting:  93%|█████████▎| 568/613 [01:04<00:04,  9.43it/s]Feature extracting:  93%|█████████▎| 570/613 [01:04<00:04, 10.02it/s]Feature extracting:  93%|█████████▎| 571/613 [01:04<00:04,  8.87it/s]Feature extracting:  93%|█████████▎| 573/613 [01:05<00:04,  8.47it/s]Feature extracting:  94%|█████████▍| 575/613 [01:05<00:04,  9.45it/s]Feature extracting:  94%|█████████▍| 577/613 [01:05<00:03, 10.07it/s]Feature extracting:  94%|█████████▍| 579/613 [01:05<00:03, 10.30it/s]Feature extracting:  95%|█████████▍| 581/613 [01:05<00:03,  9.24it/s]Feature extracting:  95%|█████████▍| 582/613 [01:05<00:03,  8.85it/s]Feature extracting:  95%|█████████▌| 584/613 [01:06<00:03,  9.64it/s]Feature extracting:  96%|█████████▌| 586/613 [01:06<00:02, 10.01it/s]Feature extracting:  96%|█████████▌| 588/613 [01:06<00:02, 10.16it/s]Feature extracting:  96%|█████████▌| 590/613 [01:06<00:02,  9.43it/s]Feature extracting:  96%|█████████▋| 591/613 [01:06<00:02,  8.41it/s]Feature extracting:  97%|█████████▋| 593/613 [01:07<00:02,  9.62it/s]Feature extracting:  97%|█████████▋| 595/613 [01:07<00:01, 10.04it/s]Feature extracting:  97%|█████████▋| 597/613 [01:07<00:01,  9.97it/s]Feature extracting:  98%|█████████▊| 599/613 [01:07<00:01,  9.58it/s]Feature extracting:  98%|█████████▊| 600/613 [01:07<00:01,  9.06it/s]Feature extracting:  98%|█████████▊| 602/613 [01:08<00:01,  9.49it/s]Feature extracting:  99%|█████████▊| 604/613 [01:08<00:00,  9.79it/s]Feature extracting:  99%|█████████▉| 606/613 [01:08<00:00, 10.05it/s]Feature extracting:  99%|█████████▉| 608/613 [01:08<00:00,  9.84it/s]Feature extracting:  99%|█████████▉| 609/613 [01:08<00:00,  9.22it/s]Feature extracting: 100%|█████████▉| 610/613 [01:08<00:00,  9.10it/s]Feature extracting: 100%|█████████▉| 612/613 [01:09<00:00,  9.52it/s]Feature extracting: 100%|██████████| 613/613 [01:09<00:00,  5.53it/s]Feature extracting: 100%|██████████| 613/613 [01:09<00:00,  8.80it/s]
Feature extracting:   0%|          | 0/198 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/198 [00:00<02:14,  1.47it/s]Feature extracting:   3%|▎         | 6/198 [00:00<00:20,  9.15it/s]Feature extracting:   5%|▍         | 9/198 [00:01<00:22,  8.46it/s]Feature extracting:   6%|▌         | 11/198 [00:01<00:20,  9.04it/s]Feature extracting:   7%|▋         | 13/198 [00:01<00:19,  9.53it/s]Feature extracting:   8%|▊         | 15/198 [00:01<00:18,  9.79it/s]Feature extracting:   9%|▊         | 17/198 [00:01<00:18,  9.57it/s]Feature extracting:  10%|▉         | 19/198 [00:02<00:19,  9.02it/s]Feature extracting:  11%|█         | 21/198 [00:02<00:18,  9.45it/s]Feature extracting:  12%|█▏        | 23/198 [00:02<00:17,  9.73it/s]Feature extracting:  13%|█▎        | 25/198 [00:02<00:17,  9.90it/s]Feature extracting:  14%|█▎        | 27/198 [00:03<00:19,  8.93it/s]Feature extracting:  14%|█▍        | 28/198 [00:03<00:19,  8.65it/s]Feature extracting:  15%|█▍        | 29/198 [00:03<00:20,  8.33it/s]Feature extracting:  15%|█▌        | 30/198 [00:03<00:20,  8.07it/s]Feature extracting:  16%|█▌        | 32/198 [00:03<00:18,  9.04it/s]Feature extracting:  17%|█▋        | 34/198 [00:03<00:16,  9.73it/s]Feature extracting:  18%|█▊        | 36/198 [00:04<00:16, 10.02it/s]Feature extracting:  19%|█▊        | 37/198 [00:04<00:17,  9.46it/s]Feature extracting:  19%|█▉        | 38/198 [00:04<00:17,  8.96it/s]Feature extracting:  20%|█▉        | 39/198 [00:04<00:18,  8.54it/s]Feature extracting:  21%|██        | 41/198 [00:04<00:16,  9.52it/s]Feature extracting:  22%|██▏       | 43/198 [00:04<00:15, 10.01it/s]Feature extracting:  23%|██▎       | 45/198 [00:04<00:15, 10.16it/s]Feature extracting:  23%|██▎       | 46/198 [00:05<00:15,  9.55it/s]Feature extracting:  24%|██▎       | 47/198 [00:05<00:16,  8.92it/s]Feature extracting:  24%|██▍       | 48/198 [00:05<00:16,  8.91it/s]Feature extracting:  25%|██▍       | 49/198 [00:05<00:17,  8.73it/s]Feature extracting:  25%|██▌       | 50/198 [00:05<00:17,  8.34it/s]Feature extracting:  26%|██▌       | 51/198 [00:05<00:18,  8.01it/s]Feature extracting:  26%|██▋       | 52/198 [00:05<00:18,  7.86it/s]Feature extracting:  27%|██▋       | 53/198 [00:06<00:18,  7.75it/s]Feature extracting:  27%|██▋       | 54/198 [00:06<00:18,  7.64it/s]Feature extracting:  28%|██▊       | 56/198 [00:06<00:15,  9.06it/s]Feature extracting:  29%|██▉       | 58/198 [00:06<00:14,  9.70it/s]Feature extracting:  30%|███       | 60/198 [00:06<00:13,  9.91it/s]Feature extracting:  31%|███       | 61/198 [00:06<00:14,  9.67it/s]Feature extracting:  31%|███▏      | 62/198 [00:06<00:15,  9.05it/s]Feature extracting:  32%|███▏      | 63/198 [00:07<00:15,  8.76it/s]Feature extracting:  32%|███▏      | 64/198 [00:07<00:15,  8.88it/s]Feature extracting:  33%|███▎      | 66/198 [00:07<00:13,  9.50it/s]Feature extracting:  34%|███▍      | 68/198 [00:07<00:13,  9.84it/s]Feature extracting:  35%|███▍      | 69/198 [00:07<00:14,  9.20it/s]Feature extracting:  35%|███▌      | 70/198 [00:07<00:14,  8.82it/s]Feature extracting:  36%|███▌      | 71/198 [00:07<00:14,  8.59it/s]Feature extracting:  36%|███▋      | 72/198 [00:08<00:15,  8.26it/s]Feature extracting:  37%|███▋      | 73/198 [00:08<00:15,  8.00it/s]Feature extracting:  37%|███▋      | 74/198 [00:08<00:15,  8.20it/s]Feature extracting:  38%|███▊      | 76/198 [00:08<00:13,  9.07it/s]Feature extracting:  39%|███▉      | 78/198 [00:08<00:12,  9.95it/s]Feature extracting:  40%|████      | 80/198 [00:08<00:11, 10.04it/s]Feature extracting:  41%|████      | 81/198 [00:09<00:12,  9.37it/s]Feature extracting:  41%|████▏     | 82/198 [00:09<00:13,  8.82it/s]Feature extracting:  42%|████▏     | 83/198 [00:09<00:13,  8.80it/s]Feature extracting:  43%|████▎     | 85/198 [00:09<00:11,  9.48it/s]Feature extracting:  44%|████▍     | 87/198 [00:09<00:10, 10.14it/s]Feature extracting:  45%|████▍     | 89/198 [00:09<00:10, 10.36it/s]Feature extracting:  46%|████▌     | 91/198 [00:10<00:11,  9.13it/s]Feature extracting:  46%|████▋     | 92/198 [00:10<00:11,  8.89it/s]Feature extracting:  47%|████▋     | 94/198 [00:10<00:10,  9.68it/s]Feature extracting:  48%|████▊     | 96/198 [00:10<00:10, 10.06it/s]Feature extracting:  49%|████▉     | 98/198 [00:10<00:09, 10.19it/s]Feature extracting:  51%|█████     | 100/198 [00:11<00:10,  9.09it/s]Feature extracting:  51%|█████     | 101/198 [00:11<00:10,  9.09it/s]Feature extracting:  52%|█████▏    | 103/198 [00:11<00:09,  9.66it/s]Feature extracting:  53%|█████▎    | 105/198 [00:11<00:09,  9.92it/s]Feature extracting:  54%|█████▍    | 107/198 [00:11<00:08, 10.14it/s]Feature extracting:  55%|█████▌    | 109/198 [00:11<00:09,  9.50it/s]Feature extracting:  56%|█████▌    | 110/198 [00:12<00:09,  8.93it/s]Feature extracting:  57%|█████▋    | 112/198 [00:12<00:09,  9.42it/s]Feature extracting:  58%|█████▊    | 114/198 [00:12<00:08,  9.74it/s]Feature extracting:  59%|█████▊    | 116/198 [00:12<00:07, 10.25it/s]Feature extracting:  60%|█████▉    | 118/198 [00:12<00:08,  9.69it/s]Feature extracting:  60%|██████    | 119/198 [00:13<00:08,  9.12it/s]Feature extracting:  61%|██████    | 120/198 [00:13<00:08,  8.97it/s]Feature extracting:  62%|██████▏   | 122/198 [00:13<00:07,  9.58it/s]Feature extracting:  63%|██████▎   | 124/198 [00:13<00:07, 10.11it/s]Feature extracting:  64%|██████▎   | 126/198 [00:13<00:07, 10.08it/s]Feature extracting:  64%|██████▍   | 127/198 [00:13<00:07,  9.43it/s]Feature extracting:  65%|██████▍   | 128/198 [00:13<00:07,  8.88it/s]Feature extracting:  65%|██████▌   | 129/198 [00:14<00:08,  8.51it/s]Feature extracting:  66%|██████▌   | 130/198 [00:14<00:08,  8.21it/s]Feature extracting:  66%|██████▌   | 131/198 [00:14<00:08,  8.11it/s]Feature extracting:  67%|██████▋   | 132/198 [00:14<00:07,  8.55it/s]Feature extracting:  68%|██████▊   | 134/198 [00:14<00:06,  9.48it/s]Feature extracting:  69%|██████▊   | 136/198 [00:14<00:06,  9.83it/s]Feature extracting:  70%|██████▉   | 138/198 [00:15<00:06,  9.70it/s]Feature extracting:  70%|███████   | 139/198 [00:15<00:06,  9.26it/s]Feature extracting:  71%|███████   | 140/198 [00:15<00:06,  8.73it/s]Feature extracting:  71%|███████   | 141/198 [00:15<00:06,  8.84it/s]Feature extracting:  72%|███████▏  | 142/198 [00:15<00:06,  8.42it/s]Feature extracting:  72%|███████▏  | 143/198 [00:15<00:06,  8.09it/s]Feature extracting:  73%|███████▎  | 144/198 [00:15<00:06,  8.26it/s]Feature extracting:  74%|███████▎  | 146/198 [00:16<00:05,  9.32it/s]Feature extracting:  75%|███████▍  | 148/198 [00:16<00:05,  9.91it/s]Feature extracting:  75%|███████▌  | 149/198 [00:16<00:05,  9.58it/s]Feature extracting:  76%|███████▌  | 150/198 [00:16<00:05,  8.96it/s]Feature extracting:  76%|███████▋  | 151/198 [00:16<00:05,  8.47it/s]Feature extracting:  77%|███████▋  | 152/198 [00:16<00:05,  8.75it/s]Feature extracting:  78%|███████▊  | 154/198 [00:16<00:04,  9.79it/s]Feature extracting:  79%|███████▉  | 156/198 [00:17<00:04, 10.15it/s]Feature extracting:  80%|███████▉  | 158/198 [00:17<00:03, 10.23it/s]Feature extracting:  81%|████████  | 160/198 [00:17<00:04,  9.03it/s]Feature extracting:  81%|████████▏ | 161/198 [00:17<00:04,  8.89it/s]Feature extracting:  82%|████████▏ | 162/198 [00:17<00:04,  8.94it/s]Feature extracting:  82%|████████▏ | 163/198 [00:17<00:04,  8.47it/s]Feature extracting:  83%|████████▎ | 164/198 [00:18<00:04,  8.18it/s]Feature extracting:  84%|████████▍ | 166/198 [00:18<00:03,  8.99it/s]Feature extracting:  85%|████████▍ | 168/198 [00:18<00:03,  9.55it/s]Feature extracting:  86%|████████▌ | 170/198 [00:18<00:02, 10.20it/s]Feature extracting:  87%|████████▋ | 172/198 [00:18<00:02,  9.05it/s]Feature extracting:  87%|████████▋ | 173/198 [00:18<00:02,  8.85it/s]Feature extracting:  88%|████████▊ | 175/198 [00:19<00:02,  9.36it/s]Feature extracting:  89%|████████▉ | 177/198 [00:19<00:02,  9.95it/s]Feature extracting:  90%|█████████ | 179/198 [00:19<00:01,  9.63it/s]Feature extracting:  91%|█████████ | 180/198 [00:19<00:01,  9.12it/s]Feature extracting:  91%|█████████▏| 181/198 [00:19<00:01,  8.68it/s]Feature extracting:  92%|█████████▏| 183/198 [00:19<00:01,  9.37it/s]Feature extracting:  93%|█████████▎| 185/198 [00:20<00:01, 10.02it/s]Feature extracting:  94%|█████████▍| 187/198 [00:20<00:01, 10.24it/s]Feature extracting:  95%|█████████▌| 189/198 [00:20<00:00,  9.35it/s]Feature extracting:  96%|█████████▌| 190/198 [00:20<00:00,  8.88it/s]Feature extracting:  96%|█████████▋| 191/198 [00:20<00:00,  9.02it/s]Feature extracting:  97%|█████████▋| 193/198 [00:21<00:00,  9.82it/s]Feature extracting:  98%|█████████▊| 195/198 [00:21<00:00, 10.21it/s]Feature extracting:  99%|█████████▉| 197/198 [00:21<00:00,  9.86it/s]Feature extracting: 100%|██████████| 198/198 [00:21<00:00,  5.40it/s]Feature extracting: 100%|██████████| 198/198 [00:22<00:00,  8.97it/s]
Feature extracting:   0%|          | 0/198 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/198 [00:00<02:51,  1.15it/s]Feature extracting:   1%|          | 2/198 [00:01<01:28,  2.21it/s]Feature extracting:   2%|▏         | 3/198 [00:01<01:02,  3.13it/s]Feature extracting:   2%|▏         | 4/198 [00:01<00:48,  3.97it/s]Feature extracting:   3%|▎         | 5/198 [00:01<00:43,  4.48it/s]Feature extracting:   3%|▎         | 6/198 [00:01<00:43,  4.43it/s]Feature extracting:   4%|▎         | 7/198 [00:01<00:40,  4.69it/s]Feature extracting:   4%|▍         | 8/198 [00:02<00:37,  5.13it/s]Feature extracting:   5%|▍         | 9/198 [00:02<00:33,  5.58it/s]Feature extracting:   5%|▌         | 10/198 [00:02<00:32,  5.82it/s]Feature extracting:   6%|▌         | 11/198 [00:02<00:33,  5.50it/s]Feature extracting:   6%|▌         | 12/198 [00:02<00:36,  5.08it/s]Feature extracting:   7%|▋         | 13/198 [00:02<00:33,  5.57it/s]Feature extracting:   7%|▋         | 14/198 [00:03<00:31,  5.79it/s]Feature extracting:   8%|▊         | 15/198 [00:03<00:30,  5.97it/s]Feature extracting:   8%|▊         | 16/198 [00:03<00:29,  6.10it/s]Feature extracting:   9%|▊         | 17/198 [00:03<00:33,  5.42it/s]Feature extracting:   9%|▉         | 18/198 [00:03<00:33,  5.34it/s]Feature extracting:  10%|▉         | 19/198 [00:04<00:31,  5.68it/s]Feature extracting:  10%|█         | 20/198 [00:04<00:30,  5.87it/s]Feature extracting:  11%|█         | 21/198 [00:04<00:29,  5.97it/s]Feature extracting:  11%|█         | 22/198 [00:04<00:29,  5.90it/s]Feature extracting:  12%|█▏        | 23/198 [00:04<00:32,  5.33it/s]Feature extracting:  12%|█▏        | 24/198 [00:04<00:31,  5.45it/s]Feature extracting:  13%|█▎        | 25/198 [00:05<00:30,  5.65it/s]Feature extracting:  13%|█▎        | 26/198 [00:05<00:29,  5.84it/s]Feature extracting:  14%|█▎        | 27/198 [00:05<00:28,  5.93it/s]Feature extracting:  14%|█▍        | 28/198 [00:05<00:32,  5.31it/s]Feature extracting:  15%|█▍        | 29/198 [00:05<00:31,  5.40it/s]Feature extracting:  15%|█▌        | 30/198 [00:05<00:29,  5.64it/s]Feature extracting:  16%|█▌        | 31/198 [00:06<00:28,  5.90it/s]Feature extracting:  16%|█▌        | 32/198 [00:06<00:27,  6.00it/s]Feature extracting:  17%|█▋        | 33/198 [00:06<00:30,  5.49it/s]Feature extracting:  17%|█▋        | 34/198 [00:06<00:31,  5.24it/s]Feature extracting:  18%|█▊        | 35/198 [00:06<00:29,  5.53it/s]Feature extracting:  18%|█▊        | 36/198 [00:06<00:27,  5.88it/s]Feature extracting:  19%|█▊        | 37/198 [00:07<00:26,  6.07it/s]Feature extracting:  19%|█▉        | 38/198 [00:07<00:28,  5.65it/s]Feature extracting:  20%|█▉        | 39/198 [00:07<00:30,  5.21it/s]Feature extracting:  20%|██        | 40/198 [00:07<00:28,  5.60it/s]Feature extracting:  21%|██        | 41/198 [00:07<00:26,  5.82it/s]Feature extracting:  21%|██        | 42/198 [00:08<00:26,  5.97it/s]Feature extracting:  22%|██▏       | 43/198 [00:08<00:27,  5.74it/s]Feature extracting:  22%|██▏       | 44/198 [00:08<00:29,  5.24it/s]Feature extracting:  23%|██▎       | 45/198 [00:08<00:30,  5.04it/s]Feature extracting:  23%|██▎       | 46/198 [00:08<00:30,  4.92it/s]Feature extracting:  24%|██▎       | 47/198 [00:09<00:28,  5.26it/s]Feature extracting:  24%|██▍       | 48/198 [00:09<00:27,  5.55it/s]Feature extracting:  25%|██▍       | 49/198 [00:09<00:25,  5.91it/s]Feature extracting:  25%|██▌       | 50/198 [00:09<00:26,  5.68it/s]Feature extracting:  26%|██▌       | 51/198 [00:09<00:28,  5.18it/s]Feature extracting:  26%|██▋       | 52/198 [00:09<00:27,  5.38it/s]Feature extracting:  27%|██▋       | 53/198 [00:10<00:25,  5.71it/s]Feature extracting:  27%|██▋       | 54/198 [00:10<00:24,  6.00it/s]Feature extracting:  28%|██▊       | 55/198 [00:10<00:24,  5.94it/s]Feature extracting:  28%|██▊       | 56/198 [00:10<00:26,  5.31it/s]Feature extracting:  29%|██▉       | 57/198 [00:10<00:26,  5.36it/s]Feature extracting:  29%|██▉       | 58/198 [00:10<00:24,  5.77it/s]Feature extracting:  30%|██▉       | 59/198 [00:11<00:23,  5.90it/s]Feature extracting:  30%|███       | 60/198 [00:11<00:22,  6.10it/s]Feature extracting:  31%|███       | 61/198 [00:11<00:25,  5.43it/s]Feature extracting:  31%|███▏      | 62/198 [00:11<00:25,  5.29it/s]Feature extracting:  32%|███▏      | 63/198 [00:11<00:23,  5.66it/s]Feature extracting:  32%|███▏      | 64/198 [00:12<00:22,  5.88it/s]Feature extracting:  33%|███▎      | 65/198 [00:12<00:22,  6.02it/s]Feature extracting:  33%|███▎      | 66/198 [00:12<00:22,  5.82it/s]Feature extracting:  34%|███▍      | 67/198 [00:12<00:24,  5.40it/s]Feature extracting:  34%|███▍      | 68/198 [00:12<00:24,  5.21it/s]Feature extracting:  35%|███▍      | 69/198 [00:13<00:26,  4.92it/s]Feature extracting:  35%|███▌      | 70/198 [00:13<00:25,  5.12it/s]Feature extracting:  36%|███▌      | 71/198 [00:13<00:23,  5.52it/s]Feature extracting:  36%|███▋      | 72/198 [00:13<00:21,  5.83it/s]Feature extracting:  37%|███▋      | 73/198 [00:13<00:21,  5.88it/s]Feature extracting:  37%|███▋      | 74/198 [00:13<00:23,  5.28it/s]Feature extracting:  38%|███▊      | 75/198 [00:14<00:23,  5.29it/s]Feature extracting:  38%|███▊      | 76/198 [00:14<00:21,  5.69it/s]Feature extracting:  39%|███▉      | 77/198 [00:14<00:20,  5.92it/s]Feature extracting:  39%|███▉      | 78/198 [00:14<00:19,  6.04it/s]Feature extracting:  40%|███▉      | 79/198 [00:14<00:21,  5.43it/s]Feature extracting:  40%|████      | 80/198 [00:14<00:22,  5.27it/s]Feature extracting:  41%|████      | 81/198 [00:15<00:20,  5.66it/s]Feature extracting:  41%|████▏     | 82/198 [00:15<00:19,  5.90it/s]Feature extracting:  42%|████▏     | 83/198 [00:15<00:19,  6.00it/s]Feature extracting:  42%|████▏     | 84/198 [00:15<00:20,  5.63it/s]Feature extracting:  43%|████▎     | 85/198 [00:15<00:21,  5.29it/s]Feature extracting:  43%|████▎     | 86/198 [00:16<00:22,  4.97it/s]Feature extracting:  44%|████▍     | 87/198 [00:16<00:22,  4.98it/s]Feature extracting:  44%|████▍     | 88/198 [00:16<00:20,  5.29it/s]Feature extracting:  45%|████▍     | 89/198 [00:16<00:19,  5.61it/s]Feature extracting:  45%|████▌     | 90/198 [00:16<00:18,  5.92it/s]Feature extracting:  46%|████▌     | 91/198 [00:16<00:19,  5.57it/s]Feature extracting:  46%|████▋     | 92/198 [00:17<00:20,  5.18it/s]Feature extracting:  47%|████▋     | 93/198 [00:17<00:19,  5.48it/s]Feature extracting:  47%|████▋     | 94/198 [00:17<00:17,  5.88it/s]Feature extracting:  48%|████▊     | 95/198 [00:17<00:17,  6.03it/s]Feature extracting:  48%|████▊     | 96/198 [00:17<00:17,  5.71it/s]Feature extracting:  49%|████▉     | 97/198 [00:18<00:19,  5.19it/s]Feature extracting:  49%|████▉     | 98/198 [00:18<00:18,  5.45it/s]Feature extracting:  50%|█████     | 99/198 [00:18<00:16,  5.84it/s]Feature extracting:  51%|█████     | 100/198 [00:18<00:16,  6.04it/s]Feature extracting:  51%|█████     | 101/198 [00:18<00:16,  5.88it/s]Feature extracting:  52%|█████▏    | 102/198 [00:18<00:18,  5.31it/s]Feature extracting:  52%|█████▏    | 103/198 [00:19<00:17,  5.46it/s]Feature extracting:  53%|█████▎    | 104/198 [00:19<00:16,  5.71it/s]Feature extracting:  53%|█████▎    | 105/198 [00:19<00:15,  5.90it/s]Feature extracting:  54%|█████▎    | 106/198 [00:19<00:15,  5.98it/s]Feature extracting:  54%|█████▍    | 107/198 [00:19<00:16,  5.41it/s]Feature extracting:  55%|█████▍    | 108/198 [00:19<00:16,  5.33it/s]Feature extracting:  55%|█████▌    | 109/198 [00:20<00:15,  5.65it/s]Feature extracting:  56%|█████▌    | 110/198 [00:20<00:15,  5.81it/s]Feature extracting:  56%|█████▌    | 111/198 [00:20<00:14,  5.96it/s]Feature extracting:  57%|█████▋    | 112/198 [00:20<00:14,  5.87it/s]Feature extracting:  57%|█████▋    | 113/198 [00:20<00:16,  5.31it/s]Feature extracting:  58%|█████▊    | 114/198 [00:21<00:15,  5.47it/s]Feature extracting:  58%|█████▊    | 115/198 [00:21<00:14,  5.68it/s]Feature extracting:  59%|█████▊    | 116/198 [00:21<00:13,  5.97it/s]Feature extracting:  59%|█████▉    | 117/198 [00:21<00:13,  5.98it/s]Feature extracting:  60%|█████▉    | 118/198 [00:21<00:14,  5.42it/s]Feature extracting:  60%|██████    | 119/198 [00:21<00:14,  5.34it/s]Feature extracting:  61%|██████    | 120/198 [00:22<00:13,  5.61it/s]Feature extracting:  61%|██████    | 121/198 [00:22<00:13,  5.91it/s]Feature extracting:  62%|██████▏   | 122/198 [00:22<00:13,  5.63it/s]Feature extracting:  62%|██████▏   | 123/198 [00:22<00:14,  5.17it/s]Feature extracting:  63%|██████▎   | 124/198 [00:22<00:13,  5.39it/s]Feature extracting:  63%|██████▎   | 125/198 [00:22<00:12,  5.77it/s]Feature extracting:  64%|██████▎   | 126/198 [00:23<00:12,  5.98it/s]Feature extracting:  64%|██████▍   | 127/198 [00:23<00:11,  6.14it/s]Feature extracting:  65%|██████▍   | 128/198 [00:23<00:12,  5.49it/s]Feature extracting:  65%|██████▌   | 129/198 [00:23<00:13,  5.28it/s]Feature extracting:  66%|██████▌   | 130/198 [00:23<00:13,  5.07it/s]Feature extracting:  66%|██████▌   | 131/198 [00:24<00:13,  5.02it/s]Feature extracting:  67%|██████▋   | 132/198 [00:24<00:12,  5.36it/s]Feature extracting:  67%|██████▋   | 133/198 [00:24<00:11,  5.60it/s]Feature extracting:  68%|██████▊   | 134/198 [00:24<00:10,  5.92it/s]Feature extracting:  68%|██████▊   | 135/198 [00:24<00:11,  5.59it/s]Feature extracting:  69%|██████▊   | 136/198 [00:25<00:11,  5.18it/s]Feature extracting:  69%|██████▉   | 137/198 [00:25<00:11,  5.45it/s]Feature extracting:  70%|██████▉   | 138/198 [00:25<00:10,  5.71it/s]Feature extracting:  70%|███████   | 139/198 [00:25<00:09,  6.05it/s]Feature extracting:  71%|███████   | 140/198 [00:25<00:10,  5.75it/s]Feature extracting:  71%|███████   | 141/198 [00:25<00:10,  5.24it/s]Feature extracting:  72%|███████▏  | 142/198 [00:26<00:10,  5.42it/s]Feature extracting:  72%|███████▏  | 143/198 [00:26<00:09,  5.80it/s]Feature extracting:  73%|███████▎  | 144/198 [00:26<00:08,  6.02it/s]Feature extracting:  73%|███████▎  | 145/198 [00:26<00:08,  5.98it/s]Feature extracting:  74%|███████▎  | 146/198 [00:26<00:09,  5.33it/s]Feature extracting:  74%|███████▍  | 147/198 [00:26<00:09,  5.36it/s]Feature extracting:  75%|███████▍  | 148/198 [00:27<00:08,  5.77it/s]Feature extracting:  75%|███████▌  | 149/198 [00:27<00:08,  5.59it/s]Feature extracting:  76%|███████▌  | 150/198 [00:27<00:09,  5.15it/s]Feature extracting:  76%|███████▋  | 151/198 [00:27<00:08,  5.32it/s]Feature extracting:  77%|███████▋  | 152/198 [00:27<00:08,  5.69it/s]Feature extracting:  77%|███████▋  | 153/198 [00:27<00:07,  5.92it/s]Feature extracting:  78%|███████▊  | 154/198 [00:28<00:07,  6.00it/s]Feature extracting:  78%|███████▊  | 155/198 [00:28<00:08,  5.33it/s]Feature extracting:  79%|███████▉  | 156/198 [00:28<00:07,  5.32it/s]Feature extracting:  79%|███████▉  | 157/198 [00:28<00:07,  5.68it/s]Feature extracting:  80%|███████▉  | 158/198 [00:28<00:06,  5.77it/s]Feature extracting:  80%|████████  | 159/198 [00:29<00:07,  5.25it/s]Feature extracting:  81%|████████  | 160/198 [00:29<00:07,  5.19it/s]Feature extracting:  81%|████████▏ | 161/198 [00:29<00:06,  5.60it/s]Feature extracting:  82%|████████▏ | 162/198 [00:29<00:06,  5.82it/s]Feature extracting:  82%|████████▏ | 163/198 [00:29<00:05,  6.01it/s]Feature extracting:  83%|████████▎ | 164/198 [00:29<00:05,  5.67it/s]Feature extracting:  83%|████████▎ | 165/198 [00:30<00:06,  5.16it/s]Feature extracting:  84%|████████▍ | 166/198 [00:30<00:05,  5.58it/s]Feature extracting:  84%|████████▍ | 167/198 [00:30<00:05,  5.82it/s]Feature extracting:  85%|████████▍ | 168/198 [00:30<00:05,  5.93it/s]Feature extracting:  85%|████████▌ | 169/198 [00:30<00:04,  6.06it/s]Feature extracting:  86%|████████▌ | 170/198 [00:31<00:05,  5.56it/s]Feature extracting:  86%|████████▋ | 171/198 [00:31<00:05,  5.15it/s]Feature extracting:  87%|████████▋ | 172/198 [00:31<00:05,  4.90it/s]Feature extracting:  87%|████████▋ | 173/198 [00:31<00:04,  5.07it/s]Feature extracting:  88%|████████▊ | 174/198 [00:31<00:04,  5.40it/s]Feature extracting:  88%|████████▊ | 175/198 [00:31<00:03,  5.77it/s]Feature extracting:  89%|████████▉ | 176/198 [00:32<00:03,  5.98it/s]Feature extracting:  89%|████████▉ | 177/198 [00:32<00:03,  5.52it/s]Feature extracting:  90%|████████▉ | 178/198 [00:32<00:03,  5.18it/s]Feature extracting:  90%|█████████ | 179/198 [00:32<00:03,  5.60it/s]Feature extracting:  91%|█████████ | 180/198 [00:32<00:03,  5.82it/s]Feature extracting:  91%|█████████▏| 181/198 [00:33<00:02,  6.00it/s]Feature extracting:  92%|█████████▏| 182/198 [00:33<00:02,  5.92it/s]Feature extracting:  92%|█████████▏| 183/198 [00:33<00:02,  5.31it/s]Feature extracting:  93%|█████████▎| 184/198 [00:33<00:02,  5.48it/s]Feature extracting:  93%|█████████▎| 185/198 [00:33<00:02,  5.72it/s]Feature extracting:  94%|█████████▍| 186/198 [00:33<00:02,  5.90it/s]Feature extracting:  94%|█████████▍| 187/198 [00:34<00:01,  5.98it/s]Feature extracting:  95%|█████████▍| 188/198 [00:34<00:01,  5.54it/s]Feature extracting:  95%|█████████▌| 189/198 [00:34<00:01,  5.34it/s]Feature extracting:  96%|█████████▌| 190/198 [00:34<00:01,  5.67it/s]Feature extracting:  96%|█████████▋| 191/198 [00:34<00:01,  5.79it/s]Feature extracting:  97%|█████████▋| 192/198 [00:34<00:01,  5.97it/s]Feature extracting:  97%|█████████▋| 193/198 [00:35<00:00,  5.93it/s]Feature extracting:  98%|█████████▊| 194/198 [00:35<00:00,  5.34it/s]Feature extracting:  98%|█████████▊| 195/198 [00:35<00:00,  5.19it/s]Feature extracting:  99%|█████████▉| 196/198 [00:35<00:00,  4.87it/s]Feature extracting:  99%|█████████▉| 197/198 [00:35<00:00,  5.27it/s]Feature extracting: 100%|██████████| 198/198 [00:36<00:00,  5.79it/s]Feature extracting: 100%|██████████| 198/198 [00:36<00:00,  5.47it/s]
Feature extracting:   0%|          | 0/1 [00:00<?, ?it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.86it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.60it/s]
Train Epoch: 1 	Loss: 3.530631
pred: tensor([12,  1,  1, 10, 12, 10, 10, 10, 10, 10, 12,  1,  1, 10, 10, 10,  1, 12,
        10,  1,  1, 12], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 8.558986539984165, "epoch": 1}
pred: tensor([ 1,  1,  1,  1,  1,  1,  1,  1, 12,  1,  1,  1,  1,  1, 12,  1,  1,  1,
        12,  1,  1,  1], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 8.82818685669042, "epoch": 1}
Train Epoch: 2 	Loss: 3.415402
pred: tensor([10,  1,  1, 10, 10, 10, 10, 10, 10, 10, 12,  1,  1, 10, 10, 10,  1, 12,
        10,  1,  1, 12], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 8.646080760095012, "epoch": 2}
pred: tensor([12,  1,  1, 12, 12, 12, 12, 12, 12, 12,  1,  1,  1, 12, 12, 12,  1, 12,
        12,  1,  1, 12], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 60.2375296912114, "epoch": 2}
Train Epoch: 3 	Loss: 3.387207
pred: tensor([10,  1,  1, 10, 10, 10, 10, 10, 10, 10,  2,  1,  1, 10, 10, 10,  1, 12,
        10,  1,  1, 12], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 8.646080760095012, "epoch": 3}
pred: tensor([ 2,  1,  1, 12,  2,  2, 12, 12, 12, 12,  1,  1,  1, 12, 12, 12,  1,  2,
        12,  1,  1,  2], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 38.33729216152019, "epoch": 3}
Train Epoch: 4 	Loss: 3.380072
pred: tensor([10,  1,  1, 10, 10, 10, 10, 10, 10, 10,  2,  1,  1, 10, 10, 10,  1,  2,
        10,  1,  1, 12], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 8.479809976247031, "epoch": 4}
pred: tensor([ 2,  1,  2, 12,  2,  2,  2, 12, 12, 12,  2,  1,  1,  2,  2,  2,  1,  2,
         2,  2,  1,  2], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 17.062549485352335, "epoch": 4}
Train Epoch: 5 	Loss: 3.373603
pred: tensor([12,  1,  1, 10, 10, 10, 10, 10, 10, 10,  2,  1,  1, 10, 10, 10,  1,  2,
        10,  1,  1, 12], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 8.440221694378463, "epoch": 5}
pred: tensor([ 2,  1,  2,  2,  2,  2,  2,  2, 12,  2,  2,  1,  1,  2,  2,  2,  1,  2,
         2,  2,  2,  2], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 7.379255740300871, "epoch": 5}
Train Epoch: 6 	Loss: 3.367579
pred: tensor([12,  1,  1, 10, 12, 10, 10, 10, 10, 10,  2,  1,  1, 10, 10, 10,  1,  2,
        10,  1,  1, 12], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 8.487727632620745, "epoch": 6}
pred: tensor([ 2,  2,  2, 12,  2,  2,  2, 12, 12, 12,  2,  2,  2,  2,  2,  2,  1,  2,
         2,  2,  2,  2], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 15.344418052256533, "epoch": 6}
Train Epoch: 7 	Loss: 3.361742
pred: tensor([ 2,  1,  1, 10, 12, 10, 10, 10, 10, 10,  2,  1,  1, 10, 10, 10,  1,  2,
        10,  1,  1, 12], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 8.519398258115597, "epoch": 7}
pred: tensor([ 2,  2,  2, 12,  2,  2,  2, 12, 12, 12,  2,  2,  2,  2,  2,  2,  1,  2,
         2,  2,  2,  2], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 22.62074425969913, "epoch": 7}
Train Epoch: 8 	Loss: 3.354981
pred: tensor([ 2,  1,  1, 10, 12,  5, 10, 10, 10, 10,  2,  1,  1, 10, 10, 10,  1,  2,
        10,  1,  1, 12], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 8.693586698337292, "epoch": 8}
pred: tensor([ 2,  2,  2, 12,  2,  2,  2, 12,  5, 12,  2,  2,  2,  2,  2,  2,  2,  2,
         2,  2,  2,  2], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 20.973871733966746, "epoch": 8}
Train Epoch: 9 	Loss: 3.346769
pred: tensor([ 2,  1,  1, 10, 12,  5, 10, 10, 10, 10,  2,  1,  1, 10, 10, 10,  1,  2,
         5,  1,  1,  5], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 8.82818685669042, "epoch": 9}
pred: tensor([ 2,  2,  2, 12,  2,  2,  2, 12, 12, 12,  2,  2,  2,  2,  2,  2,  2,  2,
         2,  2,  2,  2], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 25.41567695961995, "epoch": 9}
Train Epoch: 10 	Loss: 3.337684
pred: tensor([ 2,  1,  1, 10, 12,  5, 10, 10, 10, 10,  2,  1,  1, 10, 10, 10,  1,  2,
         5,  1,  1,  5], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 9.121140142517815, "epoch": 10}
pred: tensor([ 2,  2,  2, 12,  2,  2,  2, 12, 12, 12,  2,  2,  2, 12,  2,  2,  2,  2,
         2,  2,  2,  2], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 26.381631037212983, "epoch": 10}
Train Epoch: 11 	Loss: 3.326882
pred: tensor([ 2,  1,  1, 10, 12, 38, 10, 10, 10, 10,  2,  1, 35, 10,  5, 10,  1,  2,
         5,  1,  1,  5], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 9.58036421219319, "epoch": 11}
pred: tensor([ 2,  2,  2, 12, 12,  2, 12, 12,  4, 12,  2,  2,  2, 12,  2,  2,  2,  2,
         2,  2,  2, 12], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 30.40380047505938, "epoch": 11}
Train Epoch: 12 	Loss: 3.317066
pred: tensor([38,  1,  1, 10,  2, 38, 10, 10, 10, 10,  2, 38, 35, 10, 38,  5,  1,  2,
         5,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 9.722882026920031, "epoch": 12}
pred: tensor([ 2,  2, 12,  4, 12,  2, 12,  4,  4, 12,  2,  2,  2, 12,  2, 12,  2,  2,
         2,  2,  2, 12], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 36.04117181314331, "epoch": 12}
Train Epoch: 13 	Loss: 3.305216
pred: tensor([38, 35,  1, 10,  2, 38, 10, 10, 10, 10,  2, 38, 35, 10, 38,  5,  1,  2,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 9.746634996041172, "epoch": 13}
pred: tensor([12,  2, 12,  4, 12,  2, 12,  4,  4,  4,  2,  2,  2, 12, 12, 12,  2, 12,
        12,  2, 12, 12], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 48.1631037212985, "epoch": 13}
Train Epoch: 14 	Loss: 3.295094
pred: tensor([38, 35,  1, 10,  2, 38, 10, 10, 10, 10,  1, 38, 35, 10, 38,  5,  1,  2,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 9.675376088677751, "epoch": 14}
pred: tensor([12,  2, 12,  4,  4, 12,  4,  4,  4,  4, 12,  2, 12,  4, 12, 12,  2, 12,
        12, 12, 12,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 52.09817893903404, "epoch": 14}
Train Epoch: 15 	Loss: 3.284224
pred: tensor([38, 35,  1, 10,  2, 38, 10, 10, 10, 10,  1, 38, 35, 10, 38,  5,  1,  2,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 9.794140934283453, "epoch": 15}
pred: tensor([12, 12,  4,  4,  4, 12,  4,  4,  4,  4, 12, 12, 12,  4, 12,  4, 12, 12,
        12, 12, 12,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 43.42834520981789, "epoch": 15}
Train Epoch: 16 	Loss: 3.276452
pred: tensor([38, 35,  1, 10,  2, 38, 10, 10, 10, 10,  1, 38, 35, 10, 38,  5,  1,  2,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 9.865399841646873, "epoch": 16}
pred: tensor([ 4, 12,  4,  4,  4, 12,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12, 12,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 38.00475059382423, "epoch": 16}
Train Epoch: 17 	Loss: 3.267321
pred: tensor([38, 35, 13, 10,  2, 38, 10, 10, 10, 10, 11, 38, 38, 10, 38,  3,  1,  2,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 9.78622327790974, "epoch": 17}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12, 12,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 28.661916072842438, "epoch": 17}
Train Epoch: 18 	Loss: 3.255566
pred: tensor([38, 35, 13, 10,  2, 38, 10, 10, 10, 10, 11, 38, 38, 10, 38,  3,  1,  2,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 9.802058590657165, "epoch": 18}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 24.44972288202692, "epoch": 18}
Train Epoch: 19 	Loss: 3.247323
pred: tensor([38, 35, 13, 10,  2, 38, 10, 10, 10, 10, 11, 38, 38, 10, 38,  3,  1,  2,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 9.936658749010293, "epoch": 19}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 22.549485352335708, "epoch": 19}
Train Epoch: 20 	Loss: 3.237077
pred: tensor([38, 35, 13, 10,  2, 38, 10, 10, 10, 10, 11, 38, 38, 10, 38,  3,  1,  2,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 9.912905779889153, "epoch": 20}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 21.361836896278703, "epoch": 20}
Train Epoch: 21 	Loss: 3.228573
pred: tensor([38, 35, 13, 10,  2, 38, 10, 10, 10, 10, 11, 38, 38, 38, 38,  3,  1, 11,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 10.221694378463974, "epoch": 21}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 21.931908155186065, "epoch": 21}
Train Epoch: 22 	Loss: 3.218766
pred: tensor([38, 35, 13, 10,  2, 38, 10, 10, 10, 10, 11, 38, 38, 38, 38,  3,  1, 11,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 10.498812351543943, "epoch": 22}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 20.110847189231986, "epoch": 22}
Train Epoch: 23 	Loss: 3.208714
pred: tensor([38, 35, 13, 10,  2, 38, 10, 10, 10, 10, 11, 18, 38, 38, 38,  3,  1, 11,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 10.65716547901821, "epoch": 23}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 20.68091844813935, "epoch": 23}
Train Epoch: 24 	Loss: 3.197452
pred: tensor([38, 35, 13, 10,  2, 38, 10, 10, 10, 10, 11, 18, 38, 38, 38,  3,  1, 11,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 10.958036421219319, "epoch": 24}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 21.243072050673, "epoch": 24}
Train Epoch: 25 	Loss: 3.186209
pred: tensor([38, 35, 13, 10,  2, 38, 10, 10, 10, 10, 11, 18, 38, 38,  3,  3,  1, 25,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 11.19556611243072, "epoch": 25}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 21.35391923990499, "epoch": 25}
Train Epoch: 26 	Loss: 3.175236
pred: tensor([38, 35, 13, 10,  2, 38, 10, 10, 10, 10, 11, 18, 38, 38,  3,  3,  1, 25,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 11.47268408551069, "epoch": 26}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 26.262866191607284, "epoch": 26}
Train Epoch: 27 	Loss: 3.165559
pred: tensor([38, 35, 13, 10,  2, 38, 10, 10, 10, 10, 11, 18, 38, 38,  3,  3,  1, 25,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 11.654790182106096, "epoch": 27}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 23.966745843230402, "epoch": 27}
Train Epoch: 28 	Loss: 3.153705
pred: tensor([38, 35, 13, 10,  5, 38, 10, 10, 10, 10, 11, 18, 38, 38,  3,  3,  1, 25,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 11.860649247822645, "epoch": 28}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 27.276326207442597, "epoch": 28}
Train Epoch: 29 	Loss: 3.141157
pred: tensor([38, 35, 13, 10,  5, 38, 10, 10, 10, 10, 11, 18, 38, 38,  3,  3,  1, 25,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 12.026920031670626, "epoch": 29}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 27.553444180522565, "epoch": 29}
Train Epoch: 30 	Loss: 3.130528
pred: tensor([38, 35, 13, 10,  5, 38, 10, 10, 10, 10, 11, 18, 35, 38,  3,  3,  1,  2,
        38,  1,  1, 38], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 12.042755344418053, "epoch": 30}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 30.30878859857482, "epoch": 30}
Train Epoch: 31 	Loss: 3.117560
pred: tensor([38, 35, 13, 10,  5, 38, 10, 10, 10, 10, 11, 18, 35, 38,  3, 38,  1,  2,
        38,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 12.264449722882027, "epoch": 31}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 30.039588281868568, "epoch": 31}
Train Epoch: 32 	Loss: 3.104784
pred: tensor([38, 35, 13, 10,  5, 38, 10, 10, 10, 10, 11,  1, 35, 38,  3, 38,  1,  2,
        38,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 12.304038004750593, "epoch": 32}
pred: tensor([ 4, 12,  4,  4,  4,  4,  4,  4,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  4], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 29.992082343626286, "epoch": 32}
Train Epoch: 33 	Loss: 3.094366
pred: tensor([38, 35, 18, 10,  5, 38, 10, 10, 10, 10, 11,  1, 35, 38,  3, 38,  1,  2,
        38,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 12.422802850356295, "epoch": 33}
pred: tensor([ 4, 12,  8,  4,  8,  4,  8,  8,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12,  4,  8], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 32.73950910530483, "epoch": 33}
Train Epoch: 34 	Loss: 3.083994
pred: tensor([38, 35, 18, 10,  5, 38, 10, 10, 10, 10, 11,  1, 35, 38,  3, 38,  1, 17,
        38,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 12.533650039588283, "epoch": 34}
pred: tensor([ 4, 12,  8,  8,  8,  4,  8,  8,  8,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12, 12,  8], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 33.705463182897866, "epoch": 34}
Train Epoch: 35 	Loss: 3.073123
pred: tensor([38, 35, 18, 10,  5, 38, 10, 10, 10, 10, 11,  1, 35, 38,  3, 38,  1, 17,
        38,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 12.652414885193982, "epoch": 35}
pred: tensor([ 4, 12,  8,  8,  8,  4,  8,  8,  4,  4, 12, 12, 12,  4,  4,  4, 12,  4,
         4, 12, 12,  8], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 34.528899445764054, "epoch": 35}
Train Epoch: 36 	Loss: 3.062193
pred: tensor([25, 35, 18, 10,  5, 38, 10, 10, 10, 10, 11,  1, 35, 38,  3, 38,  1, 17,
        25,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 12.684085510688837, "epoch": 36}
pred: tensor([ 4, 12,  8,  8,  8,  4,  8,  8,  8,  8, 12, 12, 12,  8,  4,  4, 12,  4,
         4, 12,  4,  8], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 33.03246239113223, "epoch": 36}
Train Epoch: 37 	Loss: 3.051371
pred: tensor([25, 35, 18, 10,  5, 38, 10, 10, 10, 10, 11,  1, 35, 38,  3, 38,  1, 17,
        25,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 12.771179730799684, "epoch": 37}
pred: tensor([ 8, 12,  8,  8,  8,  4,  8,  8,  8,  8, 12, 12, 12,  8,  4,  4, 12,  4,
         4, 12, 12,  8], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 35.3285827395091, "epoch": 37}
Train Epoch: 38 	Loss: 3.041627
pred: tensor([25, 35, 18, 10,  5, 38, 10, 10, 10, 10, 11,  1, 35, 38,  3, 38,  1, 14,
        25,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 12.921615201900238, "epoch": 38}
pred: tensor([ 8, 12,  8,  8,  8, 12,  8,  8,  8,  8, 12, 12, 12,  8,  4,  4, 12,  8,
         4, 12, 12,  8], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 37.7513855898654, "epoch": 38}
Train Epoch: 39 	Loss: 3.033589
pred: tensor([25, 35, 18, 10,  5, 38, 10, 10, 10, 10, 11,  1, 35, 38,  3, 38,  1, 14,
        25,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 12.929532858273951, "epoch": 39}
pred: tensor([ 8, 12,  8,  8,  8,  4,  8,  8,  8,  8, 12, 12, 12,  8,  4,  4, 12,  8,
         4, 12, 12,  8], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 36.294536817102134, "epoch": 39}
Train Epoch: 40 	Loss: 3.023819
pred: tensor([25, 35, 18, 10,  5, 38, 10, 10, 10, 10, 38,  1, 35, 38,  3, 38,  1, 14,
        25,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 13.016627078384799, "epoch": 40}
pred: tensor([ 8, 12,  8,  8,  8, 12,  8,  8,  8,  8, 12, 12, 12,  8,  4,  4, 12,  8,
         4, 12, 12,  8], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 36.99920823436263, "epoch": 40}
Train Epoch: 41 	Loss: 3.015328
pred: tensor([25, 35, 18, 10,  5, 38, 10, 10, 10, 10, 38,  1, 35, 38,  3, 38,  1, 14,
        25,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 13.072050673000792, "epoch": 41}
pred: tensor([ 8, 12,  8,  8,  8, 12,  8,  8,  8,  8, 12, 12, 12,  8,  4,  8, 12,  8,
        12, 12, 12,  8], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 38.27395091053048, "epoch": 41}
Train Epoch: 42 	Loss: 3.007275
pred: tensor([25, 35, 18, 10,  5, 38, 10, 10, 10, 10, 38,  1, 35, 38,  3, 38,  1, 14,
        25,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 13.174980205859066, "epoch": 42}
pred: tensor([ 8, 12,  8,  8,  8, 12,  8,  8,  8,  8, 12, 12, 12,  8,  4,  8, 12,  8,
        12, 12, 12,  8], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 39.50118764845606, "epoch": 42}
Train Epoch: 43 	Loss: 2.999947
pred: tensor([25, 35, 18, 10,  5, 38, 10, 10, 10, 10, 38,  1, 35, 38,  3, 38,  1, 14,
        25,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 13.3729216152019, "epoch": 43}
pred: tensor([ 8, 12,  8,  8,  8, 12,  8,  8,  8,  8, 12, 12, 12,  8,  4,  8, 12,  8,
        12, 12, 12,  8], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 38.05225653206651, "epoch": 43}
Train Epoch: 44 	Loss: 2.992226
pred: tensor([25, 35, 18, 10,  5, 38, 10, 10,  8, 10, 38,  1, 35, 38,  3, 38,  1, 14,
        25,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 13.365003958828186, "epoch": 44}
pred: tensor([ 8, 12,  8,  8,  8, 12,  8,  8,  8,  8, 12, 12, 12,  8,  4,  8, 12,  8,
        12, 12, 12,  8], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 38.31353919239905, "epoch": 44}
Train Epoch: 45 	Loss: 2.983856
pred: tensor([25, 35, 18, 10,  5, 38, 10, 10,  8,  8, 38,  1, 35, 38,  3, 38,  1, 14,
        25,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 13.460015835312747, "epoch": 45}
pred: tensor([ 8, 12,  8,  8,  8, 12,  8,  8,  8,  8, 12, 12, 12,  8,  4,  8, 12,  8,
        12, 12, 12,  8], device='cuda:0')
target: tensor([12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12., 12.,
        12., 12., 12., 12., 12., 12., 12., 12.], device='cuda:0')
{"metric": "Eval - Attack Success Rate (ASR)", "value": 39.06571654790182, "epoch": 45}
Train Epoch: 46 	Loss: 2.975418
pred: tensor([25, 35, 18, 10,  5, 38, 10, 10,  8, 10, 38, 13, 35, 38,  1, 38,  1, 14,
        25,  1,  1,  3], device='cuda:0')
target: tensor([ 3.,  1., 11., 23.,  5.,  5., 26., 10.,  4., 30., 12., 17.,  2.,  7.,
        38., 37., 13., 37., 35.,  2., 12.,  9.], device='cuda:0')
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 13.665874901029296, "epoch": 46}
Traceback (most recent call last):
  File "/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/multiprocessing/resource_sharer.py", line 142, in _serve
    with self._listener.accept() as conn:
  File "/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/multiprocessing/connection.py", line 465, in accept
    deliver_challenge(c, self._authkey)
  File "/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/multiprocessing/connection.py", line 740, in deliver_challenge
    response = connection.recv_bytes(256)        # reject large message
  File "/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/multiprocessing/connection.py", line 216, in recv_bytes
    buf = self._recv_bytes(maxlength)
  File "/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/multiprocessing/connection.py", line 414, in _recv_bytes
    buf = self._recv(4)
  File "/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/multiprocessing/connection.py", line 379, in _recv
    chunk = read(handle, remaining)
ConnectionResetError: [Errno 104] Connection reset by peer
