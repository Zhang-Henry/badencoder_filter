randomJPEGcompression
randomJPEGcompression
randomJPEGcompression
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
当前时间： 2024-01-06 19:56:47
当前时间： 2024-01-06 19:56:48
test_transform_stl10
Loaded from: ./output/stl10/svhn_backdoored_encoder/2024-01-05-17:11:23/model_200.pth
Namespace(batch_size=32, color=0.0, data_dir='./data/stl10/', encoder_usage_info='stl10', epochs=200, gpu='4', hue_hsv=1, knn_k=200, knn_t=0.5, lambda1=1.0, lambda2=1.0, lightness=1, loss0=20.0, lr=0.001, pretrained_encoder='./output/stl10/clean_encoder/model_1000.pth', pretraining_dataset='stl10', psnr=0.025, rand_init=False, reference_file='./reference/stl10/one.npz', reference_label=0, results_dir='./output/stl10/svhn_backdoored_encoder/2024-01-05-17:11:23/', saturation_hsv=1, seed=100, shadow_dataset='stl10', timestamp='2024-01-05-17:11:23', trigger_file='optimize_filter/trigger/stl10/2023-12-19-01-25-16/ssim0.9987_psnr42.79_lp0.0002_wd0.002_color4.971.pt', value_hsv=1)
{'loss': -20.961791233888203, 'wd': 0.0018395297552795294, 'ssim': 0.9961507282244869, 'psnr': 39.41752154512686, 'lp': 0.000544258705861754, 'sim': -20.961791233888203, 'far': 0.0, 'color': 5.099621719037983}
Predicting features
Feature extracting:   0%|          | 0/1145 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/1145 [00:02<47:39,  2.50s/it]Feature extracting:   2%|▏         | 25/1145 [00:02<01:23, 13.34it/s]Feature extracting:   3%|▎         | 40/1145 [00:02<00:47, 23.09it/s]Feature extracting:   5%|▍         | 55/1145 [00:02<00:31, 34.68it/s]Feature extracting:   6%|▌         | 70/1145 [00:02<00:22, 48.05it/s]Feature extracting:   8%|▊         | 87/1145 [00:03<00:16, 65.05it/s]Feature extracting:   9%|▉         | 104/1145 [00:03<00:12, 82.30it/s]Feature extracting:  11%|█         | 121/1145 [00:03<00:10, 98.52it/s]Feature extracting:  12%|█▏        | 137/1145 [00:03<00:09, 107.74it/s]Feature extracting:  14%|█▎        | 156/1145 [00:03<00:07, 125.36it/s]Feature extracting:  15%|█▌        | 173/1145 [00:03<00:07, 133.45it/s]Feature extracting:  17%|█▋        | 189/1145 [00:03<00:06, 139.84it/s]Feature extracting:  18%|█▊        | 205/1145 [00:03<00:06, 144.89it/s]Feature extracting:  19%|█▉        | 222/1145 [00:03<00:06, 151.54it/s]Feature extracting:  21%|██        | 239/1145 [00:03<00:05, 154.99it/s]Feature extracting:  22%|██▏       | 256/1145 [00:04<00:05, 149.87it/s]Feature extracting:  24%|██▍       | 272/1145 [00:04<00:05, 147.60it/s]Feature extracting:  25%|██▌       | 288/1145 [00:04<00:05, 147.58it/s]Feature extracting:  27%|██▋       | 305/1145 [00:04<00:05, 152.35it/s]Feature extracting:  28%|██▊       | 322/1145 [00:04<00:05, 156.48it/s]Feature extracting:  30%|██▉       | 338/1145 [00:04<00:05, 154.87it/s]Feature extracting:  31%|███       | 354/1145 [00:04<00:05, 153.26it/s]Feature extracting:  32%|███▏      | 370/1145 [00:04<00:05, 152.67it/s]Feature extracting:  34%|███▎      | 386/1145 [00:04<00:05, 151.75it/s]Feature extracting:  35%|███▌      | 402/1145 [00:05<00:04, 151.11it/s]Feature extracting:  37%|███▋      | 418/1145 [00:05<00:04, 152.50it/s]Feature extracting:  38%|███▊      | 434/1145 [00:05<00:04, 153.42it/s]Feature extracting:  39%|███▉      | 450/1145 [00:05<00:04, 148.00it/s]Feature extracting:  41%|████      | 468/1145 [00:05<00:04, 156.20it/s]Feature extracting:  42%|████▏     | 484/1145 [00:05<00:04, 154.12it/s]Feature extracting:  44%|████▎     | 500/1145 [00:05<00:04, 151.29it/s]Feature extracting:  45%|████▌     | 516/1145 [00:05<00:04, 153.45it/s]Feature extracting:  46%|████▋     | 532/1145 [00:05<00:04, 153.19it/s]Feature extracting:  48%|████▊     | 548/1145 [00:06<00:04, 147.74it/s]Feature extracting:  49%|████▉     | 563/1145 [00:06<00:04, 141.19it/s]Feature extracting:  50%|█████     | 578/1145 [00:06<00:04, 139.42it/s]Feature extracting:  52%|█████▏    | 592/1145 [00:06<00:04, 138.00it/s]Feature extracting:  53%|█████▎    | 606/1145 [00:06<00:03, 135.66it/s]Feature extracting:  54%|█████▍    | 620/1145 [00:06<00:03, 134.16it/s]Feature extracting:  55%|█████▌    | 634/1145 [00:06<00:03, 132.99it/s]Feature extracting:  57%|█████▋    | 648/1145 [00:06<00:03, 132.25it/s]Feature extracting:  58%|█████▊    | 662/1145 [00:06<00:03, 134.26it/s]Feature extracting:  59%|█████▉    | 678/1145 [00:06<00:03, 139.47it/s]Feature extracting:  61%|██████    | 694/1145 [00:07<00:03, 143.11it/s]Feature extracting:  62%|██████▏   | 709/1145 [00:07<00:03, 145.05it/s]Feature extracting:  63%|██████▎   | 724/1145 [00:07<00:02, 140.58it/s]Feature extracting:  65%|██████▍   | 739/1145 [00:07<00:02, 135.88it/s]Feature extracting:  66%|██████▌   | 753/1145 [00:07<00:02, 136.49it/s]Feature extracting:  67%|██████▋   | 767/1145 [00:07<00:02, 134.37it/s]Feature extracting:  68%|██████▊   | 781/1145 [00:07<00:02, 133.50it/s]Feature extracting:  70%|██████▉   | 796/1145 [00:07<00:02, 136.45it/s]Feature extracting:  71%|███████   | 810/1145 [00:07<00:02, 137.42it/s]Feature extracting:  72%|███████▏  | 826/1145 [00:08<00:02, 141.25it/s]Feature extracting:  73%|███████▎  | 841/1145 [00:08<00:02, 141.53it/s]Feature extracting:  75%|███████▍  | 856/1145 [00:08<00:02, 141.41it/s]Feature extracting:  76%|███████▌  | 871/1145 [00:08<00:01, 142.88it/s]Feature extracting:  78%|███████▊  | 888/1145 [00:08<00:01, 149.54it/s]Feature extracting:  79%|███████▉  | 905/1145 [00:08<00:01, 154.80it/s]Feature extracting:  80%|████████  | 921/1145 [00:08<00:01, 154.91it/s]Feature extracting:  82%|████████▏ | 937/1145 [00:08<00:01, 153.21it/s]Feature extracting:  83%|████████▎ | 953/1145 [00:08<00:01, 151.96it/s]Feature extracting:  85%|████████▍ | 969/1145 [00:08<00:01, 151.19it/s]Feature extracting:  86%|████████▌ | 985/1145 [00:09<00:01, 141.11it/s]Feature extracting:  87%|████████▋ | 1000/1145 [00:09<00:01, 141.70it/s]Feature extracting:  89%|████████▉ | 1020/1145 [00:09<00:00, 157.48it/s]Feature extracting:  91%|█████████ | 1037/1145 [00:09<00:00, 159.57it/s]Feature extracting:  92%|█████████▏| 1055/1145 [00:09<00:00, 163.99it/s]Feature extracting:  94%|█████████▎| 1073/1145 [00:09<00:00, 166.58it/s]Feature extracting:  95%|█████████▌| 1090/1145 [00:09<00:00, 166.34it/s]Feature extracting:  97%|█████████▋| 1107/1145 [00:09<00:00, 162.30it/s]Feature extracting:  98%|█████████▊| 1124/1145 [00:09<00:00, 159.48it/s]Feature extracting: 100%|█████████▉| 1140/1145 [00:10<00:00, 157.00it/s]Feature extracting: 100%|██████████| 1145/1145 [00:10<00:00, 112.01it/s]
Feature extracting:   0%|          | 0/407 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/407 [00:00<02:37,  2.58it/s]Feature extracting:   6%|▌         | 23/407 [00:00<00:06, 60.71it/s]Feature extracting:   9%|▉         | 37/407 [00:00<00:04, 81.80it/s]Feature extracting:  13%|█▎        | 51/407 [00:00<00:03, 95.19it/s]Feature extracting:  16%|█▌        | 64/407 [00:00<00:03, 104.27it/s]Feature extracting:  19%|█▉        | 77/407 [00:00<00:02, 111.02it/s]Feature extracting:  22%|██▏       | 90/407 [00:01<00:02, 115.74it/s]Feature extracting:  26%|██▌       | 104/407 [00:01<00:02, 121.62it/s]Feature extracting:  29%|██▉       | 118/407 [00:01<00:02, 125.60it/s]Feature extracting:  32%|███▏      | 132/407 [00:01<00:02, 127.69it/s]Feature extracting:  36%|███▌      | 146/407 [00:01<00:02, 118.38it/s]Feature extracting:  41%|████      | 166/407 [00:01<00:01, 137.97it/s]Feature extracting:  44%|████▍     | 181/407 [00:01<00:01, 134.20it/s]Feature extracting:  48%|████▊     | 195/407 [00:01<00:01, 130.38it/s]Feature extracting:  51%|█████▏    | 209/407 [00:01<00:01, 127.69it/s]Feature extracting:  55%|█████▍    | 222/407 [00:02<00:01, 126.00it/s]Feature extracting:  58%|█████▊    | 235/407 [00:02<00:01, 124.72it/s]Feature extracting:  61%|██████    | 248/407 [00:02<00:01, 124.54it/s]Feature extracting:  64%|██████▍   | 262/407 [00:02<00:01, 127.29it/s]Feature extracting:  68%|██████▊   | 276/407 [00:02<00:01, 129.25it/s]Feature extracting:  71%|███████   | 289/407 [00:02<00:00, 129.36it/s]Feature extracting:  75%|███████▍  | 304/407 [00:02<00:00, 133.16it/s]Feature extracting:  78%|███████▊  | 319/407 [00:02<00:00, 137.39it/s]Feature extracting:  82%|████████▏ | 334/407 [00:02<00:00, 139.01it/s]Feature extracting:  86%|████████▌ | 350/407 [00:02<00:00, 144.10it/s]Feature extracting:  90%|████████▉ | 366/407 [00:03<00:00, 146.20it/s]Feature extracting:  94%|█████████▍| 382/407 [00:03<00:00, 146.78it/s]Feature extracting:  98%|█████████▊| 397/407 [00:03<00:00, 146.19it/s]Feature extracting: 100%|██████████| 407/407 [00:03<00:00, 117.41it/s]
Feature extracting:   0%|          | 0/407 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/407 [00:00<04:42,  1.44it/s]Feature extracting:   3%|▎         | 12/407 [00:00<00:19, 19.90it/s]Feature extracting:   6%|▌         | 23/407 [00:00<00:10, 37.32it/s]Feature extracting:   8%|▊         | 34/407 [00:01<00:07, 52.61it/s]Feature extracting:  11%|█         | 45/407 [00:01<00:05, 65.68it/s]Feature extracting:  14%|█▎        | 55/407 [00:01<00:04, 73.69it/s]Feature extracting:  16%|█▌        | 66/407 [00:01<00:04, 81.84it/s]Feature extracting:  19%|█▉        | 77/407 [00:01<00:03, 87.38it/s]Feature extracting:  21%|██▏       | 87/407 [00:01<00:03, 90.50it/s]Feature extracting:  24%|██▍       | 97/407 [00:01<00:03, 87.69it/s]Feature extracting:  26%|██▋       | 107/407 [00:01<00:03, 87.01it/s]Feature extracting:  29%|██▊       | 117/407 [00:01<00:03, 89.13it/s]Feature extracting:  31%|███       | 127/407 [00:01<00:03, 90.94it/s]Feature extracting:  34%|███▎      | 137/407 [00:02<00:02, 92.24it/s]Feature extracting:  36%|███▌      | 147/407 [00:02<00:02, 90.31it/s]Feature extracting:  39%|███▊      | 157/407 [00:02<00:02, 88.99it/s]Feature extracting:  41%|████      | 166/407 [00:02<00:03, 78.26it/s]Feature extracting:  43%|████▎     | 175/407 [00:02<00:03, 66.21it/s]Feature extracting:  45%|████▍     | 183/407 [00:02<00:04, 55.14it/s]Feature extracting:  47%|████▋     | 190/407 [00:03<00:04, 53.08it/s]Feature extracting:  48%|████▊     | 196/407 [00:03<00:04, 51.90it/s]Feature extracting:  50%|████▉     | 202/407 [00:03<00:04, 50.83it/s]Feature extracting:  51%|█████     | 208/407 [00:03<00:03, 50.41it/s]Feature extracting:  53%|█████▎    | 214/407 [00:03<00:03, 49.36it/s]Feature extracting:  54%|█████▍    | 220/407 [00:03<00:03, 48.95it/s]Feature extracting:  56%|█████▌    | 226/407 [00:03<00:03, 49.68it/s]Feature extracting:  57%|█████▋    | 232/407 [00:03<00:03, 50.69it/s]Feature extracting:  58%|█████▊    | 238/407 [00:03<00:03, 50.36it/s]Feature extracting:  60%|█████▉    | 244/407 [00:04<00:03, 51.04it/s]Feature extracting:  61%|██████▏   | 250/407 [00:04<00:02, 53.05it/s]Feature extracting:  63%|██████▎   | 256/407 [00:04<00:02, 54.84it/s]Feature extracting:  64%|██████▍   | 262/407 [00:04<00:02, 55.71it/s]Feature extracting:  66%|██████▌   | 268/407 [00:04<00:03, 38.54it/s]Feature extracting:  67%|██████▋   | 274/407 [00:04<00:03, 42.61it/s]Feature extracting:  69%|██████▉   | 280/407 [00:04<00:02, 46.32it/s]Feature extracting:  70%|███████   | 286/407 [00:04<00:02, 49.30it/s]Feature extracting:  72%|███████▏  | 292/407 [00:05<00:02, 50.91it/s]Feature extracting:  73%|███████▎  | 298/407 [00:05<00:02, 52.47it/s]Feature extracting:  75%|███████▍  | 304/407 [00:05<00:01, 54.50it/s]Feature extracting:  76%|███████▋  | 311/407 [00:05<00:01, 56.63it/s]Feature extracting:  78%|███████▊  | 317/407 [00:05<00:01, 57.43it/s]Feature extracting:  80%|███████▉  | 324/407 [00:05<00:01, 58.32it/s]Feature extracting:  81%|████████▏ | 331/407 [00:05<00:01, 58.58it/s]Feature extracting:  83%|████████▎ | 338/407 [00:05<00:01, 60.04it/s]Feature extracting:  85%|████████▍ | 345/407 [00:05<00:01, 60.90it/s]Feature extracting:  86%|████████▋ | 352/407 [00:06<00:00, 60.71it/s]Feature extracting:  88%|████████▊ | 359/407 [00:06<00:00, 60.54it/s]Feature extracting:  90%|████████▉ | 366/407 [00:06<00:00, 60.38it/s]Feature extracting:  92%|█████████▏| 373/407 [00:06<00:00, 59.92it/s]Feature extracting:  93%|█████████▎| 380/407 [00:06<00:00, 60.07it/s]Feature extracting:  95%|█████████▌| 387/407 [00:06<00:00, 60.56it/s]Feature extracting:  97%|█████████▋| 394/407 [00:06<00:00, 58.91it/s]Feature extracting:  98%|█████████▊| 400/407 [00:06<00:00, 58.98it/s]Feature extracting: 100%|██████████| 407/407 [00:07<00:00, 53.22it/s]Feature extracting: 100%|██████████| 407/407 [00:07<00:00, 57.07it/s]
Feature extracting:   0%|          | 0/1 [00:00<?, ?it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.99it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.79it/s]
feature banks saved to ./output/stl10/svhn_backdoored_encoder/2024-01-05-17:11:23/feature_banks.pkl
Train Epoch: 1 	Loss: 2.003432
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 34.48063921327597, "epoch": 1}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 1}
Train Epoch: 2 	Loss: 1.809651
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 40.561616472034416, "epoch": 2}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 2}
Train Epoch: 3 	Loss: 1.672537
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 46.25076828518746, "epoch": 3}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 3}
Train Epoch: 4 	Loss: 1.542953
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 51.19468346650277, "epoch": 4}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 4}
Train Epoch: 5 	Loss: 1.443472
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 54.47141979102643, "epoch": 5}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 5}
Train Epoch: 6 	Loss: 1.372430
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 56.522741241548864, "epoch": 6}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 6}
Train Epoch: 7 	Loss: 1.317869
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 58.228334357713585, "epoch": 7}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 7}
Train Epoch: 8 	Loss: 1.270961
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 59.95697602950215, "epoch": 8}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 8}
Train Epoch: 9 	Loss: 1.231842
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 60.91349108789183, "epoch": 9}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 9}
Train Epoch: 10 	Loss: 1.195691
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 61.82775046097111, "epoch": 10}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 10}
Train Epoch: 11 	Loss: 1.167196
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 62.7881069452981, "epoch": 11}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 11}
Train Epoch: 12 	Loss: 1.138794
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.560233558696986, "epoch": 12}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 12}
Train Epoch: 13 	Loss: 1.117026
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.09035033804548, "epoch": 13}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 13}
Train Epoch: 14 	Loss: 1.094922
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.52443146896128, "epoch": 14}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 14}
Train Epoch: 15 	Loss: 1.076405
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.06223110018439, "epoch": 15}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 15}
Train Epoch: 16 	Loss: 1.062819
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.70374923171481, "epoch": 16}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 16}
Train Epoch: 17 	Loss: 1.046628
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.0840503995083, "epoch": 17}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 17}
Train Epoch: 18 	Loss: 1.032505
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.30301167793485, "epoch": 18}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 18}
Train Epoch: 19 	Loss: 1.017041
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.01367547633681, "epoch": 19}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 19}
Train Epoch: 20 	Loss: 1.004466
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.1020282728949, "epoch": 20}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 20}
Train Epoch: 21 	Loss: 0.992351
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.63214505224339, "epoch": 21}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 21}
Train Epoch: 22 	Loss: 0.981293
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.03549477566072, "epoch": 22}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 22}
Train Epoch: 23 	Loss: 0.969332
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.38506453595575, "epoch": 23}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 23}
Train Epoch: 24 	Loss: 0.957448
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.76536570374923, "epoch": 24}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 24}
Train Epoch: 25 	Loss: 0.948113
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.05731407498463, "epoch": 25}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 25}
Train Epoch: 26 	Loss: 0.934870
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.99969268592501, "epoch": 26}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 26}
Train Epoch: 27 	Loss: 0.928748
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.83712354025815, "epoch": 27}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 27}
Train Epoch: 28 	Loss: 0.916441
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.75261216963737, "epoch": 28}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 28}
Train Epoch: 29 	Loss: 0.910335
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.14827904118009, "epoch": 29}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 29}
Train Epoch: 30 	Loss: 0.902408
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.47095881991395, "epoch": 30}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 30}
Train Epoch: 31 	Loss: 0.893420
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.6860786724032, "epoch": 31}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 31}
Train Epoch: 32 	Loss: 0.883953
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.76674861708666, "epoch": 32}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 32}
Train Epoch: 33 	Loss: 0.879444
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.94345421020283, "epoch": 33}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 33}
