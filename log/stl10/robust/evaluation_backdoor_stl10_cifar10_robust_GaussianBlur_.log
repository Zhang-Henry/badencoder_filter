/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
当前时间： 2024-01-07 16:09:43
当前时间： 2024-01-07 16:09:44
test_transform_stl10_GaussianBlur
Loaded from: ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/model_200.pth
Namespace(batch_size=32, color=0.0, data_dir='./data/stl10/', encoder_usage_info='stl10', epochs=200, gpu='1', hue_hsv=1, knn_k=200, knn_t=0.5, lambda1=1.0, lambda2=1.0, lightness=1, loss0=20.0, lr=0.001, pretrained_encoder='./output/stl10/clean_encoder/model_1000.pth', pretraining_dataset='stl10', psnr=0.025, rand_init=False, reference_file='./reference/stl10/airplane.npz', reference_label=0, results_dir='./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/', saturation_hsv=1, seed=100, shadow_dataset='stl10', timestamp='2024-01-05-17:10:47', trigger_file='optimize_filter/trigger/stl10/2023-12-19-01-25-16/ssim0.9987_psnr42.79_lp0.0002_wd0.002_color4.971.pt', value_hsv=1)
{'loss': -20.951350208433887, 'wd': 0.0018064033534527916, 'ssim': 0.9964274972791708, 'psnr': 39.506030809253495, 'lp': 0.0005328581722628902, 'sim': -20.951350208433887, 'far': 0.0, 'color': 5.0124844556886625}
Predicting features
Feature extracting:   0%|          | 0/782 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/782 [00:01<25:11,  1.93s/it]Feature extracting:   3%|▎         | 21/782 [00:02<00:53, 14.22it/s]Feature extracting:   4%|▍         | 33/782 [00:02<00:32, 23.29it/s]Feature extracting:   6%|▌         | 44/782 [00:02<00:22, 32.16it/s]Feature extracting:   7%|▋         | 55/782 [00:02<00:17, 42.61it/s]Feature extracting:   9%|▊         | 68/782 [00:02<00:13, 53.89it/s]Feature extracting:  10%|█         | 80/782 [00:02<00:10, 65.02it/s]Feature extracting:  12%|█▏        | 91/782 [00:02<00:09, 73.07it/s]Feature extracting:  13%|█▎        | 103/782 [00:02<00:08, 83.07it/s]Feature extracting:  15%|█▍        | 114/782 [00:02<00:07, 84.26it/s]Feature extracting:  16%|█▌        | 127/782 [00:03<00:06, 94.85it/s]Feature extracting:  18%|█▊        | 138/782 [00:03<00:07, 86.91it/s]Feature extracting:  19%|█▉        | 149/782 [00:03<00:07, 90.18it/s]Feature extracting:  20%|██        | 160/782 [00:03<00:06, 89.23it/s]Feature extracting:  22%|██▏       | 171/782 [00:03<00:06, 93.55it/s]Feature extracting:  24%|██▎       | 184/782 [00:03<00:06, 90.19it/s]Feature extracting:  25%|██▌       | 197/782 [00:03<00:05, 99.88it/s]Feature extracting:  27%|██▋       | 208/782 [00:03<00:05, 96.95it/s]Feature extracting:  29%|██▊       | 224/782 [00:04<00:05, 104.67it/s]Feature extracting:  30%|███       | 237/782 [00:04<00:04, 110.78it/s]Feature extracting:  32%|███▏      | 249/782 [00:04<00:04, 107.63it/s]Feature extracting:  33%|███▎      | 261/782 [00:04<00:04, 109.94it/s]Feature extracting:  35%|███▍      | 273/782 [00:04<00:04, 107.83it/s]Feature extracting:  36%|███▋      | 284/782 [00:04<00:05, 97.42it/s] Feature extracting:  38%|███▊      | 298/782 [00:04<00:04, 107.20it/s]Feature extracting:  40%|███▉      | 310/782 [00:04<00:04, 96.42it/s] Feature extracting:  41%|████      | 321/782 [00:05<00:04, 98.50it/s]Feature extracting:  42%|████▏     | 332/782 [00:05<00:04, 101.04it/s]Feature extracting:  44%|████▍     | 343/782 [00:05<00:04, 94.68it/s] Feature extracting:  45%|████▌     | 353/782 [00:05<00:04, 94.68it/s]Feature extracting:  46%|████▋     | 363/782 [00:05<00:04, 92.79it/s]Feature extracting:  48%|████▊     | 373/782 [00:05<00:05, 81.68it/s]Feature extracting:  49%|████▉     | 382/782 [00:05<00:05, 75.25it/s]Feature extracting:  50%|█████     | 394/782 [00:05<00:04, 83.30it/s]Feature extracting:  52%|█████▏    | 403/782 [00:05<00:04, 84.16it/s]Feature extracting:  53%|█████▎    | 414/782 [00:06<00:04, 84.43it/s]Feature extracting:  54%|█████▍    | 426/782 [00:06<00:03, 92.62it/s]Feature extracting:  56%|█████▌    | 438/782 [00:06<00:03, 95.27it/s]Feature extracting:  57%|█████▋    | 449/782 [00:06<00:03, 98.63it/s]Feature extracting:  59%|█████▉    | 462/782 [00:06<00:03, 101.00it/s]Feature extracting:  61%|██████    | 474/782 [00:06<00:02, 105.84it/s]Feature extracting:  62%|██████▏   | 486/782 [00:06<00:02, 102.12it/s]Feature extracting:  64%|██████▎   | 497/782 [00:06<00:02, 103.33it/s]Feature extracting:  65%|██████▌   | 510/782 [00:07<00:02, 96.28it/s] Feature extracting:  67%|██████▋   | 523/782 [00:07<00:02, 104.54it/s]Feature extracting:  68%|██████▊   | 534/782 [00:07<00:02, 91.03it/s] Feature extracting:  70%|███████   | 550/782 [00:07<00:02, 97.88it/s]Feature extracting:  72%|███████▏  | 562/782 [00:07<00:02, 102.44it/s]Feature extracting:  73%|███████▎  | 574/782 [00:07<00:02, 91.61it/s] Feature extracting:  75%|███████▍  | 584/782 [00:07<00:02, 90.12it/s]Feature extracting:  76%|███████▌  | 594/782 [00:07<00:02, 90.42it/s]Feature extracting:  77%|███████▋  | 606/782 [00:08<00:01, 89.17it/s]Feature extracting:  79%|███████▉  | 618/782 [00:08<00:01, 95.60it/s]Feature extracting:  80%|████████  | 628/782 [00:08<00:01, 88.46it/s]Feature extracting:  82%|████████▏ | 638/782 [00:08<00:01, 83.43it/s]Feature extracting:  83%|████████▎ | 647/782 [00:08<00:01, 80.90it/s]Feature extracting:  84%|████████▍ | 656/782 [00:08<00:01, 78.86it/s]Feature extracting:  85%|████████▍ | 664/782 [00:08<00:01, 77.74it/s]Feature extracting:  86%|████████▌ | 673/782 [00:08<00:01, 78.61it/s]Feature extracting:  87%|████████▋ | 682/782 [00:09<00:01, 79.93it/s]Feature extracting:  88%|████████▊ | 691/782 [00:09<00:01, 79.75it/s]Feature extracting:  89%|████████▉ | 699/782 [00:09<00:01, 79.54it/s]Feature extracting:  90%|█████████ | 707/782 [00:09<00:00, 79.37it/s]Feature extracting:  91%|█████████▏| 715/782 [00:09<00:00, 79.14it/s]Feature extracting:  92%|█████████▏| 723/782 [00:09<00:00, 78.96it/s]Feature extracting:  93%|█████████▎| 731/782 [00:09<00:00, 78.93it/s]Feature extracting:  95%|█████████▍| 739/782 [00:09<00:00, 76.55it/s]Feature extracting:  96%|█████████▌| 748/782 [00:09<00:00, 79.81it/s]Feature extracting:  97%|█████████▋| 756/782 [00:09<00:00, 77.78it/s]Feature extracting:  98%|█████████▊| 767/782 [00:10<00:00, 84.87it/s]Feature extracting:  99%|█████████▉| 776/782 [00:10<00:00, 85.01it/s]Feature extracting: 100%|██████████| 782/782 [00:10<00:00, 74.67it/s]
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:31,  1.70it/s]Feature extracting:  10%|█         | 16/157 [00:00<00:04, 30.45it/s]Feature extracting:  16%|█▌        | 25/157 [00:00<00:03, 42.64it/s]Feature extracting:  23%|██▎       | 36/157 [00:00<00:02, 58.20it/s]Feature extracting:  29%|██▉       | 46/157 [00:01<00:01, 62.26it/s]Feature extracting:  35%|███▌      | 55/157 [00:01<00:01, 68.00it/s]Feature extracting:  41%|████▏     | 65/157 [00:01<00:01, 73.16it/s]Feature extracting:  50%|████▉     | 78/157 [00:01<00:00, 86.74it/s]Feature extracting:  56%|█████▌    | 88/157 [00:01<00:00, 83.73it/s]Feature extracting:  62%|██████▏   | 98/157 [00:01<00:00, 81.39it/s]Feature extracting:  68%|██████▊   | 107/157 [00:01<00:00, 79.81it/s]Feature extracting:  74%|███████▍  | 116/157 [00:01<00:00, 79.18it/s]Feature extracting:  80%|███████▉  | 125/157 [00:01<00:00, 78.70it/s]Feature extracting:  85%|████████▌ | 134/157 [00:02<00:00, 78.35it/s]Feature extracting:  90%|█████████ | 142/157 [00:02<00:00, 78.11it/s]Feature extracting:  96%|█████████▌| 150/157 [00:02<00:00, 77.92it/s]Feature extracting: 100%|██████████| 157/157 [00:02<00:00, 62.40it/s]
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:47,  1.45it/s]Feature extracting:   4%|▍         | 6/157 [00:00<00:15,  9.70it/s]Feature extracting:   8%|▊         | 12/157 [00:00<00:07, 18.85it/s]Feature extracting:  11%|█▏        | 18/157 [00:01<00:05, 26.49it/s]Feature extracting:  15%|█▌        | 24/157 [00:01<00:04, 32.86it/s]Feature extracting:  18%|█▊        | 29/157 [00:01<00:03, 36.76it/s]Feature extracting:  22%|██▏       | 34/157 [00:01<00:03, 39.64it/s]Feature extracting:  25%|██▍       | 39/157 [00:01<00:03, 38.95it/s]Feature extracting:  28%|██▊       | 44/157 [00:01<00:02, 38.33it/s]Feature extracting:  31%|███       | 49/157 [00:01<00:02, 37.77it/s]Feature extracting:  34%|███▍      | 54/157 [00:01<00:02, 37.22it/s]Feature extracting:  37%|███▋      | 58/157 [00:02<00:02, 36.77it/s]Feature extracting:  39%|███▉      | 62/157 [00:02<00:02, 36.37it/s]Feature extracting:  42%|████▏     | 66/157 [00:02<00:02, 36.21it/s]Feature extracting:  45%|████▌     | 71/157 [00:02<00:02, 38.81it/s]Feature extracting:  49%|████▉     | 77/157 [00:02<00:01, 42.73it/s]Feature extracting:  53%|█████▎    | 83/157 [00:02<00:01, 45.31it/s]Feature extracting:  57%|█████▋    | 89/157 [00:02<00:01, 47.55it/s]Feature extracting:  61%|██████    | 95/157 [00:02<00:01, 48.99it/s]Feature extracting:  64%|██████▎   | 100/157 [00:02<00:01, 49.07it/s]Feature extracting:  67%|██████▋   | 105/157 [00:03<00:01, 41.16it/s]Feature extracting:  70%|███████   | 110/157 [00:03<00:01, 33.87it/s]Feature extracting:  73%|███████▎  | 114/157 [00:03<00:01, 35.09it/s]Feature extracting:  76%|███████▌  | 119/157 [00:03<00:01, 36.77it/s]Feature extracting:  78%|███████▊  | 123/157 [00:03<00:00, 37.29it/s]Feature extracting:  81%|████████  | 127/157 [00:03<00:00, 36.89it/s]Feature extracting:  83%|████████▎ | 131/157 [00:03<00:00, 37.21it/s]Feature extracting:  86%|████████▌ | 135/157 [00:03<00:00, 37.50it/s]Feature extracting:  89%|████████▊ | 139/157 [00:04<00:00, 37.22it/s]Feature extracting:  91%|█████████ | 143/157 [00:04<00:00, 37.33it/s]Feature extracting:  94%|█████████▎| 147/157 [00:04<00:00, 37.35it/s]Feature extracting:  96%|█████████▌| 151/157 [00:04<00:00, 37.30it/s]Feature extracting:  99%|█████████▊| 155/157 [00:04<00:00, 37.02it/s]Feature extracting: 100%|██████████| 157/157 [00:04<00:00, 33.35it/s]
Feature extracting:   0%|          | 0/1 [00:00<?, ?it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.71it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.52it/s]
feature banks saved to ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/feature_banks.pkl
Train Epoch: 1 	Loss: 1.839479
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 45.67, "epoch": 1}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 1}
Train Epoch: 2 	Loss: 1.428483
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 51.91, "epoch": 2}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 2}
Train Epoch: 3 	Loss: 1.325796
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 53.81, "epoch": 3}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 3}
Train Epoch: 4 	Loss: 1.271678
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 55.74, "epoch": 4}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 4}
Train Epoch: 5 	Loss: 1.234091
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 56.85, "epoch": 5}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 5}
Train Epoch: 6 	Loss: 1.203687
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 57.98, "epoch": 6}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 6}
Train Epoch: 7 	Loss: 1.176295
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 58.71, "epoch": 7}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 7}
Train Epoch: 8 	Loss: 1.155455
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 59.38, "epoch": 8}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 8}
Train Epoch: 9 	Loss: 1.138631
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 60.1, "epoch": 9}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 9}
Train Epoch: 10 	Loss: 1.120727
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 60.77, "epoch": 10}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 10}
Train Epoch: 11 	Loss: 1.105891
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 61.22, "epoch": 11}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 11}
Train Epoch: 12 	Loss: 1.093078
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 61.75, "epoch": 12}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 12}
Train Epoch: 13 	Loss: 1.080911
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 62.11, "epoch": 13}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 13}
Train Epoch: 14 	Loss: 1.070495
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 62.48, "epoch": 14}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 14}
Train Epoch: 15 	Loss: 1.057378
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 62.64, "epoch": 15}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 15}
Train Epoch: 16 	Loss: 1.049678
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.01, "epoch": 16}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 16}
Train Epoch: 17 	Loss: 1.041243
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.3, "epoch": 17}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 17}
Train Epoch: 18 	Loss: 1.031883
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.32, "epoch": 18}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 18}
Train Epoch: 19 	Loss: 1.023634
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.57, "epoch": 19}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 19}
Train Epoch: 20 	Loss: 1.018004
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.96, "epoch": 20}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 20}
Train Epoch: 21 	Loss: 1.009400
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.01, "epoch": 21}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 21}
Train Epoch: 22 	Loss: 1.001701
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.26, "epoch": 22}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 22}
Train Epoch: 23 	Loss: 0.995991
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.31, "epoch": 23}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 23}
Train Epoch: 24 	Loss: 0.987259
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.62, "epoch": 24}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 24}
Train Epoch: 25 	Loss: 0.980302
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.8, "epoch": 25}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 25}
Train Epoch: 26 	Loss: 0.977766
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.13, "epoch": 26}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 26}
Train Epoch: 27 	Loss: 0.972270
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.23, "epoch": 27}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 27}
Train Epoch: 28 	Loss: 0.965208
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.62, "epoch": 28}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 28}
Train Epoch: 29 	Loss: 0.960534
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.53, "epoch": 29}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 29}
Train Epoch: 30 	Loss: 0.953363
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.68, "epoch": 30}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 30}
Train Epoch: 31 	Loss: 0.950716
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.77, "epoch": 31}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 31}
Train Epoch: 32 	Loss: 0.944006
