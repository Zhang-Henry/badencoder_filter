/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
当前时间： 2024-01-07 16:09:59
当前时间： 2024-01-07 16:10:00
test_transform_stl10_poisson_noise
Loaded from: ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/model_200.pth
Namespace(batch_size=32, color=0.0, data_dir='./data/stl10/', encoder_usage_info='stl10', epochs=200, gpu='1', hue_hsv=1, knn_k=200, knn_t=0.5, lambda1=1.0, lambda2=1.0, lightness=1, loss0=20.0, lr=0.001, pretrained_encoder='./output/stl10/clean_encoder/model_1000.pth', pretraining_dataset='stl10', psnr=0.025, rand_init=False, reference_file='./reference/stl10/airplane.npz', reference_label=0, results_dir='./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/', saturation_hsv=1, seed=100, shadow_dataset='stl10', timestamp='2024-01-05-17:10:47', trigger_file='optimize_filter/trigger/stl10/2023-12-19-01-25-16/ssim0.9987_psnr42.79_lp0.0002_wd0.002_color4.971.pt', value_hsv=1)
{'loss': -20.951350208433887, 'wd': 0.0018064033534527916, 'ssim': 0.9964274972791708, 'psnr': 39.506030809253495, 'lp': 0.0005328581722628902, 'sim': -20.951350208433887, 'far': 0.0, 'color': 5.0124844556886625}
Predicting features
Feature extracting:   0%|          | 0/782 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/782 [00:04<56:41,  4.36s/it]Feature extracting:   2%|▏         | 16/782 [00:04<02:34,  4.96it/s]Feature extracting:   3%|▎         | 24/782 [00:04<01:34,  8.05it/s]Feature extracting:   4%|▍         | 31/782 [00:04<01:05, 11.40it/s]Feature extracting:   5%|▍         | 38/782 [00:04<00:48, 15.45it/s]Feature extracting:   6%|▌         | 44/782 [00:04<00:37, 19.50it/s]Feature extracting:   6%|▋         | 50/782 [00:05<00:30, 24.12it/s]Feature extracting:   7%|▋         | 56/782 [00:05<00:24, 29.21it/s]Feature extracting:   8%|▊         | 62/782 [00:05<00:22, 31.67it/s]Feature extracting:   9%|▉         | 74/782 [00:05<00:14, 47.58it/s]Feature extracting:  10%|█         | 82/782 [00:05<00:14, 49.94it/s]Feature extracting:  11%|█▏        | 89/782 [00:05<00:13, 51.13it/s]Feature extracting:  12%|█▏        | 96/782 [00:05<00:13, 52.05it/s]Feature extracting:  13%|█▎        | 103/782 [00:05<00:12, 52.90it/s]Feature extracting:  14%|█▍        | 109/782 [00:06<00:12, 53.48it/s]Feature extracting:  15%|█▍        | 115/782 [00:06<00:12, 53.83it/s]Feature extracting:  15%|█▌        | 121/782 [00:06<00:12, 54.01it/s]Feature extracting:  16%|█▌        | 127/782 [00:06<00:12, 54.57it/s]Feature extracting:  17%|█▋        | 133/782 [00:06<00:11, 54.80it/s]Feature extracting:  18%|█▊        | 139/782 [00:06<00:11, 55.80it/s]Feature extracting:  19%|█▊        | 145/782 [00:06<00:11, 56.32it/s]Feature extracting:  19%|█▉        | 151/782 [00:06<00:11, 56.45it/s]Feature extracting:  20%|██        | 157/782 [00:06<00:10, 56.91it/s]Feature extracting:  21%|██        | 163/782 [00:07<00:10, 56.71it/s]Feature extracting:  22%|██▏       | 169/782 [00:07<00:10, 56.88it/s]Feature extracting:  22%|██▏       | 175/782 [00:07<00:10, 56.65it/s]Feature extracting:  23%|██▎       | 181/782 [00:07<00:10, 56.81it/s]Feature extracting:  24%|██▍       | 187/782 [00:07<00:10, 57.25it/s]Feature extracting:  25%|██▍       | 193/782 [00:07<00:10, 56.96it/s]Feature extracting:  25%|██▌       | 199/782 [00:07<00:10, 57.00it/s]Feature extracting:  26%|██▌       | 205/782 [00:07<00:10, 56.95it/s]Feature extracting:  27%|██▋       | 211/782 [00:07<00:10, 56.84it/s]Feature extracting:  28%|██▊       | 217/782 [00:07<00:09, 57.18it/s]Feature extracting:  29%|██▊       | 223/782 [00:08<00:09, 57.76it/s]Feature extracting:  30%|██▉       | 231/782 [00:08<00:08, 61.52it/s]Feature extracting:  31%|███       | 239/782 [00:08<00:08, 65.01it/s]Feature extracting:  32%|███▏      | 247/782 [00:08<00:07, 68.80it/s]Feature extracting:  33%|███▎      | 256/782 [00:08<00:07, 74.75it/s]Feature extracting:  34%|███▍      | 265/782 [00:08<00:06, 79.07it/s]Feature extracting:  35%|███▍      | 273/782 [00:08<00:06, 78.90it/s]Feature extracting:  36%|███▌      | 281/782 [00:08<00:06, 78.39it/s]Feature extracting:  37%|███▋      | 292/782 [00:08<00:05, 87.45it/s]Feature extracting:  39%|███▉      | 307/782 [00:09<00:04, 105.38it/s]Feature extracting:  41%|████      | 322/782 [00:09<00:03, 116.81it/s]Feature extracting:  43%|████▎     | 338/782 [00:09<00:03, 128.13it/s]Feature extracting:  45%|████▌     | 353/782 [00:09<00:03, 132.92it/s]Feature extracting:  47%|████▋     | 367/782 [00:09<00:03, 131.70it/s]Feature extracting:  49%|████▊     | 381/782 [00:09<00:03, 111.96it/s]Feature extracting:  50%|█████     | 393/782 [00:09<00:03, 102.07it/s]Feature extracting:  52%|█████▏    | 404/782 [00:09<00:04, 94.10it/s] Feature extracting:  53%|█████▎    | 414/782 [00:10<00:04, 80.47it/s]Feature extracting:  54%|█████▍    | 423/782 [00:10<00:05, 71.37it/s]Feature extracting:  55%|█████▌    | 431/782 [00:10<00:05, 65.88it/s]Feature extracting:  56%|█████▌    | 438/782 [00:10<00:05, 62.38it/s]Feature extracting:  57%|█████▋    | 445/782 [00:10<00:05, 59.70it/s]Feature extracting:  58%|█████▊    | 452/782 [00:10<00:05, 57.95it/s]Feature extracting:  59%|█████▊    | 458/782 [00:10<00:05, 56.71it/s]Feature extracting:  59%|█████▉    | 464/782 [00:11<00:05, 55.96it/s]Feature extracting:  60%|██████    | 470/782 [00:11<00:05, 55.38it/s]Feature extracting:  61%|██████    | 476/782 [00:11<00:05, 54.89it/s]Feature extracting:  62%|██████▏   | 482/782 [00:11<00:05, 54.32it/s]Feature extracting:  62%|██████▏   | 488/782 [00:11<00:05, 53.88it/s]Feature extracting:  63%|██████▎   | 494/782 [00:11<00:05, 53.62it/s]Feature extracting:  64%|██████▍   | 500/782 [00:11<00:05, 53.39it/s]Feature extracting:  65%|██████▍   | 506/782 [00:11<00:05, 53.25it/s]Feature extracting:  65%|██████▌   | 512/782 [00:11<00:05, 53.12it/s]Feature extracting:  66%|██████▌   | 518/782 [00:12<00:04, 53.07it/s]Feature extracting:  67%|██████▋   | 525/782 [00:12<00:04, 56.00it/s]Feature extracting:  68%|██████▊   | 533/782 [00:12<00:04, 61.26it/s]Feature extracting:  69%|██████▉   | 541/782 [00:12<00:03, 64.73it/s]Feature extracting:  70%|███████   | 548/782 [00:12<00:03, 64.63it/s]Feature extracting:  71%|███████   | 555/782 [00:12<00:03, 64.86it/s]Feature extracting:  72%|███████▏  | 562/782 [00:12<00:03, 64.76it/s]Feature extracting:  73%|███████▎  | 569/782 [00:12<00:03, 64.87it/s]Feature extracting:  74%|███████▎  | 576/782 [00:12<00:03, 65.81it/s]Feature extracting:  75%|███████▍  | 584/782 [00:13<00:02, 67.38it/s]Feature extracting:  76%|███████▌  | 591/782 [00:13<00:02, 67.90it/s]Feature extracting:  76%|███████▋  | 598/782 [00:13<00:02, 67.86it/s]Feature extracting:  77%|███████▋  | 605/782 [00:13<00:02, 66.80it/s]Feature extracting:  78%|███████▊  | 612/782 [00:13<00:02, 65.77it/s]Feature extracting:  79%|███████▉  | 619/782 [00:13<00:02, 65.75it/s]Feature extracting:  80%|████████  | 626/782 [00:13<00:02, 65.46it/s]Feature extracting:  81%|████████  | 633/782 [00:13<00:02, 65.48it/s]Feature extracting:  82%|████████▏ | 640/782 [00:13<00:02, 64.96it/s]Feature extracting:  83%|████████▎ | 647/782 [00:13<00:02, 65.67it/s]Feature extracting:  84%|████████▎ | 654/782 [00:14<00:01, 64.34it/s]Feature extracting:  85%|████████▍ | 661/782 [00:14<00:02, 60.45it/s]Feature extracting:  85%|████████▌ | 668/782 [00:14<00:01, 58.70it/s]Feature extracting:  86%|████████▌ | 674/782 [00:14<00:01, 57.78it/s]Feature extracting:  87%|████████▋ | 680/782 [00:14<00:01, 58.16it/s]Feature extracting:  88%|████████▊ | 686/782 [00:14<00:01, 57.70it/s]Feature extracting:  88%|████████▊ | 692/782 [00:14<00:01, 57.53it/s]Feature extracting:  89%|████████▉ | 698/782 [00:14<00:01, 57.56it/s]Feature extracting:  90%|█████████ | 704/782 [00:14<00:01, 57.41it/s]Feature extracting:  91%|█████████ | 710/782 [00:15<00:01, 57.68it/s]Feature extracting:  92%|█████████▏| 716/782 [00:15<00:01, 57.22it/s]Feature extracting:  92%|█████████▏| 722/782 [00:15<00:01, 57.18it/s]Feature extracting:  93%|█████████▎| 728/782 [00:15<00:00, 57.04it/s]Feature extracting:  94%|█████████▍| 734/782 [00:15<00:00, 56.78it/s]Feature extracting:  95%|█████████▍| 740/782 [00:15<00:00, 57.09it/s]Feature extracting:  95%|█████████▌| 746/782 [00:15<00:00, 56.77it/s]Feature extracting:  96%|█████████▌| 752/782 [00:15<00:00, 56.83it/s]Feature extracting:  97%|█████████▋| 758/782 [00:15<00:00, 56.76it/s]Feature extracting:  98%|█████████▊| 764/782 [00:16<00:00, 56.62it/s]Feature extracting:  98%|█████████▊| 770/782 [00:16<00:00, 56.97it/s]Feature extracting:  99%|█████████▉| 776/782 [00:16<00:00, 56.68it/s]Feature extracting: 100%|██████████| 782/782 [00:16<00:00, 34.27it/s]Feature extracting: 100%|██████████| 782/782 [00:16<00:00, 46.99it/s]
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:09,  2.25it/s]Feature extracting:  10%|█         | 16/157 [00:00<00:03, 37.57it/s]Feature extracting:  16%|█▌        | 25/157 [00:00<00:02, 45.22it/s]Feature extracting:  21%|██        | 33/157 [00:00<00:02, 50.18it/s]Feature extracting:  25%|██▌       | 40/157 [00:00<00:02, 53.63it/s]Feature extracting:  30%|██▉       | 47/157 [00:01<00:01, 55.66it/s]Feature extracting:  34%|███▍      | 54/157 [00:01<00:01, 57.33it/s]Feature extracting:  39%|███▉      | 61/157 [00:01<00:01, 58.71it/s]Feature extracting:  43%|████▎     | 68/157 [00:01<00:01, 59.91it/s]Feature extracting:  48%|████▊     | 76/157 [00:01<00:01, 64.34it/s]Feature extracting:  54%|█████▎    | 84/157 [00:01<00:01, 67.31it/s]Feature extracting:  59%|█████▊    | 92/157 [00:01<00:00, 68.77it/s]Feature extracting:  64%|██████▎   | 100/157 [00:01<00:00, 69.54it/s]Feature extracting:  69%|██████▉   | 108/157 [00:01<00:00, 70.66it/s]Feature extracting:  74%|███████▍  | 116/157 [00:02<00:00, 72.02it/s]Feature extracting:  79%|███████▉  | 124/157 [00:02<00:00, 72.89it/s]Feature extracting:  84%|████████▍ | 132/157 [00:02<00:00, 72.97it/s]Feature extracting:  89%|████████▉ | 140/157 [00:02<00:00, 72.59it/s]Feature extracting:  94%|█████████▍| 148/157 [00:02<00:00, 72.68it/s]Feature extracting:  99%|█████████▉| 156/157 [00:02<00:00, 72.82it/s]Feature extracting: 100%|██████████| 157/157 [00:02<00:00, 58.43it/s]
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:37,  1.61it/s]Feature extracting:   5%|▌         | 8/157 [00:00<00:10, 14.01it/s]Feature extracting:  10%|█         | 16/157 [00:00<00:05, 26.80it/s]Feature extracting:  15%|█▍        | 23/157 [00:00<00:03, 36.22it/s]Feature extracting:  20%|█▉        | 31/157 [00:01<00:02, 45.31it/s]Feature extracting:  25%|██▍       | 39/157 [00:01<00:02, 52.73it/s]Feature extracting:  30%|██▉       | 47/157 [00:01<00:01, 59.23it/s]Feature extracting:  35%|███▌      | 55/157 [00:01<00:01, 64.07it/s]Feature extracting:  40%|████      | 63/157 [00:01<00:01, 61.39it/s]Feature extracting:  45%|████▍     | 70/157 [00:01<00:01, 55.40it/s]Feature extracting:  49%|████▉     | 77/157 [00:01<00:01, 51.79it/s]Feature extracting:  53%|█████▎    | 83/157 [00:01<00:01, 49.70it/s]Feature extracting:  57%|█████▋    | 89/157 [00:02<00:01, 48.45it/s]Feature extracting:  61%|██████    | 95/157 [00:02<00:01, 47.34it/s]Feature extracting:  64%|██████▎   | 100/157 [00:02<00:01, 47.02it/s]Feature extracting:  67%|██████▋   | 105/157 [00:02<00:01, 46.22it/s]Feature extracting:  70%|███████   | 110/157 [00:02<00:01, 46.09it/s]Feature extracting:  73%|███████▎  | 115/157 [00:02<00:00, 46.03it/s]Feature extracting:  76%|███████▋  | 120/157 [00:02<00:00, 45.37it/s]Feature extracting:  80%|███████▉  | 125/157 [00:02<00:00, 45.90it/s]Feature extracting:  83%|████████▎ | 131/157 [00:03<00:00, 47.71it/s]Feature extracting:  87%|████████▋ | 137/157 [00:03<00:00, 49.25it/s]Feature extracting:  90%|█████████ | 142/157 [00:03<00:00, 48.00it/s]Feature extracting:  94%|█████████▎| 147/157 [00:03<00:00, 46.90it/s]Feature extracting:  97%|█████████▋| 153/157 [00:03<00:00, 49.24it/s]Feature extracting: 100%|██████████| 157/157 [00:03<00:00, 42.77it/s]
Feature extracting:   0%|          | 0/1 [00:00<?, ?it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.97it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.75it/s]
feature banks saved to ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/feature_banks.pkl
Train Epoch: 1 	Loss: 1.842219
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 46.1, "epoch": 1}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 99.35, "epoch": 1}
Train Epoch: 2 	Loss: 1.414690
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 51.78, "epoch": 2}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 97.6, "epoch": 2}
Train Epoch: 3 	Loss: 1.305089
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 54.93, "epoch": 3}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 96.65, "epoch": 3}
Train Epoch: 4 	Loss: 1.239589
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 57.05, "epoch": 4}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 95.24, "epoch": 4}
Train Epoch: 5 	Loss: 1.194175
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 58.32, "epoch": 5}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 94.66, "epoch": 5}
Train Epoch: 6 	Loss: 1.163079
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 59.47, "epoch": 6}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 92.93, "epoch": 6}
Train Epoch: 7 	Loss: 1.135387
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 60.02, "epoch": 7}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 90.01, "epoch": 7}
Train Epoch: 8 	Loss: 1.112370
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 60.67, "epoch": 8}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 91.35, "epoch": 8}
Train Epoch: 9 	Loss: 1.092685
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 61.25, "epoch": 9}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 88.97, "epoch": 9}
Train Epoch: 10 	Loss: 1.073555
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 61.8, "epoch": 10}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 88.1, "epoch": 10}
Train Epoch: 11 	Loss: 1.058980
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 62.08, "epoch": 11}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 87.47, "epoch": 11}
Train Epoch: 12 	Loss: 1.043808
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 62.68, "epoch": 12}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 83.72, "epoch": 12}
Train Epoch: 13 	Loss: 1.032868
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.04, "epoch": 13}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 86.08, "epoch": 13}
Train Epoch: 14 	Loss: 1.021230
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.33, "epoch": 14}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 81.9, "epoch": 14}
Train Epoch: 15 	Loss: 1.009938
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.62, "epoch": 15}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 78.8, "epoch": 15}
Train Epoch: 16 	Loss: 0.998599
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.97, "epoch": 16}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 77.04, "epoch": 16}
Train Epoch: 17 	Loss: 0.989006
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.31, "epoch": 17}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 74.39, "epoch": 17}
Train Epoch: 18 	Loss: 0.981292
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.5, "epoch": 18}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 70.43, "epoch": 18}
Train Epoch: 19 	Loss: 0.973752
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.9, "epoch": 19}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 70.47, "epoch": 19}
Train Epoch: 20 	Loss: 0.965730
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.3, "epoch": 20}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 62.38, "epoch": 20}
Train Epoch: 21 	Loss: 0.959257
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.62, "epoch": 21}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 68.23, "epoch": 21}
Train Epoch: 22 	Loss: 0.950861
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.71, "epoch": 22}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 60.58, "epoch": 22}
Train Epoch: 23 	Loss: 0.945120
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.03, "epoch": 23}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 59.98, "epoch": 23}
Train Epoch: 24 	Loss: 0.940482
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.22, "epoch": 24}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 55.48, "epoch": 24}
Train Epoch: 25 	Loss: 0.933544
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.38, "epoch": 25}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 53.0, "epoch": 25}
Train Epoch: 26 	Loss: 0.925602
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.44, "epoch": 26}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 48.94, "epoch": 26}
Train Epoch: 27 	Loss: 0.922569
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.68, "epoch": 27}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 50.97, "epoch": 27}
Train Epoch: 28 	Loss: 0.916335
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.66, "epoch": 28}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 53.9, "epoch": 28}
Train Epoch: 29 	Loss: 0.911156
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.31, "epoch": 29}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 46.32, "epoch": 29}
