/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
当前时间： 2024-01-07 16:08:33
当前时间： 2024-01-07 16:08:34
test_transform_stl10_poisson_noise
Loaded from: ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:08:16/model_200.pth
Namespace(batch_size=128, color=0.3, data_dir='./data/stl10/', encoder_usage_info='stl10', epochs=200, gpu='2', hue_hsv=1, knn_k=200, knn_t=0.5, lambda1=1.0, lambda2=1.0, lightness=1, loss0=20.0, lr=0.001, pretrained_encoder='./output/stl10/clean_encoder/model_1000.pth', pretraining_dataset='stl10', psnr=0.025, rand_init=False, reference_file='./reference/stl10/airplane.npz', reference_label=0, results_dir='./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:08:16/', saturation_hsv=1, seed=100, shadow_dataset='stl10', timestamp='2024-01-05-17:08:16', trigger_file='optimize_filter/trigger/stl10/2023-12-06-23-41-58/ssim0.9053_psnr21.80_lp0.0274_wd0.716_color9.494.pt', value_hsv=1)
{'loss': -22.915305616916754, 'wd': 0.038286269097947155, 'ssim': 0.9650022419599387, 'psnr': 26.694296631446253, 'lp': 0.00797073964554912, 'sim': -20.483394339145757, 'far': 2.4319112964165517, 'color': 8.106370653250279}
Predicting features
Feature extracting:   0%|          | 0/782 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/782 [00:01<25:40,  1.97s/it]Feature extracting:   3%|▎         | 20/782 [00:02<00:57, 13.26it/s]Feature extracting:   4%|▍         | 31/782 [00:02<00:34, 21.54it/s]Feature extracting:   5%|▌         | 42/782 [00:02<00:24, 30.79it/s]Feature extracting:   7%|▋         | 53/782 [00:02<00:17, 40.66it/s]Feature extracting:   8%|▊         | 63/782 [00:02<00:14, 49.92it/s]Feature extracting:   9%|▉         | 73/782 [00:02<00:12, 58.79it/s]Feature extracting:  11%|█         | 83/782 [00:02<00:10, 66.81it/s]Feature extracting:  12%|█▏        | 93/782 [00:02<00:09, 73.74it/s]Feature extracting:  13%|█▎        | 104/782 [00:02<00:08, 80.69it/s]Feature extracting:  15%|█▍        | 115/782 [00:03<00:07, 87.95it/s]Feature extracting:  16%|█▌        | 126/782 [00:03<00:07, 92.52it/s]Feature extracting:  18%|█▊        | 137/782 [00:03<00:06, 94.99it/s]Feature extracting:  19%|█▉        | 148/782 [00:03<00:06, 96.77it/s]Feature extracting:  20%|██        | 159/782 [00:03<00:06, 98.58it/s]Feature extracting:  22%|██▏       | 170/782 [00:03<00:06, 99.12it/s]Feature extracting:  23%|██▎       | 181/782 [00:03<00:06, 99.82it/s]Feature extracting:  25%|██▍       | 192/782 [00:03<00:05, 100.15it/s]Feature extracting:  26%|██▌       | 203/782 [00:03<00:05, 99.79it/s] Feature extracting:  27%|██▋       | 214/782 [00:04<00:05, 100.87it/s]Feature extracting:  29%|██▉       | 225/782 [00:04<00:05, 100.95it/s]Feature extracting:  30%|███       | 238/782 [00:04<00:05, 108.26it/s]Feature extracting:  33%|███▎      | 255/782 [00:04<00:04, 125.55it/s]Feature extracting:  35%|███▍      | 273/782 [00:04<00:03, 136.75it/s]Feature extracting:  37%|███▋      | 291/782 [00:04<00:03, 147.89it/s]Feature extracting:  39%|███▉      | 306/782 [00:04<00:03, 146.66it/s]Feature extracting:  41%|████      | 321/782 [00:04<00:03, 137.73it/s]Feature extracting:  43%|████▎     | 336/782 [00:04<00:03, 133.58it/s]Feature extracting:  45%|████▌     | 352/782 [00:05<00:03, 137.54it/s]Feature extracting:  47%|████▋     | 368/782 [00:05<00:03, 136.94it/s]Feature extracting:  49%|████▉     | 384/782 [00:05<00:03, 128.15it/s]Feature extracting:  51%|█████     | 400/782 [00:05<00:02, 130.89it/s]Feature extracting:  53%|█████▎    | 414/782 [00:05<00:02, 132.64it/s]Feature extracting:  55%|█████▌    | 433/782 [00:05<00:02, 148.04it/s]Feature extracting:  57%|█████▋    | 449/782 [00:05<00:02, 142.89it/s]Feature extracting:  60%|█████▉    | 466/782 [00:05<00:02, 148.82it/s]Feature extracting:  62%|██████▏   | 482/782 [00:05<00:02, 147.13it/s]Feature extracting:  64%|██████▎   | 497/782 [00:06<00:02, 141.50it/s]Feature extracting:  66%|██████▌   | 515/782 [00:06<00:01, 150.61it/s]Feature extracting:  68%|██████▊   | 531/782 [00:06<00:01, 149.82it/s]Feature extracting:  70%|██████▉   | 547/782 [00:06<00:01, 150.04it/s]Feature extracting:  72%|███████▏  | 563/782 [00:06<00:01, 150.61it/s]Feature extracting:  74%|███████▍  | 579/782 [00:06<00:01, 149.91it/s]Feature extracting:  76%|███████▌  | 596/782 [00:06<00:01, 155.56it/s]Feature extracting:  78%|███████▊  | 613/782 [00:06<00:01, 153.51it/s]Feature extracting:  80%|████████  | 629/782 [00:06<00:01, 151.17it/s]Feature extracting:  82%|████████▏ | 645/782 [00:06<00:00, 151.85it/s]Feature extracting:  85%|████████▍ | 661/782 [00:07<00:00, 151.30it/s]Feature extracting:  87%|████████▋ | 677/782 [00:07<00:00, 146.51it/s]Feature extracting:  88%|████████▊ | 692/782 [00:07<00:00, 144.97it/s]Feature extracting:  90%|█████████ | 707/782 [00:07<00:00, 142.80it/s]Feature extracting:  92%|█████████▏| 722/782 [00:07<00:00, 141.32it/s]Feature extracting:  94%|█████████▍| 737/782 [00:07<00:00, 137.94it/s]Feature extracting:  96%|█████████▌| 752/782 [00:07<00:00, 140.10it/s]Feature extracting:  98%|█████████▊| 767/782 [00:07<00:00, 139.48it/s]Feature extracting: 100%|██████████| 782/782 [00:08<00:00, 112.71it/s]Feature extracting: 100%|██████████| 782/782 [00:08<00:00, 96.10it/s] 
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:20,  1.95it/s]Feature extracting:  14%|█▍        | 22/157 [00:00<00:02, 46.54it/s]Feature extracting:  22%|██▏       | 35/157 [00:00<00:01, 65.80it/s]Feature extracting:  33%|███▎      | 52/157 [00:00<00:01, 90.13it/s]Feature extracting:  45%|████▍     | 70/157 [00:00<00:00, 111.67it/s]Feature extracting:  54%|█████▍    | 85/157 [00:01<00:00, 116.52it/s]Feature extracting:  64%|██████▎   | 100/157 [00:01<00:00, 118.27it/s]Feature extracting:  73%|███████▎  | 114/157 [00:01<00:00, 117.56it/s]Feature extracting:  84%|████████▍ | 132/157 [00:01<00:00, 133.32it/s]Feature extracting:  94%|█████████▎| 147/157 [00:01<00:00, 130.16it/s]Feature extracting: 100%|██████████| 157/157 [00:01<00:00, 95.49it/s] 
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:41,  1.53it/s]Feature extracting:   8%|▊         | 12/157 [00:00<00:07, 20.65it/s]Feature extracting:  15%|█▍        | 23/157 [00:00<00:03, 38.02it/s]Feature extracting:  22%|██▏       | 34/157 [00:00<00:02, 53.08it/s]Feature extracting:  29%|██▊       | 45/157 [00:01<00:01, 65.32it/s]Feature extracting:  35%|███▌      | 55/157 [00:01<00:01, 72.65it/s]Feature extracting:  42%|████▏     | 66/157 [00:01<00:01, 81.13it/s]Feature extracting:  49%|████▉     | 77/157 [00:01<00:00, 88.68it/s]Feature extracting:  56%|█████▌    | 88/157 [00:01<00:00, 92.03it/s]Feature extracting:  63%|██████▎   | 99/157 [00:01<00:00, 88.89it/s]Feature extracting:  69%|██████▉   | 109/157 [00:01<00:00, 91.72it/s]Feature extracting:  76%|███████▌  | 119/157 [00:01<00:00, 93.70it/s]Feature extracting:  83%|████████▎ | 130/157 [00:01<00:00, 97.56it/s]Feature extracting:  90%|█████████ | 142/157 [00:02<00:00, 103.25it/s]Feature extracting:  98%|█████████▊| 154/157 [00:02<00:00, 106.16it/s]Feature extracting: 100%|██████████| 157/157 [00:02<00:00, 67.39it/s] 
Feature extracting:   0%|          | 0/1 [00:00<?, ?it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  2.13it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.87it/s]
feature banks saved to ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:08:16/feature_banks.pkl
Train Epoch: 1 	Loss: 1.745782
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 50.26, "epoch": 1}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 1}
Train Epoch: 2 	Loss: 1.276480
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 55.68, "epoch": 2}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 2}
Train Epoch: 3 	Loss: 1.178511
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 58.28, "epoch": 3}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 3}
Train Epoch: 4 	Loss: 1.123475
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 59.81, "epoch": 4}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 4}
Train Epoch: 5 	Loss: 1.082784
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 61.33, "epoch": 5}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 5}
Train Epoch: 6 	Loss: 1.051544
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 62.47, "epoch": 6}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 40.07, "epoch": 6}
Train Epoch: 7 	Loss: 1.027293
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.0, "epoch": 7}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.03, "epoch": 7}
Train Epoch: 8 	Loss: 1.005250
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.02, "epoch": 8}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 8}
Train Epoch: 9 	Loss: 0.984936
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.48, "epoch": 9}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 9}
Train Epoch: 10 	Loss: 0.969164
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.21, "epoch": 10}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 10}
Train Epoch: 11 	Loss: 0.956690
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.5, "epoch": 11}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 11}
Train Epoch: 12 	Loss: 0.941487
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.93, "epoch": 12}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.01, "epoch": 12}
Train Epoch: 13 	Loss: 0.931348
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.25, "epoch": 13}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.29, "epoch": 13}
Train Epoch: 14 	Loss: 0.921243
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.59, "epoch": 14}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.21, "epoch": 14}
Train Epoch: 15 	Loss: 0.909816
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.77, "epoch": 15}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.09, "epoch": 15}
Train Epoch: 16 	Loss: 0.902009
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.06, "epoch": 16}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 21.99, "epoch": 16}
Train Epoch: 17 	Loss: 0.891890
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.19, "epoch": 17}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 16.87, "epoch": 17}
Train Epoch: 18 	Loss: 0.885631
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.36, "epoch": 18}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 37.23, "epoch": 18}
Train Epoch: 19 	Loss: 0.878530
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.65, "epoch": 19}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 71.66, "epoch": 19}
Train Epoch: 20 	Loss: 0.871438
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.08, "epoch": 20}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 75.37, "epoch": 20}
Train Epoch: 21 	Loss: 0.865963
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.35, "epoch": 21}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 89.82, "epoch": 21}
Train Epoch: 22 	Loss: 0.856475
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.48, "epoch": 22}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 67.9, "epoch": 22}
Train Epoch: 23 	Loss: 0.851565
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.56, "epoch": 23}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 72.9, "epoch": 23}
Train Epoch: 24 	Loss: 0.844383
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.69, "epoch": 24}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 74.59, "epoch": 24}
Train Epoch: 25 	Loss: 0.842281
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.04, "epoch": 25}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 38.3, "epoch": 25}
Train Epoch: 26 	Loss: 0.836997
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.03, "epoch": 26}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 24.91, "epoch": 26}
Train Epoch: 27 	Loss: 0.831399
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.2, "epoch": 27}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 15.16, "epoch": 27}
Train Epoch: 28 	Loss: 0.826056
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.26, "epoch": 28}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 7.21, "epoch": 28}
Train Epoch: 29 	Loss: 0.820788
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.45, "epoch": 29}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 8.09, "epoch": 29}
Train Epoch: 30 	Loss: 0.815127
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.49, "epoch": 30}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 8.58, "epoch": 30}
Train Epoch: 31 	Loss: 0.813844
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.74, "epoch": 31}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.69, "epoch": 31}
Train Epoch: 32 	Loss: 0.808394
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.7, "epoch": 32}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 2.13, "epoch": 32}
Train Epoch: 33 	Loss: 0.801655
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.77, "epoch": 33}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 3.6, "epoch": 33}
Train Epoch: 34 	Loss: 0.799501
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.88, "epoch": 34}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 1.32, "epoch": 34}
Train Epoch: 35 	Loss: 0.796627
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.06, "epoch": 35}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 2.0, "epoch": 35}
Train Epoch: 36 	Loss: 0.790590
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.13, "epoch": 36}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 1.53, "epoch": 36}
Train Epoch: 37 	Loss: 0.785969
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.17, "epoch": 37}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.49, "epoch": 37}
Train Epoch: 38 	Loss: 0.783602
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.22, "epoch": 38}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.09, "epoch": 38}
Train Epoch: 39 	Loss: 0.779129
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.33, "epoch": 39}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.01, "epoch": 39}
Train Epoch: 40 	Loss: 0.774345
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.53, "epoch": 40}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.01, "epoch": 40}
Train Epoch: 41 	Loss: 0.774108
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.47, "epoch": 41}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 41}
Train Epoch: 42 	Loss: 0.768566
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.53, "epoch": 42}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.01, "epoch": 42}
Train Epoch: 43 	Loss: 0.765957
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.62, "epoch": 43}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 43}
Train Epoch: 44 	Loss: 0.763728
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.58, "epoch": 44}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 44}
Train Epoch: 45 	Loss: 0.761729
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.6, "epoch": 45}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 45}
Train Epoch: 46 	Loss: 0.754893
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.69, "epoch": 46}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 46}
Train Epoch: 47 	Loss: 0.752383
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.78, "epoch": 47}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 47}
Train Epoch: 48 	Loss: 0.748163
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.88, "epoch": 48}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 48}
Train Epoch: 49 	Loss: 0.748192
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.82, "epoch": 49}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 49}
Train Epoch: 50 	Loss: 0.743614
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.96, "epoch": 50}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 50}
Train Epoch: 51 	Loss: 0.739675
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.95, "epoch": 51}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 51}
Train Epoch: 52 	Loss: 0.738083
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 71.06, "epoch": 52}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 52}
