/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
当前时间： 2024-01-07 16:10:04
当前时间： 2024-01-07 16:10:05
test_transform_stl10
Loaded from: ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/model_200.pth
Namespace(batch_size=32, color=0.0, data_dir='./data/stl10/', encoder_usage_info='stl10', epochs=200, gpu='1', hue_hsv=1, knn_k=200, knn_t=0.5, lambda1=1.0, lambda2=1.0, lightness=1, loss0=20.0, lr=0.001, pretrained_encoder='./output/stl10/clean_encoder/model_1000.pth', pretraining_dataset='stl10', psnr=0.025, rand_init=False, reference_file='./reference/stl10/airplane.npz', reference_label=0, results_dir='./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/', saturation_hsv=1, seed=100, shadow_dataset='stl10', timestamp='2024-01-05-17:10:47', trigger_file='optimize_filter/trigger/stl10/2023-12-19-01-25-16/ssim0.9987_psnr42.79_lp0.0002_wd0.002_color4.971.pt', value_hsv=1)
{'loss': -20.951350208433887, 'wd': 0.0018064033534527916, 'ssim': 0.9964274972791708, 'psnr': 39.506030809253495, 'lp': 0.0005328581722628902, 'sim': -20.951350208433887, 'far': 0.0, 'color': 5.0124844556886625}
Predicting features
Feature extracting:   0%|          | 0/782 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/782 [00:04<1:04:38,  4.97s/it]Feature extracting:   2%|▏         | 16/782 [00:05<02:54,  4.38it/s] Feature extracting:   3%|▎         | 25/782 [00:05<01:41,  7.48it/s]Feature extracting:   4%|▍         | 32/782 [00:05<01:11, 10.48it/s]Feature extracting:   5%|▍         | 39/782 [00:05<00:52, 14.13it/s]Feature extracting:   6%|▌         | 45/782 [00:05<00:41, 17.84it/s]Feature extracting:   7%|▋         | 51/782 [00:05<00:33, 22.04it/s]Feature extracting:   7%|▋         | 57/782 [00:05<00:27, 26.56it/s]Feature extracting:   8%|▊         | 63/782 [00:05<00:23, 31.16it/s]Feature extracting:   9%|▉         | 69/782 [00:06<00:20, 35.60it/s]Feature extracting:  10%|▉         | 75/782 [00:06<00:17, 39.60it/s]Feature extracting:  10%|█         | 81/782 [00:06<00:16, 42.99it/s]Feature extracting:  11%|█         | 87/782 [00:06<00:15, 45.56it/s]Feature extracting:  12%|█▏        | 93/782 [00:06<00:14, 47.56it/s]Feature extracting:  13%|█▎        | 99/782 [00:06<00:13, 49.03it/s]Feature extracting:  13%|█▎        | 105/782 [00:06<00:13, 50.12it/s]Feature extracting:  14%|█▍        | 111/782 [00:06<00:13, 50.86it/s]Feature extracting:  15%|█▍        | 117/782 [00:06<00:12, 51.49it/s]Feature extracting:  16%|█▌        | 123/782 [00:07<00:12, 51.89it/s]Feature extracting:  16%|█▋        | 129/782 [00:07<00:12, 52.79it/s]Feature extracting:  18%|█▊        | 137/782 [00:07<00:10, 58.96it/s]Feature extracting:  19%|█▊        | 145/782 [00:07<00:10, 63.40it/s]Feature extracting:  19%|█▉        | 152/782 [00:07<00:09, 64.89it/s]Feature extracting:  20%|██        | 159/782 [00:07<00:09, 64.77it/s]Feature extracting:  21%|██        | 166/782 [00:07<00:09, 64.67it/s]Feature extracting:  22%|██▏       | 173/782 [00:07<00:09, 64.60it/s]Feature extracting:  23%|██▎       | 180/782 [00:07<00:09, 65.48it/s]Feature extracting:  24%|██▍       | 187/782 [00:08<00:08, 66.59it/s]Feature extracting:  25%|██▍       | 195/782 [00:08<00:08, 67.71it/s]Feature extracting:  26%|██▌       | 202/782 [00:08<00:08, 68.02it/s]Feature extracting:  27%|██▋       | 209/782 [00:08<00:08, 67.16it/s]Feature extracting:  28%|██▊       | 216/782 [00:08<00:08, 66.34it/s]Feature extracting:  29%|██▊       | 223/782 [00:08<00:08, 65.85it/s]Feature extracting:  29%|██▉       | 230/782 [00:08<00:08, 65.42it/s]Feature extracting:  30%|███       | 237/782 [00:08<00:08, 65.38it/s]Feature extracting:  31%|███       | 244/782 [00:08<00:08, 65.44it/s]Feature extracting:  32%|███▏      | 251/782 [00:09<00:08, 65.48it/s]Feature extracting:  33%|███▎      | 258/782 [00:09<00:08, 65.23it/s]Feature extracting:  34%|███▍      | 265/782 [00:09<00:08, 61.79it/s]Feature extracting:  35%|███▍      | 272/782 [00:09<00:08, 59.35it/s]Feature extracting:  36%|███▌      | 278/782 [00:09<00:08, 58.12it/s]Feature extracting:  36%|███▋      | 284/782 [00:09<00:08, 58.17it/s]Feature extracting:  37%|███▋      | 290/782 [00:09<00:08, 57.62it/s]Feature extracting:  38%|███▊      | 296/782 [00:09<00:08, 57.71it/s]Feature extracting:  39%|███▊      | 302/782 [00:09<00:08, 57.54it/s]Feature extracting:  39%|███▉      | 308/782 [00:10<00:08, 57.52it/s]Feature extracting:  40%|████      | 314/782 [00:10<00:08, 57.83it/s]Feature extracting:  41%|████      | 320/782 [00:10<00:08, 57.28it/s]Feature extracting:  42%|████▏     | 326/782 [00:10<00:07, 57.22it/s]Feature extracting:  42%|████▏     | 332/782 [00:10<00:07, 57.09it/s]Feature extracting:  43%|████▎     | 338/782 [00:10<00:07, 56.85it/s]Feature extracting:  44%|████▍     | 344/782 [00:10<00:07, 57.10it/s]Feature extracting:  45%|████▍     | 350/782 [00:10<00:07, 56.80it/s]Feature extracting:  46%|████▌     | 356/782 [00:10<00:07, 56.85it/s]Feature extracting:  46%|████▋     | 362/782 [00:10<00:07, 56.78it/s]Feature extracting:  47%|████▋     | 368/782 [00:11<00:07, 56.65it/s]Feature extracting:  48%|████▊     | 374/782 [00:11<00:07, 56.96it/s]Feature extracting:  49%|████▊     | 380/782 [00:11<00:07, 56.67it/s]Feature extracting:  49%|████▉     | 386/782 [00:11<00:06, 56.81it/s]Feature extracting:  50%|█████     | 392/782 [00:11<00:06, 57.07it/s]Feature extracting:  51%|█████     | 398/782 [00:11<00:06, 57.80it/s]Feature extracting:  52%|█████▏    | 407/782 [00:11<00:05, 65.36it/s]Feature extracting:  53%|█████▎    | 416/782 [00:11<00:05, 72.03it/s]Feature extracting:  55%|█████▍    | 427/782 [00:11<00:04, 80.66it/s]Feature extracting:  56%|█████▌    | 437/782 [00:12<00:04, 85.67it/s]Feature extracting:  57%|█████▋    | 447/782 [00:12<00:03, 89.25it/s]Feature extracting:  58%|█████▊    | 457/782 [00:12<00:03, 89.40it/s]Feature extracting:  60%|█████▉    | 466/782 [00:12<00:03, 85.23it/s]Feature extracting:  61%|██████    | 475/782 [00:12<00:04, 75.09it/s]Feature extracting:  62%|██████▏   | 483/782 [00:12<00:04, 70.96it/s]Feature extracting:  63%|██████▎   | 491/782 [00:12<00:04, 68.61it/s]Feature extracting:  64%|██████▎   | 498/782 [00:12<00:04, 66.55it/s]Feature extracting:  65%|██████▍   | 505/782 [00:12<00:04, 64.93it/s]Feature extracting:  65%|██████▌   | 512/782 [00:13<00:04, 64.32it/s]Feature extracting:  66%|██████▋   | 519/782 [00:13<00:04, 63.09it/s]Feature extracting:  67%|██████▋   | 527/782 [00:13<00:03, 65.47it/s]Feature extracting:  68%|██████▊   | 535/782 [00:13<00:03, 68.67it/s]Feature extracting:  69%|██████▉   | 543/782 [00:13<00:03, 69.74it/s]Feature extracting:  70%|███████   | 551/782 [00:13<00:03, 70.32it/s]Feature extracting:  71%|███████▏  | 559/782 [00:13<00:03, 70.42it/s]Feature extracting:  73%|███████▎  | 567/782 [00:13<00:02, 72.15it/s]Feature extracting:  74%|███████▎  | 575/782 [00:13<00:02, 73.00it/s]Feature extracting:  75%|███████▍  | 583/782 [00:14<00:02, 73.44it/s]Feature extracting:  76%|███████▌  | 591/782 [00:14<00:02, 72.93it/s]Feature extracting:  77%|███████▋  | 599/782 [00:14<00:02, 72.66it/s]Feature extracting:  78%|███████▊  | 607/782 [00:14<00:02, 72.86it/s]Feature extracting:  79%|███████▊  | 615/782 [00:14<00:02, 72.80it/s]Feature extracting:  80%|███████▉  | 625/782 [00:14<00:01, 78.66it/s]Feature extracting:  81%|████████▏ | 637/782 [00:14<00:01, 90.21it/s]Feature extracting:  83%|████████▎ | 649/782 [00:14<00:01, 98.36it/s]Feature extracting:  84%|████████▍ | 660/782 [00:14<00:01, 101.37it/s]Feature extracting:  86%|████████▌ | 671/782 [00:15<00:01, 103.54it/s]Feature extracting:  87%|████████▋ | 682/782 [00:15<00:00, 104.94it/s]Feature extracting:  89%|████████▊ | 694/782 [00:15<00:00, 107.16it/s]Feature extracting:  90%|█████████ | 706/782 [00:15<00:00, 110.14it/s]Feature extracting:  92%|█████████▏| 718/782 [00:15<00:00, 107.75it/s]Feature extracting:  93%|█████████▎| 729/782 [00:15<00:00, 106.19it/s]Feature extracting:  95%|█████████▍| 740/782 [00:15<00:00, 105.15it/s]Feature extracting:  96%|█████████▌| 751/782 [00:15<00:00, 105.40it/s]Feature extracting:  97%|█████████▋| 762/782 [00:15<00:00, 106.26it/s]Feature extracting:  99%|█████████▉| 773/782 [00:15<00:00, 105.87it/s]Feature extracting: 100%|██████████| 782/782 [00:16<00:00, 47.92it/s] 
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:19,  1.96it/s]Feature extracting:  11%|█▏        | 18/157 [00:00<00:03, 37.90it/s]Feature extracting:  18%|█▊        | 28/157 [00:00<00:02, 48.75it/s]Feature extracting:  24%|██▎       | 37/157 [00:00<00:02, 56.09it/s]Feature extracting:  29%|██▉       | 46/157 [00:00<00:01, 61.81it/s]Feature extracting:  34%|███▍      | 54/157 [00:01<00:01, 65.16it/s]Feature extracting:  39%|███▉      | 62/157 [00:01<00:01, 67.91it/s]Feature extracting:  45%|████▍     | 70/157 [00:01<00:01, 70.34it/s]Feature extracting:  50%|████▉     | 78/157 [00:01<00:01, 71.80it/s]Feature extracting:  55%|█████▍    | 86/157 [00:01<00:00, 72.78it/s]Feature extracting:  60%|█████▉    | 94/157 [00:01<00:00, 73.74it/s]Feature extracting:  65%|██████▍   | 102/157 [00:01<00:00, 73.97it/s]Feature extracting:  70%|███████   | 110/157 [00:01<00:00, 74.44it/s]Feature extracting:  75%|███████▌  | 118/157 [00:01<00:00, 74.83it/s]Feature extracting:  81%|████████  | 127/157 [00:02<00:00, 76.69it/s]Feature extracting:  87%|████████▋ | 136/157 [00:02<00:00, 80.26it/s]Feature extracting:  92%|█████████▏| 145/157 [00:02<00:00, 81.45it/s]Feature extracting:  98%|█████████▊| 154/157 [00:02<00:00, 79.07it/s]Feature extracting: 100%|██████████| 157/157 [00:02<00:00, 63.08it/s]
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:23,  1.86it/s]Feature extracting:   6%|▋         | 10/157 [00:00<00:07, 20.37it/s]Feature extracting:  12%|█▏        | 19/157 [00:00<00:03, 35.61it/s]Feature extracting:  18%|█▊        | 28/157 [00:00<00:02, 47.96it/s]Feature extracting:  24%|██▎       | 37/157 [00:00<00:02, 57.64it/s]Feature extracting:  29%|██▉       | 46/157 [00:01<00:01, 64.87it/s]Feature extracting:  36%|███▌      | 56/157 [00:01<00:01, 72.81it/s]Feature extracting:  42%|████▏     | 66/157 [00:01<00:01, 79.08it/s]Feature extracting:  48%|████▊     | 76/157 [00:01<00:00, 81.97it/s]Feature extracting:  54%|█████▍    | 85/157 [00:01<00:00, 80.50it/s]Feature extracting:  60%|█████▉    | 94/157 [00:01<00:00, 80.03it/s]Feature extracting:  66%|██████▌   | 103/157 [00:01<00:00, 75.93it/s]Feature extracting:  71%|███████   | 111/157 [00:01<00:00, 71.45it/s]Feature extracting:  76%|███████▌  | 119/157 [00:02<00:00, 68.74it/s]Feature extracting:  81%|████████  | 127/157 [00:02<00:00, 66.07it/s]Feature extracting:  85%|████████▌ | 134/157 [00:02<00:00, 64.93it/s]Feature extracting:  90%|████████▉ | 141/157 [00:02<00:00, 65.88it/s]Feature extracting:  95%|█████████▍| 149/157 [00:02<00:00, 68.23it/s]Feature extracting: 100%|██████████| 157/157 [00:02<00:00, 55.44it/s]Feature extracting: 100%|██████████| 157/157 [00:02<00:00, 57.18it/s]
Feature extracting:   0%|          | 0/1 [00:00<?, ?it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.82it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.63it/s]
feature banks saved to ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/feature_banks.pkl
Train Epoch: 1 	Loss: 1.459193
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.54, "epoch": 1}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 1}
Train Epoch: 2 	Loss: 0.974146
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.09, "epoch": 2}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 2}
Train Epoch: 3 	Loss: 0.900851
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.71, "epoch": 3}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 3}
Train Epoch: 4 	Loss: 0.857570
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.96, "epoch": 4}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 4}
Train Epoch: 5 	Loss: 0.824798
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 71.13, "epoch": 5}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 5}
Train Epoch: 6 	Loss: 0.797932
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 72.01, "epoch": 6}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 6}
Train Epoch: 7 	Loss: 0.775277
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 72.74, "epoch": 7}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 7}
Train Epoch: 8 	Loss: 0.755839
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.55, "epoch": 8}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 8}
Train Epoch: 9 	Loss: 0.741053
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.91, "epoch": 9}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 9}
Train Epoch: 10 	Loss: 0.726511
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 74.4, "epoch": 10}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 10}
Train Epoch: 11 	Loss: 0.713075
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 74.86, "epoch": 11}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 11}
Train Epoch: 12 	Loss: 0.701642
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 75.16, "epoch": 12}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 12}
Train Epoch: 13 	Loss: 0.692004
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 75.55, "epoch": 13}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 13}
Train Epoch: 14 	Loss: 0.684293
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 75.75, "epoch": 14}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 14}
Train Epoch: 15 	Loss: 0.675796
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 75.88, "epoch": 15}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 15}
Train Epoch: 16 	Loss: 0.667569
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.19, "epoch": 16}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 16}
Train Epoch: 17 	Loss: 0.658499
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.45, "epoch": 17}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 17}
Train Epoch: 18 	Loss: 0.652920
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.52, "epoch": 18}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 18}
Train Epoch: 19 	Loss: 0.646481
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.7, "epoch": 19}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 19}
Train Epoch: 20 	Loss: 0.640156
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.79, "epoch": 20}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 20}
Train Epoch: 21 	Loss: 0.634917
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.87, "epoch": 21}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 21}
Train Epoch: 22 	Loss: 0.630226
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.0, "epoch": 22}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 22}
Train Epoch: 23 	Loss: 0.623855
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.94, "epoch": 23}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 23}
Train Epoch: 24 	Loss: 0.618456
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.07, "epoch": 24}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 24}
Train Epoch: 25 	Loss: 0.613878
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.18, "epoch": 25}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 25}
Train Epoch: 26 	Loss: 0.608220
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.29, "epoch": 26}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 26}
Train Epoch: 27 	Loss: 0.604683
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.22, "epoch": 27}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 27}
Train Epoch: 28 	Loss: 0.598598
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.33, "epoch": 28}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 28}
Train Epoch: 29 	Loss: 0.595077
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.26, "epoch": 29}
