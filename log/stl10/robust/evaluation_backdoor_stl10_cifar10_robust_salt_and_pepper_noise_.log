/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
当前时间： 2024-01-07 16:09:48
当前时间： 2024-01-07 16:09:49
test_transform_stl10_salt_and_pepper_noise
Loaded from: ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/model_200.pth
Namespace(batch_size=32, color=0.0, data_dir='./data/stl10/', encoder_usage_info='stl10', epochs=200, gpu='1', hue_hsv=1, knn_k=200, knn_t=0.5, lambda1=1.0, lambda2=1.0, lightness=1, loss0=20.0, lr=0.001, pretrained_encoder='./output/stl10/clean_encoder/model_1000.pth', pretraining_dataset='stl10', psnr=0.025, rand_init=False, reference_file='./reference/stl10/airplane.npz', reference_label=0, results_dir='./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/', saturation_hsv=1, seed=100, shadow_dataset='stl10', timestamp='2024-01-05-17:10:47', trigger_file='optimize_filter/trigger/stl10/2023-12-19-01-25-16/ssim0.9987_psnr42.79_lp0.0002_wd0.002_color4.971.pt', value_hsv=1)
{'loss': -20.951350208433887, 'wd': 0.0018064033534527916, 'ssim': 0.9964274972791708, 'psnr': 39.506030809253495, 'lp': 0.0005328581722628902, 'sim': -20.951350208433887, 'far': 0.0, 'color': 5.0124844556886625}
Predicting features
Feature extracting:   0%|          | 0/782 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/782 [00:02<36:37,  2.81s/it]Feature extracting:   2%|▏         | 18/782 [00:02<01:29,  8.54it/s]Feature extracting:   4%|▎         | 28/782 [00:03<00:53, 14.11it/s]Feature extracting:   5%|▍         | 37/782 [00:03<00:37, 20.01it/s]Feature extracting:   6%|▌         | 46/782 [00:03<00:27, 26.66it/s]Feature extracting:   7%|▋         | 54/782 [00:03<00:22, 33.05it/s]Feature extracting:   8%|▊         | 62/782 [00:03<00:18, 39.65it/s]Feature extracting:   9%|▉         | 70/782 [00:03<00:15, 46.08it/s]Feature extracting:  10%|▉         | 78/782 [00:03<00:13, 52.25it/s]Feature extracting:  11%|█         | 87/782 [00:03<00:11, 59.12it/s]Feature extracting:  12%|█▏        | 96/782 [00:03<00:10, 65.10it/s]Feature extracting:  13%|█▎        | 104/782 [00:04<00:09, 68.52it/s]Feature extracting:  14%|█▍        | 112/782 [00:04<00:09, 71.30it/s]Feature extracting:  15%|█▌        | 120/782 [00:04<00:09, 73.37it/s]Feature extracting:  16%|█▋        | 128/782 [00:04<00:08, 74.86it/s]Feature extracting:  17%|█▋        | 136/782 [00:04<00:08, 75.93it/s]Feature extracting:  18%|█▊        | 144/782 [00:04<00:08, 76.70it/s]Feature extracting:  19%|█▉        | 152/782 [00:04<00:08, 77.29it/s]Feature extracting:  20%|██        | 160/782 [00:04<00:07, 77.89it/s]Feature extracting:  21%|██▏       | 168/782 [00:04<00:07, 78.31it/s]Feature extracting:  23%|██▎       | 178/782 [00:04<00:07, 83.32it/s]Feature extracting:  24%|██▍       | 187/782 [00:05<00:07, 83.90it/s]Feature extracting:  25%|██▌       | 196/782 [00:05<00:06, 84.44it/s]Feature extracting:  27%|██▋       | 208/782 [00:05<00:06, 93.27it/s]Feature extracting:  29%|██▉       | 227/782 [00:05<00:04, 120.34it/s]Feature extracting:  31%|███       | 244/782 [00:05<00:04, 133.13it/s]Feature extracting:  33%|███▎      | 259/782 [00:05<00:03, 136.42it/s]Feature extracting:  35%|███▌      | 274/782 [00:05<00:03, 138.19it/s]Feature extracting:  37%|███▋      | 289/782 [00:05<00:03, 139.97it/s]Feature extracting:  39%|███▉      | 304/782 [00:05<00:03, 140.09it/s]Feature extracting:  41%|████      | 319/782 [00:06<00:03, 142.21it/s]Feature extracting:  43%|████▎     | 334/782 [00:06<00:03, 125.98it/s]Feature extracting:  44%|████▍     | 347/782 [00:06<00:04, 106.81it/s]Feature extracting:  46%|████▌     | 359/782 [00:06<00:04, 88.15it/s] Feature extracting:  48%|████▊     | 375/782 [00:06<00:04, 101.44it/s]Feature extracting:  49%|████▉     | 387/782 [00:06<00:04, 98.35it/s] Feature extracting:  51%|█████     | 398/782 [00:06<00:04, 93.23it/s]Feature extracting:  52%|█████▏    | 408/782 [00:07<00:04, 88.25it/s]Feature extracting:  53%|█████▎    | 418/782 [00:07<00:04, 84.71it/s]Feature extracting:  55%|█████▍    | 427/782 [00:07<00:04, 82.59it/s]Feature extracting:  56%|█████▌    | 436/782 [00:07<00:04, 81.24it/s]Feature extracting:  57%|█████▋    | 445/782 [00:07<00:04, 80.18it/s]Feature extracting:  58%|█████▊    | 454/782 [00:07<00:04, 79.34it/s]Feature extracting:  59%|█████▉    | 462/782 [00:07<00:04, 78.91it/s]Feature extracting:  60%|██████    | 470/782 [00:07<00:03, 78.50it/s]Feature extracting:  61%|██████▏   | 479/782 [00:07<00:03, 79.83it/s]Feature extracting:  63%|██████▎   | 494/782 [00:08<00:02, 96.15it/s]Feature extracting:  65%|██████▌   | 509/782 [00:08<00:02, 110.46it/s]Feature extracting:  67%|██████▋   | 522/782 [00:08<00:02, 115.67it/s]Feature extracting:  68%|██████▊   | 535/782 [00:08<00:02, 118.73it/s]Feature extracting:  70%|███████   | 548/782 [00:08<00:01, 121.93it/s]Feature extracting:  72%|███████▏  | 561/782 [00:08<00:01, 123.15it/s]Feature extracting:  73%|███████▎  | 574/782 [00:08<00:01, 121.78it/s]Feature extracting:  75%|███████▌  | 587/782 [00:08<00:01, 120.89it/s]Feature extracting:  77%|███████▋  | 600/782 [00:08<00:01, 121.41it/s]Feature extracting:  78%|███████▊  | 613/782 [00:09<00:01, 123.70it/s]Feature extracting:  80%|████████  | 629/782 [00:09<00:01, 131.72it/s]Feature extracting:  82%|████████▏ | 643/782 [00:09<00:01, 129.49it/s]Feature extracting:  84%|████████▍ | 658/782 [00:09<00:00, 126.60it/s]Feature extracting:  86%|████████▌ | 673/782 [00:09<00:00, 132.12it/s]Feature extracting:  88%|████████▊ | 687/782 [00:09<00:00, 118.36it/s]Feature extracting:  90%|████████▉ | 700/782 [00:09<00:00, 106.99it/s]Feature extracting:  91%|█████████ | 712/782 [00:09<00:00, 99.51it/s] Feature extracting:  92%|█████████▏| 723/782 [00:10<00:00, 95.55it/s]Feature extracting:  94%|█████████▎| 733/782 [00:10<00:00, 91.54it/s]Feature extracting:  95%|█████████▌| 743/782 [00:10<00:00, 82.36it/s]Feature extracting:  96%|█████████▌| 752/782 [00:10<00:00, 76.13it/s]Feature extracting:  97%|█████████▋| 760/782 [00:10<00:00, 71.60it/s]Feature extracting:  98%|█████████▊| 768/782 [00:10<00:00, 68.18it/s]Feature extracting:  99%|█████████▉| 775/782 [00:10<00:00, 66.00it/s]Feature extracting: 100%|██████████| 782/782 [00:11<00:00, 43.06it/s]Feature extracting: 100%|██████████| 782/782 [00:11<00:00, 69.76it/s]
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:00,  2.57it/s]Feature extracting:  10%|█         | 16/157 [00:00<00:03, 41.45it/s]Feature extracting:  16%|█▌        | 25/157 [00:00<00:02, 51.75it/s]Feature extracting:  21%|██        | 33/157 [00:00<00:02, 57.37it/s]Feature extracting:  26%|██▌       | 41/157 [00:00<00:01, 62.86it/s]Feature extracting:  31%|███       | 49/157 [00:00<00:01, 64.28it/s]Feature extracting:  36%|███▋      | 57/157 [00:01<00:01, 65.09it/s]Feature extracting:  41%|████▏     | 65/157 [00:01<00:01, 63.73it/s]Feature extracting:  46%|████▌     | 72/157 [00:01<00:01, 63.37it/s]Feature extracting:  50%|█████     | 79/157 [00:01<00:01, 63.53it/s]Feature extracting:  55%|█████▍    | 86/157 [00:01<00:01, 63.29it/s]Feature extracting:  59%|█████▉    | 93/157 [00:01<00:01, 62.72it/s]Feature extracting:  64%|██████▎   | 100/157 [00:01<00:00, 62.50it/s]Feature extracting:  68%|██████▊   | 107/157 [00:01<00:00, 62.31it/s]Feature extracting:  73%|███████▎  | 114/157 [00:01<00:00, 62.30it/s]Feature extracting:  78%|███████▊  | 122/157 [00:02<00:00, 65.17it/s]Feature extracting:  83%|████████▎ | 130/157 [00:02<00:00, 69.16it/s]Feature extracting:  89%|████████▊ | 139/157 [00:02<00:00, 72.92it/s]Feature extracting:  94%|█████████▍| 148/157 [00:02<00:00, 75.52it/s]Feature extracting: 100%|██████████| 157/157 [00:02<00:00, 77.28it/s]Feature extracting: 100%|██████████| 157/157 [00:02<00:00, 60.32it/s]
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:25,  1.83it/s]Feature extracting:   4%|▍         | 7/157 [00:00<00:10, 13.68it/s]Feature extracting:   8%|▊         | 12/157 [00:00<00:06, 21.51it/s]Feature extracting:  11%|█         | 17/157 [00:00<00:05, 27.68it/s]Feature extracting:  14%|█▍        | 22/157 [00:00<00:04, 32.96it/s]Feature extracting:  17%|█▋        | 27/157 [00:01<00:03, 36.82it/s]Feature extracting:  20%|██        | 32/157 [00:01<00:03, 40.27it/s]Feature extracting:  24%|██▎       | 37/157 [00:01<00:02, 40.56it/s]Feature extracting:  27%|██▋       | 42/157 [00:01<00:03, 37.85it/s]Feature extracting:  30%|██▉       | 47/157 [00:01<00:03, 35.94it/s]Feature extracting:  32%|███▏      | 51/157 [00:01<00:03, 35.24it/s]Feature extracting:  35%|███▌      | 55/157 [00:01<00:02, 34.51it/s]Feature extracting:  38%|███▊      | 59/157 [00:01<00:02, 34.54it/s]Feature extracting:  40%|████      | 63/157 [00:02<00:02, 33.59it/s]Feature extracting:  43%|████▎     | 67/157 [00:02<00:03, 28.10it/s]Feature extracting:  45%|████▌     | 71/157 [00:02<00:02, 29.62it/s]Feature extracting:  48%|████▊     | 75/157 [00:02<00:02, 30.57it/s]Feature extracting:  50%|█████     | 79/157 [00:02<00:02, 31.33it/s]Feature extracting:  53%|█████▎    | 83/157 [00:02<00:02, 31.66it/s]Feature extracting:  55%|█████▌    | 87/157 [00:02<00:02, 32.10it/s]Feature extracting:  58%|█████▊    | 91/157 [00:03<00:02, 32.20it/s]Feature extracting:  61%|██████    | 95/157 [00:03<00:01, 32.51it/s]Feature extracting:  63%|██████▎   | 99/157 [00:03<00:01, 32.65it/s]Feature extracting:  66%|██████▌   | 103/157 [00:03<00:01, 33.00it/s]Feature extracting:  68%|██████▊   | 107/157 [00:03<00:01, 33.49it/s]Feature extracting:  71%|███████   | 111/157 [00:03<00:01, 33.95it/s]Feature extracting:  73%|███████▎  | 115/157 [00:03<00:01, 33.98it/s]Feature extracting:  76%|███████▌  | 119/157 [00:03<00:01, 33.84it/s]Feature extracting:  78%|███████▊  | 123/157 [00:03<00:00, 34.07it/s]Feature extracting:  81%|████████  | 127/157 [00:04<00:00, 34.20it/s]Feature extracting:  83%|████████▎ | 131/157 [00:04<00:00, 33.99it/s]Feature extracting:  86%|████████▌ | 135/157 [00:04<00:00, 34.29it/s]Feature extracting:  89%|████████▊ | 139/157 [00:04<00:00, 34.13it/s]Feature extracting:  91%|█████████ | 143/157 [00:04<00:00, 34.20it/s]Feature extracting:  94%|█████████▎| 147/157 [00:04<00:00, 34.16it/s]Feature extracting:  96%|█████████▌| 151/157 [00:04<00:00, 34.21it/s]Feature extracting:  99%|█████████▊| 155/157 [00:04<00:00, 34.18it/s]Feature extracting: 100%|██████████| 157/157 [00:05<00:00, 31.04it/s]
Feature extracting:   0%|          | 0/1 [00:00<?, ?it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  2.08it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.82it/s]
feature banks saved to ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/feature_banks.pkl
Train Epoch: 1 	Loss: 1.919183
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 41.87, "epoch": 1}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 1}
Train Epoch: 2 	Loss: 1.530099
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 46.66, "epoch": 2}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 2}
Train Epoch: 3 	Loss: 1.436972
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 48.95, "epoch": 3}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 3}
Train Epoch: 4 	Loss: 1.388674
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 50.59, "epoch": 4}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 99.94, "epoch": 4}
Train Epoch: 5 	Loss: 1.352918
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 51.66, "epoch": 5}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 99.89, "epoch": 5}
Train Epoch: 6 	Loss: 1.326671
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 52.46, "epoch": 6}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 99.9, "epoch": 6}
Train Epoch: 7 	Loss: 1.303678
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 53.37, "epoch": 7}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 99.33, "epoch": 7}
Train Epoch: 8 	Loss: 1.285432
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 53.78, "epoch": 8}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 99.6, "epoch": 8}
Train Epoch: 9 	Loss: 1.270069
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 54.25, "epoch": 9}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 99.23, "epoch": 9}
Train Epoch: 10 	Loss: 1.256926
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 54.83, "epoch": 10}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 99.73, "epoch": 10}
Train Epoch: 11 	Loss: 1.245069
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 55.05, "epoch": 11}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 99.98, "epoch": 11}
Train Epoch: 12 	Loss: 1.233552
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 55.46, "epoch": 12}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 99.99, "epoch": 12}
Train Epoch: 13 	Loss: 1.225794
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 55.69, "epoch": 13}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 13}
Train Epoch: 14 	Loss: 1.212736
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 56.13, "epoch": 14}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 14}
Train Epoch: 15 	Loss: 1.204593
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 56.37, "epoch": 15}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 15}
Train Epoch: 16 	Loss: 1.196343
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 56.5, "epoch": 16}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 16}
Train Epoch: 17 	Loss: 1.189281
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 56.81, "epoch": 17}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 17}
Train Epoch: 18 	Loss: 1.180878
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 57.09, "epoch": 18}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 18}
Train Epoch: 19 	Loss: 1.174164
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 57.33, "epoch": 19}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 19}
Train Epoch: 20 	Loss: 1.168209
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 57.7, "epoch": 20}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 20}
Train Epoch: 21 	Loss: 1.160983
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 57.75, "epoch": 21}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 21}
Train Epoch: 22 	Loss: 1.156168
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 58.09, "epoch": 22}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 22}
Train Epoch: 23 	Loss: 1.147706
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 58.16, "epoch": 23}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 23}
Train Epoch: 24 	Loss: 1.143638
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 58.52, "epoch": 24}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 24}
Train Epoch: 25 	Loss: 1.137405
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 58.76, "epoch": 25}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 25}
Train Epoch: 26 	Loss: 1.134122
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 58.92, "epoch": 26}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 26}
Train Epoch: 27 	Loss: 1.128396
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 58.93, "epoch": 27}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 27}
Train Epoch: 28 	Loss: 1.123256
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 59.07, "epoch": 28}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 28}
Train Epoch: 29 	Loss: 1.119866
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 59.18, "epoch": 29}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 29}
Train Epoch: 30 	Loss: 1.114679
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 59.4, "epoch": 30}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 30}
Train Epoch: 31 	Loss: 1.110231
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 59.55, "epoch": 31}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 31}
Train Epoch: 32 	Loss: 1.106444
