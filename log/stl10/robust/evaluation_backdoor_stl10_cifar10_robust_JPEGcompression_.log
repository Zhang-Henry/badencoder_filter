/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
当前时间： 2024-01-07 16:09:54
当前时间： 2024-01-07 16:09:55
test_transform_stl10_JPEGcompression
Loaded from: ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/model_200.pth
Namespace(batch_size=32, color=0.0, data_dir='./data/stl10/', encoder_usage_info='stl10', epochs=200, gpu='1', hue_hsv=1, knn_k=200, knn_t=0.5, lambda1=1.0, lambda2=1.0, lightness=1, loss0=20.0, lr=0.001, pretrained_encoder='./output/stl10/clean_encoder/model_1000.pth', pretraining_dataset='stl10', psnr=0.025, rand_init=False, reference_file='./reference/stl10/airplane.npz', reference_label=0, results_dir='./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/', saturation_hsv=1, seed=100, shadow_dataset='stl10', timestamp='2024-01-05-17:10:47', trigger_file='optimize_filter/trigger/stl10/2023-12-19-01-25-16/ssim0.9987_psnr42.79_lp0.0002_wd0.002_color4.971.pt', value_hsv=1)
{'loss': -20.951350208433887, 'wd': 0.0018064033534527916, 'ssim': 0.9964274972791708, 'psnr': 39.506030809253495, 'lp': 0.0005328581722628902, 'sim': -20.951350208433887, 'far': 0.0, 'color': 5.0124844556886625}
Predicting features
Feature extracting:   0%|          | 0/782 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/782 [00:04<52:09,  4.01s/it]Feature extracting:   2%|▏         | 16/782 [00:04<02:21,  5.40it/s]Feature extracting:   3%|▎         | 25/782 [00:04<01:22,  9.16it/s]Feature extracting:   4%|▍         | 33/782 [00:04<00:56, 13.26it/s]Feature extracting:   5%|▌         | 40/782 [00:04<00:42, 17.51it/s]Feature extracting:   6%|▌         | 47/782 [00:04<00:32, 22.40it/s]Feature extracting:   7%|▋         | 54/782 [00:04<00:26, 27.69it/s]Feature extracting:   8%|▊         | 61/782 [00:04<00:21, 33.12it/s]Feature extracting:   9%|▊         | 68/782 [00:04<00:18, 39.40it/s]Feature extracting:  10%|▉         | 77/782 [00:05<00:14, 48.81it/s]Feature extracting:  11%|█         | 86/782 [00:05<00:12, 57.35it/s]Feature extracting:  12%|█▏        | 95/782 [00:05<00:10, 64.23it/s]Feature extracting:  13%|█▎        | 104/782 [00:05<00:09, 69.84it/s]Feature extracting:  15%|█▍        | 114/782 [00:05<00:08, 76.03it/s]Feature extracting:  16%|█▌        | 123/782 [00:05<00:09, 71.96it/s]Feature extracting:  17%|█▋        | 131/782 [00:05<00:08, 72.50it/s]Feature extracting:  18%|█▊        | 139/782 [00:05<00:08, 73.45it/s]Feature extracting:  19%|█▉        | 148/782 [00:05<00:08, 76.60it/s]Feature extracting:  20%|█▉        | 156/782 [00:06<00:08, 73.43it/s]Feature extracting:  21%|██        | 164/782 [00:06<00:08, 71.49it/s]Feature extracting:  22%|██▏       | 172/782 [00:06<00:08, 68.57it/s]Feature extracting:  23%|██▎       | 179/782 [00:06<00:09, 66.58it/s]Feature extracting:  24%|██▍       | 186/782 [00:06<00:09, 65.47it/s]Feature extracting:  25%|██▍       | 193/782 [00:06<00:09, 64.98it/s]Feature extracting:  26%|██▌       | 200/782 [00:06<00:09, 63.78it/s]Feature extracting:  26%|██▋       | 207/782 [00:06<00:09, 63.49it/s]Feature extracting:  27%|██▋       | 214/782 [00:06<00:09, 62.99it/s]Feature extracting:  28%|██▊       | 221/782 [00:07<00:08, 62.49it/s]Feature extracting:  29%|██▉       | 228/782 [00:07<00:08, 64.01it/s]Feature extracting:  30%|███       | 236/782 [00:07<00:07, 68.29it/s]Feature extracting:  31%|███▏      | 245/782 [00:07<00:07, 72.33it/s]Feature extracting:  32%|███▏      | 254/782 [00:07<00:07, 75.10it/s]Feature extracting:  34%|███▎      | 263/782 [00:07<00:06, 76.98it/s]Feature extracting:  35%|███▍      | 272/782 [00:07<00:06, 75.74it/s]Feature extracting:  37%|███▋      | 289/782 [00:07<00:04, 100.24it/s]Feature extracting:  39%|███▉      | 304/782 [00:07<00:04, 112.69it/s]Feature extracting:  41%|████      | 318/782 [00:08<00:03, 120.19it/s]Feature extracting:  43%|████▎     | 333/782 [00:08<00:03, 126.22it/s]Feature extracting:  45%|████▍     | 348/782 [00:08<00:03, 130.41it/s]Feature extracting:  46%|████▋     | 362/782 [00:08<00:03, 131.83it/s]Feature extracting:  48%|████▊     | 376/782 [00:08<00:03, 132.09it/s]Feature extracting:  50%|████▉     | 390/782 [00:08<00:02, 133.66it/s]Feature extracting:  52%|█████▏    | 404/782 [00:08<00:02, 135.05it/s]Feature extracting:  53%|█████▎    | 418/782 [00:08<00:02, 135.61it/s]Feature extracting:  55%|█████▌    | 432/782 [00:08<00:02, 136.29it/s]Feature extracting:  57%|█████▋    | 447/782 [00:09<00:02, 138.38it/s]Feature extracting:  59%|█████▉    | 461/782 [00:09<00:02, 134.11it/s]Feature extracting:  61%|██████    | 475/782 [00:09<00:02, 114.12it/s]Feature extracting:  62%|██████▏   | 487/782 [00:09<00:02, 100.75it/s]Feature extracting:  64%|██████▎   | 498/782 [00:09<00:03, 93.80it/s] Feature extracting:  65%|██████▍   | 508/782 [00:09<00:03, 90.84it/s]Feature extracting:  66%|██████▌   | 518/782 [00:09<00:03, 84.38it/s]Feature extracting:  67%|██████▋   | 527/782 [00:10<00:03, 74.30it/s]Feature extracting:  68%|██████▊   | 535/782 [00:10<00:03, 68.52it/s]Feature extracting:  69%|██████▉   | 543/782 [00:10<00:03, 64.22it/s]Feature extracting:  70%|███████   | 550/782 [00:10<00:03, 62.09it/s]Feature extracting:  71%|███████   | 557/782 [00:10<00:03, 60.46it/s]Feature extracting:  72%|███████▏  | 564/782 [00:10<00:03, 58.94it/s]Feature extracting:  73%|███████▎  | 574/782 [00:10<00:03, 66.98it/s]Feature extracting:  74%|███████▍  | 581/782 [00:10<00:03, 65.49it/s]Feature extracting:  75%|███████▌  | 588/782 [00:11<00:03, 62.10it/s]Feature extracting:  76%|███████▌  | 595/782 [00:11<00:03, 59.96it/s]Feature extracting:  77%|███████▋  | 602/782 [00:11<00:03, 58.49it/s]Feature extracting:  78%|███████▊  | 608/782 [00:11<00:03, 57.41it/s]Feature extracting:  79%|███████▊  | 614/782 [00:11<00:02, 57.01it/s]Feature extracting:  79%|███████▉  | 620/782 [00:11<00:02, 56.21it/s]Feature extracting:  80%|████████  | 626/782 [00:11<00:02, 55.88it/s]Feature extracting:  81%|████████  | 632/782 [00:11<00:02, 55.58it/s]Feature extracting:  82%|████████▏ | 638/782 [00:11<00:02, 55.60it/s]Feature extracting:  82%|████████▏ | 644/782 [00:12<00:02, 56.61it/s]Feature extracting:  83%|████████▎ | 650/782 [00:12<00:02, 56.56it/s]Feature extracting:  84%|████████▍ | 656/782 [00:12<00:02, 56.77it/s]Feature extracting:  85%|████████▍ | 662/782 [00:12<00:02, 56.99it/s]Feature extracting:  85%|████████▌ | 668/782 [00:12<00:02, 56.86it/s]Feature extracting:  86%|████████▌ | 674/782 [00:12<00:01, 57.25it/s]Feature extracting:  87%|████████▋ | 680/782 [00:12<00:01, 56.97it/s]Feature extracting:  88%|████████▊ | 686/782 [00:12<00:01, 57.03it/s]Feature extracting:  88%|████████▊ | 692/782 [00:12<00:01, 56.98it/s]Feature extracting:  89%|████████▉ | 698/782 [00:12<00:01, 56.89it/s]Feature extracting:  90%|█████████ | 704/782 [00:13<00:01, 57.22it/s]Feature extracting:  91%|█████████ | 710/782 [00:13<00:01, 56.90it/s]Feature extracting:  92%|█████████▏| 716/782 [00:13<00:01, 56.97it/s]Feature extracting:  92%|█████████▏| 722/782 [00:13<00:01, 56.96it/s]Feature extracting:  93%|█████████▎| 728/782 [00:13<00:00, 57.60it/s]Feature extracting:  94%|█████████▍| 736/782 [00:13<00:00, 61.60it/s]Feature extracting:  95%|█████████▌| 744/782 [00:13<00:00, 64.84it/s]Feature extracting:  96%|█████████▌| 752/782 [00:13<00:00, 68.50it/s]Feature extracting:  97%|█████████▋| 761/782 [00:13<00:00, 74.47it/s]Feature extracting:  98%|█████████▊| 770/782 [00:14<00:00, 78.93it/s]Feature extracting:  99%|█████████▉| 778/782 [00:14<00:00, 78.92it/s]Feature extracting: 100%|██████████| 782/782 [00:14<00:00, 54.28it/s]
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<00:54,  2.85it/s]Feature extracting:  11%|█▏        | 18/157 [00:00<00:02, 50.66it/s]Feature extracting:  18%|█▊        | 28/157 [00:00<00:02, 61.58it/s]Feature extracting:  24%|██▍       | 38/157 [00:00<00:01, 68.15it/s]Feature extracting:  30%|██▉       | 47/157 [00:00<00:01, 71.48it/s]Feature extracting:  36%|███▌      | 56/157 [00:00<00:01, 66.15it/s]Feature extracting:  41%|████      | 64/157 [00:01<00:01, 61.83it/s]Feature extracting:  45%|████▌     | 71/157 [00:01<00:01, 59.13it/s]Feature extracting:  50%|████▉     | 78/157 [00:01<00:01, 57.28it/s]Feature extracting:  54%|█████▎    | 84/157 [00:01<00:01, 56.10it/s]Feature extracting:  57%|█████▋    | 90/157 [00:01<00:01, 55.20it/s]Feature extracting:  61%|██████    | 96/157 [00:01<00:01, 54.74it/s]Feature extracting:  65%|██████▍   | 102/157 [00:01<00:01, 54.27it/s]Feature extracting:  69%|██████▉   | 108/157 [00:01<00:00, 54.16it/s]Feature extracting:  73%|███████▎  | 114/157 [00:02<00:00, 54.07it/s]Feature extracting:  76%|███████▋  | 120/157 [00:02<00:00, 53.96it/s]Feature extracting:  80%|████████  | 126/157 [00:02<00:00, 53.63it/s]Feature extracting:  84%|████████▍ | 132/157 [00:02<00:00, 53.42it/s]Feature extracting:  88%|████████▊ | 138/157 [00:02<00:00, 53.28it/s]Feature extracting:  92%|█████████▏| 144/157 [00:02<00:00, 53.14it/s]Feature extracting:  96%|█████████▌| 150/157 [00:02<00:00, 53.08it/s]Feature extracting:  99%|█████████▉| 156/157 [00:02<00:00, 53.01it/s]Feature extracting: 100%|██████████| 157/157 [00:02<00:00, 53.39it/s]
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:07,  2.30it/s]Feature extracting:   3%|▎         | 5/157 [00:00<00:13, 10.95it/s]Feature extracting:   6%|▌         | 9/157 [00:00<00:08, 17.24it/s]Feature extracting:   8%|▊         | 13/157 [00:00<00:06, 21.95it/s]Feature extracting:  11%|█         | 17/157 [00:00<00:05, 25.57it/s]Feature extracting:  13%|█▎        | 21/157 [00:01<00:04, 28.11it/s]Feature extracting:  16%|█▌        | 25/157 [00:01<00:04, 29.98it/s]Feature extracting:  18%|█▊        | 29/157 [00:01<00:04, 31.31it/s]Feature extracting:  21%|██        | 33/157 [00:01<00:03, 32.19it/s]Feature extracting:  24%|██▎       | 37/157 [00:01<00:03, 32.76it/s]Feature extracting:  26%|██▌       | 41/157 [00:01<00:03, 33.10it/s]Feature extracting:  29%|██▊       | 45/157 [00:01<00:03, 33.38it/s]Feature extracting:  31%|███       | 49/157 [00:01<00:03, 33.78it/s]Feature extracting:  34%|███▍      | 53/157 [00:01<00:03, 33.71it/s]Feature extracting:  36%|███▋      | 57/157 [00:02<00:02, 33.88it/s]Feature extracting:  39%|███▉      | 61/157 [00:02<00:02, 33.89it/s]Feature extracting:  41%|████▏     | 65/157 [00:02<00:02, 34.01it/s]Feature extracting:  44%|████▍     | 69/157 [00:02<00:02, 33.84it/s]Feature extracting:  46%|████▋     | 73/157 [00:02<00:02, 34.10it/s]Feature extracting:  49%|████▉     | 77/157 [00:02<00:02, 34.06it/s]Feature extracting:  52%|█████▏    | 81/157 [00:02<00:02, 34.26it/s]Feature extracting:  54%|█████▍    | 85/157 [00:02<00:02, 35.65it/s]Feature extracting:  57%|█████▋    | 90/157 [00:02<00:01, 39.56it/s]Feature extracting:  61%|██████    | 96/157 [00:03<00:01, 44.23it/s]Feature extracting:  65%|██████▍   | 102/157 [00:03<00:01, 48.20it/s]Feature extracting:  69%|██████▉   | 109/157 [00:03<00:00, 51.68it/s]Feature extracting:  73%|███████▎  | 115/157 [00:03<00:00, 53.18it/s]Feature extracting:  77%|███████▋  | 121/157 [00:03<00:00, 52.79it/s]Feature extracting:  81%|████████  | 127/157 [00:03<00:00, 47.60it/s]Feature extracting:  84%|████████▍ | 132/157 [00:03<00:00, 43.74it/s]Feature extracting:  87%|████████▋ | 137/157 [00:03<00:00, 42.08it/s]Feature extracting:  90%|█████████ | 142/157 [00:04<00:00, 40.38it/s]Feature extracting:  94%|█████████▎| 147/157 [00:04<00:00, 39.40it/s]Feature extracting:  96%|█████████▌| 151/157 [00:04<00:00, 38.90it/s]Feature extracting:  99%|█████████▊| 155/157 [00:04<00:00, 38.21it/s]Feature extracting: 100%|██████████| 157/157 [00:04<00:00, 33.96it/s]
Feature extracting:   0%|          | 0/1 [00:00<?, ?it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  2.40it/s]
feature banks saved to ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:10:47/feature_banks.pkl
Train Epoch: 1 	Loss: 1.588766
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 57.6, "epoch": 1}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 1}
Train Epoch: 2 	Loss: 1.120848
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 61.75, "epoch": 2}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 2}
Train Epoch: 3 	Loss: 1.043792
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.53, "epoch": 3}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 3}
Train Epoch: 4 	Loss: 0.995979
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.93, "epoch": 4}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 4}
Train Epoch: 5 	Loss: 0.964393
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.02, "epoch": 5}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 5}
Train Epoch: 6 	Loss: 0.937089
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.0, "epoch": 6}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 6}
Train Epoch: 7 	Loss: 0.914858
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.56, "epoch": 7}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 7}
Train Epoch: 8 	Loss: 0.894089
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.97, "epoch": 8}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 8}
Train Epoch: 9 	Loss: 0.876266
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.5, "epoch": 9}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 9}
Train Epoch: 10 	Loss: 0.863038
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.84, "epoch": 10}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 10}
Train Epoch: 11 	Loss: 0.848566
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.49, "epoch": 11}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 11}
Train Epoch: 12 	Loss: 0.836623
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.64, "epoch": 12}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 12}
Train Epoch: 13 	Loss: 0.825622
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.1, "epoch": 13}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 13}
Train Epoch: 14 	Loss: 0.815627
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.57, "epoch": 14}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 14}
Train Epoch: 15 	Loss: 0.805898
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.91, "epoch": 15}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 15}
Train Epoch: 16 	Loss: 0.797730
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 71.07, "epoch": 16}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 16}
Train Epoch: 17 	Loss: 0.789363
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 71.6, "epoch": 17}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 17}
Train Epoch: 18 	Loss: 0.782768
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 71.75, "epoch": 18}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 18}
Train Epoch: 19 	Loss: 0.775673
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 71.95, "epoch": 19}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 19}
Train Epoch: 20 	Loss: 0.766948
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 72.23, "epoch": 20}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 20}
Train Epoch: 21 	Loss: 0.762481
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 72.34, "epoch": 21}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 21}
Train Epoch: 22 	Loss: 0.757189
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 72.46, "epoch": 22}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 22}
Train Epoch: 23 	Loss: 0.750833
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 72.78, "epoch": 23}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 23}
Train Epoch: 24 	Loss: 0.748081
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 72.93, "epoch": 24}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 24}
Train Epoch: 25 	Loss: 0.741545
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.06, "epoch": 25}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 25}
Train Epoch: 26 	Loss: 0.735684
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.11, "epoch": 26}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 26}
Train Epoch: 27 	Loss: 0.731448
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.22, "epoch": 27}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 27}
Train Epoch: 28 	Loss: 0.725847
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.18, "epoch": 28}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 28}
Train Epoch: 29 	Loss: 0.724152
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.35, "epoch": 29}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 29}
Train Epoch: 30 	Loss: 0.720335
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.36, "epoch": 30}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 30}
Train Epoch: 31 	Loss: 0.714222
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.33, "epoch": 31}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 31}
