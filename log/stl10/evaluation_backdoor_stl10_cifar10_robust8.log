randomJPEGcompression
randomJPEGcompression
randomJPEGcompression
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
当前时间： 2024-01-06 19:57:15
当前时间： 2024-01-06 19:57:16
test_transform_stl10
Loaded from: ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:08:16/model_200.pth
Namespace(batch_size=128, color=0.3, data_dir='./data/stl10/', encoder_usage_info='stl10', epochs=200, gpu='2', hue_hsv=1, knn_k=200, knn_t=0.5, lambda1=1.0, lambda2=1.0, lightness=1, loss0=20.0, lr=0.001, pretrained_encoder='./output/stl10/clean_encoder/model_1000.pth', pretraining_dataset='stl10', psnr=0.025, rand_init=False, reference_file='./reference/stl10/airplane.npz', reference_label=0, results_dir='./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:08:16/', saturation_hsv=1, seed=100, shadow_dataset='stl10', timestamp='2024-01-05-17:08:16', trigger_file='optimize_filter/trigger/stl10/2023-12-06-23-41-58/ssim0.9053_psnr21.80_lp0.0274_wd0.716_color9.494.pt', value_hsv=1)
{'loss': -22.915305616916754, 'wd': 0.038286269097947155, 'ssim': 0.9650022419599387, 'psnr': 26.694296631446253, 'lp': 0.00797073964554912, 'sim': -20.483394339145757, 'far': 2.4319112964165517, 'color': 8.106370653250279}
Predicting features
Feature extracting:   0%|          | 0/782 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/782 [00:04<56:54,  4.37s/it]Feature extracting:   2%|▏         | 16/782 [00:04<02:34,  4.95it/s]Feature extracting:   3%|▎         | 25/782 [00:04<01:30,  8.39it/s]Feature extracting:   4%|▍         | 32/782 [00:04<01:04, 11.71it/s]Feature extracting:   5%|▍         | 39/782 [00:04<00:47, 15.75it/s]Feature extracting:   6%|▌         | 46/782 [00:05<00:36, 20.38it/s]Feature extracting:   7%|▋         | 52/782 [00:05<00:29, 24.73it/s]Feature extracting:   7%|▋         | 58/782 [00:05<00:24, 29.21it/s]Feature extracting:   8%|▊         | 64/782 [00:05<00:21, 34.04it/s]Feature extracting:   9%|▉         | 70/782 [00:05<00:18, 38.95it/s]Feature extracting:  10%|▉         | 76/782 [00:05<00:16, 43.25it/s]Feature extracting:  10%|█         | 82/782 [00:05<00:14, 47.06it/s]Feature extracting:  11%|█▏        | 88/782 [00:05<00:13, 50.24it/s]Feature extracting:  12%|█▏        | 95/782 [00:05<00:12, 53.59it/s]Feature extracting:  13%|█▎        | 104/782 [00:05<00:11, 61.31it/s]Feature extracting:  14%|█▍        | 113/782 [00:06<00:09, 68.76it/s]Feature extracting:  16%|█▌        | 122/782 [00:06<00:08, 74.15it/s]Feature extracting:  17%|█▋        | 131/782 [00:06<00:08, 77.87it/s]Feature extracting:  18%|█▊        | 140/782 [00:06<00:08, 80.02it/s]Feature extracting:  19%|█▉        | 149/782 [00:06<00:07, 81.47it/s]Feature extracting:  20%|██        | 158/782 [00:06<00:07, 83.14it/s]Feature extracting:  21%|██▏       | 167/782 [00:06<00:07, 84.43it/s]Feature extracting:  23%|██▎       | 176/782 [00:06<00:07, 84.55it/s]Feature extracting:  24%|██▎       | 185/782 [00:06<00:07, 84.64it/s]Feature extracting:  25%|██▍       | 194/782 [00:07<00:06, 84.98it/s]Feature extracting:  26%|██▌       | 203/782 [00:07<00:06, 85.61it/s]Feature extracting:  27%|██▋       | 212/782 [00:07<00:06, 85.86it/s]Feature extracting:  28%|██▊       | 221/782 [00:07<00:06, 85.93it/s]Feature extracting:  29%|██▉       | 230/782 [00:07<00:06, 86.15it/s]Feature extracting:  31%|███       | 239/782 [00:07<00:06, 85.98it/s]Feature extracting:  32%|███▏      | 248/782 [00:07<00:06, 87.15it/s]Feature extracting:  33%|███▎      | 257/782 [00:07<00:06, 87.36it/s]Feature extracting:  34%|███▍      | 268/782 [00:07<00:05, 93.95it/s]Feature extracting:  36%|███▌      | 279/782 [00:07<00:05, 96.14it/s]Feature extracting:  37%|███▋      | 289/782 [00:08<00:05, 97.25it/s]Feature extracting:  38%|███▊      | 299/782 [00:08<00:05, 95.13it/s]Feature extracting:  40%|███▉      | 309/782 [00:08<00:05, 94.19it/s]Feature extracting:  41%|████      | 319/782 [00:08<00:04, 94.18it/s]Feature extracting:  42%|████▏     | 329/782 [00:08<00:04, 95.40it/s]Feature extracting:  43%|████▎     | 339/782 [00:08<00:04, 95.57it/s]Feature extracting:  45%|████▍     | 349/782 [00:08<00:04, 91.00it/s]Feature extracting:  46%|████▌     | 359/782 [00:08<00:04, 87.97it/s]Feature extracting:  47%|████▋     | 368/782 [00:08<00:04, 86.63it/s]Feature extracting:  48%|████▊     | 377/782 [00:09<00:04, 85.36it/s]Feature extracting:  49%|████▉     | 386/782 [00:09<00:04, 85.89it/s]Feature extracting:  51%|█████     | 395/782 [00:09<00:04, 86.05it/s]Feature extracting:  52%|█████▏    | 404/782 [00:09<00:04, 85.92it/s]Feature extracting:  53%|█████▎    | 413/782 [00:09<00:04, 86.68it/s]Feature extracting:  54%|█████▍    | 422/782 [00:09<00:04, 83.72it/s]Feature extracting:  55%|█████▌    | 431/782 [00:09<00:04, 75.05it/s]Feature extracting:  56%|█████▌    | 439/782 [00:09<00:04, 69.42it/s]Feature extracting:  57%|█████▋    | 447/782 [00:09<00:05, 65.08it/s]Feature extracting:  58%|█████▊    | 454/782 [00:10<00:05, 63.22it/s]Feature extracting:  59%|█████▉    | 461/782 [00:10<00:05, 61.27it/s]Feature extracting:  60%|█████▉    | 468/782 [00:10<00:05, 60.00it/s]Feature extracting:  61%|██████    | 475/782 [00:10<00:05, 58.96it/s]Feature extracting:  62%|██████▏   | 481/782 [00:10<00:05, 58.41it/s]Feature extracting:  62%|██████▏   | 487/782 [00:10<00:05, 57.98it/s]Feature extracting:  63%|██████▎   | 493/782 [00:10<00:04, 57.82it/s]Feature extracting:  64%|██████▍   | 499/782 [00:10<00:04, 57.62it/s]Feature extracting:  65%|██████▍   | 505/782 [00:11<00:04, 57.30it/s]Feature extracting:  65%|██████▌   | 511/782 [00:11<00:04, 57.14it/s]Feature extracting:  66%|██████▌   | 517/782 [00:11<00:04, 56.91it/s]Feature extracting:  67%|██████▋   | 523/782 [00:11<00:04, 57.02it/s]Feature extracting:  68%|██████▊   | 530/782 [00:11<00:04, 57.91it/s]Feature extracting:  69%|██████▊   | 537/782 [00:11<00:04, 58.51it/s]Feature extracting:  70%|██████▉   | 544/782 [00:11<00:04, 59.11it/s]Feature extracting:  70%|███████   | 551/782 [00:11<00:03, 59.46it/s]Feature extracting:  71%|███████   | 557/782 [00:11<00:03, 59.33it/s]Feature extracting:  72%|███████▏  | 564/782 [00:12<00:03, 59.83it/s]Feature extracting:  73%|███████▎  | 571/782 [00:12<00:03, 60.84it/s]Feature extracting:  74%|███████▍  | 578/782 [00:12<00:03, 61.66it/s]Feature extracting:  75%|███████▍  | 585/782 [00:12<00:03, 62.02it/s]Feature extracting:  76%|███████▌  | 592/782 [00:12<00:03, 62.22it/s]Feature extracting:  77%|███████▋  | 600/782 [00:12<00:02, 66.10it/s]Feature extracting:  78%|███████▊  | 609/782 [00:12<00:02, 70.89it/s]Feature extracting:  79%|███████▉  | 618/782 [00:12<00:02, 74.44it/s]Feature extracting:  80%|████████  | 627/782 [00:12<00:02, 77.19it/s]Feature extracting:  81%|████████▏ | 636/782 [00:12<00:01, 80.27it/s]Feature extracting:  82%|████████▏ | 645/782 [00:13<00:01, 82.91it/s]Feature extracting:  84%|████████▍ | 655/782 [00:13<00:01, 86.60it/s]Feature extracting:  85%|████████▌ | 666/782 [00:13<00:01, 91.42it/s]Feature extracting:  86%|████████▋ | 676/782 [00:13<00:01, 92.46it/s]Feature extracting:  88%|████████▊ | 686/782 [00:13<00:01, 94.11it/s]Feature extracting:  89%|████████▉ | 698/782 [00:13<00:00, 99.13it/s]Feature extracting:  91%|█████████ | 708/782 [00:13<00:00, 97.83it/s]Feature extracting:  92%|█████████▏| 718/782 [00:13<00:00, 97.00it/s]Feature extracting:  93%|█████████▎| 728/782 [00:13<00:00, 95.65it/s]Feature extracting:  94%|█████████▍| 738/782 [00:14<00:00, 94.35it/s]Feature extracting:  96%|█████████▌| 750/782 [00:14<00:00, 99.64it/s]Feature extracting:  97%|█████████▋| 761/782 [00:14<00:00, 100.21it/s]Feature extracting:  99%|█████████▊| 772/782 [00:14<00:00, 98.92it/s] Feature extracting: 100%|██████████| 782/782 [00:14<00:00, 67.36it/s]Feature extracting: 100%|██████████| 782/782 [00:14<00:00, 53.19it/s]
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:01,  2.52it/s]Feature extracting:  10%|█         | 16/157 [00:00<00:03, 41.33it/s]Feature extracting:  18%|█▊        | 29/157 [00:00<00:01, 64.33it/s]Feature extracting:  25%|██▌       | 40/157 [00:00<00:01, 71.88it/s]Feature extracting:  32%|███▏      | 50/157 [00:00<00:01, 74.56it/s]Feature extracting:  38%|███▊      | 60/157 [00:00<00:01, 76.59it/s]Feature extracting:  44%|████▍     | 69/157 [00:01<00:01, 78.38it/s]Feature extracting:  50%|████▉     | 78/157 [00:01<00:00, 79.29it/s]Feature extracting:  55%|█████▌    | 87/157 [00:01<00:00, 80.33it/s]Feature extracting:  61%|██████    | 96/157 [00:01<00:00, 79.44it/s]Feature extracting:  67%|██████▋   | 105/157 [00:01<00:00, 77.99it/s]Feature extracting:  72%|███████▏  | 113/157 [00:01<00:00, 78.14it/s]Feature extracting:  77%|███████▋  | 121/157 [00:01<00:00, 77.56it/s]Feature extracting:  82%|████████▏ | 129/157 [00:01<00:00, 76.95it/s]Feature extracting:  87%|████████▋ | 137/157 [00:01<00:00, 76.92it/s]Feature extracting:  92%|█████████▏| 145/157 [00:02<00:00, 77.25it/s]Feature extracting:  98%|█████████▊| 154/157 [00:02<00:00, 77.86it/s]Feature extracting: 100%|██████████| 157/157 [00:02<00:00, 68.42it/s]
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:26,  1.80it/s]Feature extracting:   6%|▋         | 10/157 [00:00<00:07, 19.60it/s]Feature extracting:  12%|█▏        | 19/157 [00:00<00:03, 35.33it/s]Feature extracting:  18%|█▊        | 28/157 [00:00<00:02, 48.14it/s]Feature extracting:  24%|██▎       | 37/157 [00:00<00:02, 57.83it/s]Feature extracting:  29%|██▉       | 46/157 [00:01<00:01, 66.24it/s]Feature extracting:  36%|███▌      | 56/157 [00:01<00:01, 74.24it/s]Feature extracting:  42%|████▏     | 66/157 [00:01<00:01, 80.30it/s]Feature extracting:  49%|████▉     | 77/157 [00:01<00:00, 86.93it/s]Feature extracting:  56%|█████▌    | 88/157 [00:01<00:00, 93.15it/s]Feature extracting:  64%|██████▎   | 100/157 [00:01<00:00, 99.39it/s]Feature extracting:  71%|███████   | 111/157 [00:01<00:00, 102.14it/s]Feature extracting:  78%|███████▊  | 122/157 [00:01<00:00, 102.52it/s]Feature extracting:  85%|████████▍ | 133/157 [00:01<00:00, 101.00it/s]Feature extracting:  92%|█████████▏| 144/157 [00:02<00:00, 98.07it/s] Feature extracting:  99%|█████████▊| 155/157 [00:02<00:00, 98.96it/s]Feature extracting: 100%|██████████| 157/157 [00:02<00:00, 68.36it/s]
Feature extracting:   0%|          | 0/1 [00:00<?, ?it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.85it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.65it/s]
feature banks saved to ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:08:16/feature_banks.pkl
Train Epoch: 1 	Loss: 1.487440
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 63.79, "epoch": 1}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 1}
Train Epoch: 2 	Loss: 0.976765
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.99, "epoch": 2}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 2}
Train Epoch: 3 	Loss: 0.897111
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.74, "epoch": 3}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 3}
Train Epoch: 4 	Loss: 0.850227
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.78, "epoch": 4}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 4}
Train Epoch: 5 	Loss: 0.817360
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 71.61, "epoch": 5}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 5}
Train Epoch: 6 	Loss: 0.798218
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 72.2, "epoch": 6}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 6}
Train Epoch: 7 	Loss: 0.775063
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 72.88, "epoch": 7}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 7}
Train Epoch: 8 	Loss: 0.759597
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.26, "epoch": 8}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 8}
Train Epoch: 9 	Loss: 0.746499
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.48, "epoch": 9}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 9}
Train Epoch: 10 	Loss: 0.734244
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.75, "epoch": 10}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 10}
Train Epoch: 11 	Loss: 0.724135
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 74.1, "epoch": 11}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 11}
Train Epoch: 12 	Loss: 0.715358
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 74.43, "epoch": 12}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 12}
Train Epoch: 13 	Loss: 0.706950
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 74.64, "epoch": 13}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 13}
Train Epoch: 14 	Loss: 0.697685
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 74.6, "epoch": 14}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 14}
Train Epoch: 15 	Loss: 0.689385
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 74.71, "epoch": 15}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 15}
Train Epoch: 16 	Loss: 0.682166
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 75.0, "epoch": 16}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 16}
Train Epoch: 17 	Loss: 0.676337
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 75.08, "epoch": 17}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 17}
Train Epoch: 18 	Loss: 0.670663
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 75.22, "epoch": 18}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 18}
Train Epoch: 19 	Loss: 0.662908
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 75.45, "epoch": 19}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 19}
Train Epoch: 20 	Loss: 0.660494
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 75.65, "epoch": 20}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 20}
Train Epoch: 21 	Loss: 0.651418
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 75.79, "epoch": 21}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 21}
Train Epoch: 22 	Loss: 0.647807
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 75.97, "epoch": 22}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 22}
Train Epoch: 23 	Loss: 0.642173
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.12, "epoch": 23}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 23}
Train Epoch: 24 	Loss: 0.636945
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.22, "epoch": 24}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 24}
Train Epoch: 25 	Loss: 0.632337
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.46, "epoch": 25}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 25}
Train Epoch: 26 	Loss: 0.628754
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.46, "epoch": 26}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 26}
Train Epoch: 27 	Loss: 0.625297
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.51, "epoch": 27}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 27}
Train Epoch: 28 	Loss: 0.617463
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.66, "epoch": 28}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 28}
Train Epoch: 29 	Loss: 0.614858
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.74, "epoch": 29}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 29}
Train Epoch: 30 	Loss: 0.611747
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.91, "epoch": 30}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 30}
Train Epoch: 31 	Loss: 0.605837
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 76.94, "epoch": 31}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 31}
Train Epoch: 32 	Loss: 0.601114
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.03, "epoch": 32}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 32}
Train Epoch: 33 	Loss: 0.598387
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.05, "epoch": 33}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 33}
Train Epoch: 34 	Loss: 0.594468
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.2, "epoch": 34}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 34}
Train Epoch: 35 	Loss: 0.591591
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.17, "epoch": 35}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 35}
Train Epoch: 36 	Loss: 0.587099
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.3, "epoch": 36}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 36}
Train Epoch: 37 	Loss: 0.584310
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.46, "epoch": 37}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 37}
Train Epoch: 38 	Loss: 0.578018
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.39, "epoch": 38}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 38}
Train Epoch: 39 	Loss: 0.575715
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.46, "epoch": 39}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 39}
Train Epoch: 40 	Loss: 0.571634
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.55, "epoch": 40}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 40}
Train Epoch: 41 	Loss: 0.569033
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.84, "epoch": 41}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 41}
Train Epoch: 42 	Loss: 0.564262
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.74, "epoch": 42}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 42}
Train Epoch: 43 	Loss: 0.563392
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.97, "epoch": 43}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 43}
Train Epoch: 44 	Loss: 0.555953
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.96, "epoch": 44}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 44}
Train Epoch: 45 	Loss: 0.552859
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 77.98, "epoch": 45}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 45}
Train Epoch: 46 	Loss: 0.550105
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 78.21, "epoch": 46}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 46}
Train Epoch: 47 	Loss: 0.546127
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 78.14, "epoch": 47}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 47}
Train Epoch: 48 	Loss: 0.544566
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 78.27, "epoch": 48}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 48}
