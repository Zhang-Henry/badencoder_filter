transforms.GaussianBlur(kernel_size=7)
transforms.GaussianBlur(kernel_size=7)
transforms.GaussianBlur(kernel_size=7)
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
当前时间： 2024-01-06 19:59:17
当前时间： 2024-01-06 19:59:18
test_transform_stl10
Loaded from: ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:08:16/model_200.pth
Namespace(batch_size=128, color=0.3, data_dir='./data/stl10/', encoder_usage_info='stl10', epochs=200, gpu='2', hue_hsv=1, knn_k=200, knn_t=0.5, lambda1=1.0, lambda2=1.0, lightness=1, loss0=20.0, lr=0.001, pretrained_encoder='./output/stl10/clean_encoder/model_1000.pth', pretraining_dataset='stl10', psnr=0.025, rand_init=False, reference_file='./reference/stl10/airplane.npz', reference_label=0, results_dir='./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:08:16/', saturation_hsv=1, seed=100, shadow_dataset='stl10', timestamp='2024-01-05-17:08:16', trigger_file='optimize_filter/trigger/stl10/2023-12-06-23-41-58/ssim0.9053_psnr21.80_lp0.0274_wd0.716_color9.494.pt', value_hsv=1)
{'loss': -22.915305616916754, 'wd': 0.038286269097947155, 'ssim': 0.9650022419599387, 'psnr': 26.694296631446253, 'lp': 0.00797073964554912, 'sim': -20.483394339145757, 'far': 2.4319112964165517, 'color': 8.106370653250279}
Predicting features
Feature extracting:   0%|          | 0/782 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/782 [00:02<34:05,  2.62s/it]Feature extracting:   2%|▏         | 15/782 [00:02<01:41,  7.59it/s]Feature extracting:   4%|▎         | 28/782 [00:02<00:47, 15.98it/s]Feature extracting:   5%|▍         | 39/782 [00:02<00:31, 23.63it/s]Feature extracting:   6%|▋         | 49/782 [00:03<00:23, 31.53it/s]Feature extracting:   8%|▊         | 59/782 [00:03<00:19, 37.98it/s]Feature extracting:   9%|▊         | 68/782 [00:03<00:19, 37.49it/s]Feature extracting:  10%|▉         | 75/782 [00:03<00:17, 40.50it/s]Feature extracting:  11%|█▏        | 89/782 [00:03<00:12, 56.88it/s]Feature extracting:  13%|█▎        | 99/782 [00:03<00:12, 56.19it/s]Feature extracting:  14%|█▍        | 111/782 [00:03<00:09, 68.16it/s]Feature extracting:  15%|█▌        | 121/782 [00:04<00:09, 73.16it/s]Feature extracting:  17%|█▋        | 131/782 [00:04<00:08, 77.55it/s]Feature extracting:  18%|█▊        | 144/782 [00:04<00:07, 90.32it/s]Feature extracting:  20%|█▉        | 155/782 [00:04<00:07, 84.43it/s]Feature extracting:  22%|██▏       | 169/782 [00:04<00:06, 97.99it/s]Feature extracting:  23%|██▎       | 180/782 [00:04<00:06, 88.80it/s]Feature extracting:  24%|██▍       | 191/782 [00:04<00:06, 93.81it/s]Feature extracting:  26%|██▌       | 202/782 [00:04<00:06, 91.73it/s]Feature extracting:  27%|██▋       | 212/782 [00:05<00:06, 91.11it/s]Feature extracting:  29%|██▊       | 223/782 [00:05<00:05, 95.37it/s]Feature extracting:  30%|███       | 235/782 [00:05<00:05, 91.86it/s]Feature extracting:  32%|███▏      | 249/782 [00:05<00:05, 104.22it/s]Feature extracting:  33%|███▎      | 260/782 [00:05<00:05, 94.08it/s] Feature extracting:  35%|███▌      | 274/782 [00:05<00:04, 105.14it/s]Feature extracting:  36%|███▋      | 285/782 [00:05<00:05, 96.80it/s] Feature extracting:  38%|███▊      | 298/782 [00:05<00:04, 105.13it/s]Feature extracting:  40%|███▉      | 309/782 [00:06<00:04, 96.46it/s] Feature extracting:  41%|████      | 322/782 [00:06<00:04, 104.28it/s]Feature extracting:  43%|████▎     | 333/782 [00:06<00:04, 95.70it/s] Feature extracting:  44%|████▍     | 347/782 [00:06<00:04, 101.53it/s]Feature extracting:  46%|████▌     | 358/782 [00:06<00:04, 97.00it/s] Feature extracting:  48%|████▊     | 372/782 [00:06<00:04, 96.81it/s]Feature extracting:  49%|████▉     | 382/782 [00:06<00:04, 94.26it/s]Feature extracting:  51%|█████     | 396/782 [00:06<00:03, 98.99it/s]Feature extracting:  53%|█████▎    | 411/782 [00:07<00:03, 111.51it/s]Feature extracting:  54%|█████▍    | 423/782 [00:07<00:03, 97.93it/s] Feature extracting:  56%|█████▌    | 436/782 [00:07<00:03, 91.62it/s]Feature extracting:  58%|█████▊    | 452/782 [00:07<00:03, 100.81it/s]Feature extracting:  59%|█████▉    | 464/782 [00:07<00:03, 105.31it/s]Feature extracting:  61%|██████    | 475/782 [00:07<00:03, 100.34it/s]Feature extracting:  62%|██████▏   | 486/782 [00:07<00:03, 93.04it/s] Feature extracting:  63%|██████▎   | 496/782 [00:07<00:03, 89.64it/s]Feature extracting:  65%|██████▍   | 507/782 [00:08<00:03, 87.90it/s]Feature extracting:  66%|██████▌   | 516/782 [00:08<00:03, 85.82it/s]Feature extracting:  67%|██████▋   | 525/782 [00:08<00:03, 84.46it/s]Feature extracting:  68%|██████▊   | 534/782 [00:08<00:03, 78.21it/s]Feature extracting:  69%|██████▉   | 543/782 [00:08<00:02, 80.93it/s]Feature extracting:  71%|███████   | 552/782 [00:08<00:03, 67.14it/s]Feature extracting:  72%|███████▏  | 560/782 [00:08<00:03, 69.17it/s]Feature extracting:  73%|███████▎  | 571/782 [00:08<00:02, 70.68it/s]Feature extracting:  75%|███████▍  | 586/782 [00:09<00:02, 88.73it/s]Feature extracting:  76%|███████▌  | 596/782 [00:09<00:02, 88.69it/s]Feature extracting:  78%|███████▊  | 610/782 [00:09<00:01, 101.77it/s]Feature extracting:  79%|███████▉  | 621/782 [00:09<00:01, 90.75it/s] Feature extracting:  81%|████████  | 635/782 [00:09<00:01, 88.25it/s]Feature extracting:  83%|████████▎ | 651/782 [00:09<00:01, 97.92it/s]Feature extracting:  85%|████████▍ | 662/782 [00:09<00:01, 98.73it/s]Feature extracting:  86%|████████▋ | 675/782 [00:10<00:01, 98.68it/s]Feature extracting:  88%|████████▊ | 688/782 [00:10<00:00, 106.37it/s]Feature extracting:  89%|████████▉ | 699/782 [00:10<00:00, 92.80it/s] Feature extracting:  91%|█████████ | 709/782 [00:10<00:00, 87.49it/s]Feature extracting:  92%|█████████▏| 720/782 [00:10<00:00, 92.91it/s]Feature extracting:  93%|█████████▎| 731/782 [00:10<00:00, 91.61it/s]Feature extracting:  95%|█████████▍| 741/782 [00:10<00:00, 86.51it/s]Feature extracting:  97%|█████████▋| 755/782 [00:10<00:00, 93.05it/s]Feature extracting:  98%|█████████▊| 768/782 [00:10<00:00, 101.56it/s]Feature extracting: 100%|█████████▉| 779/782 [00:11<00:00, 96.58it/s] Feature extracting: 100%|██████████| 782/782 [00:11<00:00, 68.99it/s]
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:00<01:24,  1.85it/s]Feature extracting:  10%|▉         | 15/157 [00:00<00:04, 30.44it/s]Feature extracting:  16%|█▌        | 25/157 [00:00<00:03, 42.58it/s]Feature extracting:  22%|██▏       | 35/157 [00:00<00:02, 53.36it/s]Feature extracting:  27%|██▋       | 43/157 [00:01<00:01, 57.95it/s]Feature extracting:  32%|███▏      | 51/157 [00:01<00:01, 63.36it/s]Feature extracting:  38%|███▊      | 59/157 [00:01<00:01, 65.71it/s]Feature extracting:  43%|████▎     | 67/157 [00:01<00:01, 65.63it/s]Feature extracting:  48%|████▊     | 75/157 [00:01<00:01, 65.25it/s]Feature extracting:  52%|█████▏    | 82/157 [00:01<00:01, 65.03it/s]Feature extracting:  57%|█████▋    | 89/157 [00:01<00:01, 65.65it/s]Feature extracting:  62%|██████▏   | 97/157 [00:01<00:00, 68.83it/s]Feature extracting:  67%|██████▋   | 105/157 [00:01<00:00, 69.07it/s]Feature extracting:  72%|███████▏  | 113/157 [00:02<00:00, 70.31it/s]Feature extracting:  77%|███████▋  | 121/157 [00:02<00:00, 70.62it/s]Feature extracting:  82%|████████▏ | 129/157 [00:02<00:00, 70.84it/s]Feature extracting:  87%|████████▋ | 137/157 [00:02<00:00, 71.19it/s]Feature extracting:  92%|█████████▏| 145/157 [00:02<00:00, 69.62it/s]Feature extracting:  97%|█████████▋| 152/157 [00:02<00:00, 69.04it/s]Feature extracting: 100%|██████████| 157/157 [00:02<00:00, 57.48it/s]
Feature extracting:   0%|          | 0/157 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/157 [00:01<02:37,  1.01s/it]Feature extracting:   3%|▎         | 5/157 [00:01<00:26,  5.83it/s]Feature extracting:   6%|▋         | 10/157 [00:01<00:12, 12.15it/s]Feature extracting:  10%|▉         | 15/157 [00:01<00:07, 18.10it/s]Feature extracting:  13%|█▎        | 20/157 [00:01<00:05, 24.23it/s]Feature extracting:  16%|█▌        | 25/157 [00:01<00:04, 28.96it/s]Feature extracting:  19%|█▉        | 30/157 [00:01<00:03, 32.28it/s]Feature extracting:  22%|██▏       | 35/157 [00:01<00:03, 34.45it/s]Feature extracting:  25%|██▌       | 40/157 [00:01<00:03, 36.53it/s]Feature extracting:  29%|██▊       | 45/157 [00:02<00:02, 37.67it/s]Feature extracting:  32%|███▏      | 50/157 [00:02<00:02, 39.64it/s]Feature extracting:  35%|███▌      | 55/157 [00:02<00:02, 39.59it/s]Feature extracting:  38%|███▊      | 60/157 [00:02<00:02, 39.80it/s]Feature extracting:  41%|████▏     | 65/157 [00:02<00:02, 38.25it/s]Feature extracting:  45%|████▍     | 70/157 [00:02<00:02, 39.69it/s]Feature extracting:  48%|████▊     | 75/157 [00:02<00:02, 39.57it/s]Feature extracting:  51%|█████     | 80/157 [00:02<00:01, 39.96it/s]Feature extracting:  54%|█████▍    | 85/157 [00:03<00:01, 40.53it/s]Feature extracting:  57%|█████▋    | 90/157 [00:03<00:01, 42.10it/s]Feature extracting:  61%|██████    | 96/157 [00:03<00:01, 44.46it/s]Feature extracting:  64%|██████▍   | 101/157 [00:03<00:01, 44.75it/s]Feature extracting:  68%|██████▊   | 106/157 [00:03<00:01, 44.61it/s]Feature extracting:  71%|███████▏  | 112/157 [00:03<00:00, 46.14it/s]Feature extracting:  75%|███████▍  | 117/157 [00:03<00:00, 45.50it/s]Feature extracting:  78%|███████▊  | 123/157 [00:03<00:00, 46.70it/s]Feature extracting:  82%|████████▏ | 128/157 [00:03<00:00, 46.51it/s]Feature extracting:  85%|████████▍ | 133/157 [00:04<00:00, 45.23it/s]Feature extracting:  88%|████████▊ | 138/157 [00:04<00:00, 44.68it/s]Feature extracting:  92%|█████████▏| 144/157 [00:04<00:00, 48.74it/s]Feature extracting:  97%|█████████▋| 152/157 [00:04<00:00, 56.76it/s]Feature extracting: 100%|██████████| 157/157 [00:04<00:00, 33.94it/s]
Feature extracting:   0%|          | 0/1 [00:00<?, ?it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.46it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  1.24it/s]
feature banks saved to ./output/stl10/cifar10_backdoored_encoder/2024-01-05-17:08:16/feature_banks.pkl
Train Epoch: 1 	Loss: 1.690169
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 55.97, "epoch": 1}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 1}
Train Epoch: 2 	Loss: 1.183616
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 60.35, "epoch": 2}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 2}
Train Epoch: 3 	Loss: 1.089154
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 62.67, "epoch": 3}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 3}
Train Epoch: 4 	Loss: 1.032227
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.1, "epoch": 4}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 4}
Train Epoch: 5 	Loss: 0.993887
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 65.35, "epoch": 5}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 5}
Train Epoch: 6 	Loss: 0.962644
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.22, "epoch": 6}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 6}
Train Epoch: 7 	Loss: 0.939849
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.88, "epoch": 7}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 7}
Train Epoch: 8 	Loss: 0.920798
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 67.55, "epoch": 8}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 8}
Train Epoch: 9 	Loss: 0.901641
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.16, "epoch": 9}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 9}
Train Epoch: 10 	Loss: 0.887310
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.59, "epoch": 10}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 10}
Train Epoch: 11 	Loss: 0.874491
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.95, "epoch": 11}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 11}
Train Epoch: 12 	Loss: 0.861810
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.39, "epoch": 12}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 12}
Train Epoch: 13 	Loss: 0.853352
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.78, "epoch": 13}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 13}
Train Epoch: 14 	Loss: 0.840818
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.11, "epoch": 14}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 14}
Train Epoch: 15 	Loss: 0.831517
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.38, "epoch": 15}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 15}
Train Epoch: 16 	Loss: 0.823828
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.59, "epoch": 16}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 16}
Train Epoch: 17 	Loss: 0.814986
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.87, "epoch": 17}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 17}
Train Epoch: 18 	Loss: 0.808132
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 71.06, "epoch": 18}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 18}
Train Epoch: 19 	Loss: 0.801652
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 71.26, "epoch": 19}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 19}
