transforms.RandomHorizontalFlip(p=0.5),
    transforms.RandomApply([transforms.ColorJitter(0.4, 0.4, 0.4, 0.1)], p=0.8),
    transforms.RandomGrayscale(p=0.2)
transforms.RandomHorizontalFlip(p=0.5),
    transforms.RandomApply([transforms.ColorJitter(0.4, 0.4, 0.4, 0.1)], p=0.8),
    transforms.RandomGrayscale(p=0.2)
transforms.RandomHorizontalFlip(p=0.5),
    transforms.RandomApply([transforms.ColorJitter(0.4, 0.4, 0.4, 0.1)], p=0.8),
    transforms.RandomGrayscale(p=0.2)
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
当前时间： 2024-01-06 20:01:42
当前时间： 2024-01-06 20:01:43
test_transform_stl10
Loaded from: ./output/stl10/svhn_backdoored_encoder/2024-01-05-17:11:23/model_200.pth
Namespace(batch_size=32, color=0.0, data_dir='./data/stl10/', encoder_usage_info='stl10', epochs=200, gpu='4', hue_hsv=1, knn_k=200, knn_t=0.5, lambda1=1.0, lambda2=1.0, lightness=1, loss0=20.0, lr=0.001, pretrained_encoder='./output/stl10/clean_encoder/model_1000.pth', pretraining_dataset='stl10', psnr=0.025, rand_init=False, reference_file='./reference/stl10/one.npz', reference_label=0, results_dir='./output/stl10/svhn_backdoored_encoder/2024-01-05-17:11:23/', saturation_hsv=1, seed=100, shadow_dataset='stl10', timestamp='2024-01-05-17:11:23', trigger_file='optimize_filter/trigger/stl10/2023-12-19-01-25-16/ssim0.9987_psnr42.79_lp0.0002_wd0.002_color4.971.pt', value_hsv=1)
{'loss': -20.961791233888203, 'wd': 0.0018395297552795294, 'ssim': 0.9961507282244869, 'psnr': 39.41752154512686, 'lp': 0.000544258705861754, 'sim': -20.961791233888203, 'far': 0.0, 'color': 5.099621719037983}
Predicting features
Feature extracting:   0%|          | 0/1145 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/1145 [00:04<1:29:54,  4.72s/it]Feature extracting:   2%|▏         | 19/1145 [00:04<03:25,  5.47it/s] Feature extracting:   2%|▏         | 28/1145 [00:05<02:10,  8.56it/s]Feature extracting:   3%|▎         | 36/1145 [00:05<01:33, 11.88it/s]Feature extracting:   4%|▍         | 43/1145 [00:05<01:12, 15.25it/s]Feature extracting:   4%|▍         | 49/1145 [00:05<00:58, 18.62it/s]Feature extracting:   5%|▍         | 55/1145 [00:05<00:48, 22.35it/s]Feature extracting:   5%|▌         | 61/1145 [00:05<00:41, 26.13it/s]Feature extracting:   6%|▌         | 68/1145 [00:05<00:33, 32.04it/s]Feature extracting:   7%|▋         | 75/1145 [00:05<00:28, 37.43it/s]Feature extracting:   7%|▋         | 81/1145 [00:06<00:26, 39.61it/s]Feature extracting:   8%|▊         | 87/1145 [00:06<00:25, 41.47it/s]Feature extracting:   8%|▊         | 93/1145 [00:06<00:24, 42.89it/s]Feature extracting:   9%|▊         | 99/1145 [00:06<00:23, 44.74it/s]Feature extracting:   9%|▉         | 104/1145 [00:06<00:22, 45.29it/s]Feature extracting:  10%|▉         | 109/1145 [00:06<00:22, 45.81it/s]Feature extracting:  10%|▉         | 114/1145 [00:06<00:22, 46.21it/s]Feature extracting:  10%|█         | 120/1145 [00:06<00:21, 48.16it/s]Feature extracting:  11%|█         | 127/1145 [00:07<00:19, 53.54it/s]Feature extracting:  12%|█▏        | 133/1145 [00:07<00:18, 53.59it/s]Feature extracting:  12%|█▏        | 139/1145 [00:07<00:19, 51.61it/s]Feature extracting:  13%|█▎        | 145/1145 [00:07<00:21, 47.46it/s]Feature extracting:  13%|█▎        | 151/1145 [00:07<00:19, 49.89it/s]Feature extracting:  14%|█▎        | 157/1145 [00:07<00:21, 46.32it/s]Feature extracting:  14%|█▍        | 164/1145 [00:07<00:19, 50.11it/s]Feature extracting:  15%|█▍        | 170/1145 [00:07<00:18, 51.96it/s]Feature extracting:  16%|█▌        | 179/1145 [00:07<00:15, 60.95it/s]Feature extracting:  16%|█▋        | 188/1145 [00:08<00:14, 68.28it/s]Feature extracting:  17%|█▋        | 196/1145 [00:08<00:14, 66.30it/s]Feature extracting:  18%|█▊        | 203/1145 [00:08<00:14, 66.58it/s]Feature extracting:  18%|█▊        | 210/1145 [00:08<00:14, 65.23it/s]Feature extracting:  19%|█▉        | 217/1145 [00:08<00:14, 63.96it/s]Feature extracting:  20%|█▉        | 224/1145 [00:08<00:14, 63.78it/s]Feature extracting:  20%|██        | 231/1145 [00:08<00:15, 58.30it/s]Feature extracting:  21%|██        | 243/1145 [00:08<00:12, 73.09it/s]Feature extracting:  22%|██▏       | 251/1145 [00:09<00:12, 69.50it/s]Feature extracting:  23%|██▎       | 259/1145 [00:09<00:13, 66.75it/s]Feature extracting:  23%|██▎       | 266/1145 [00:09<00:13, 65.29it/s]Feature extracting:  24%|██▍       | 273/1145 [00:09<00:13, 64.00it/s]Feature extracting:  24%|██▍       | 280/1145 [00:09<00:13, 63.53it/s]Feature extracting:  25%|██▌       | 287/1145 [00:09<00:13, 65.20it/s]Feature extracting:  26%|██▌       | 299/1145 [00:09<00:10, 79.91it/s]Feature extracting:  27%|██▋       | 308/1145 [00:09<00:10, 79.87it/s]Feature extracting:  28%|██▊       | 317/1145 [00:09<00:10, 77.57it/s]Feature extracting:  29%|██▊       | 327/1145 [00:10<00:10, 81.22it/s]Feature extracting:  29%|██▉       | 336/1145 [00:10<00:09, 81.12it/s]Feature extracting:  30%|███       | 345/1145 [00:10<00:09, 81.17it/s]Feature extracting:  32%|███▏      | 361/1145 [00:10<00:08, 92.81it/s]Feature extracting:  32%|███▏      | 371/1145 [00:10<00:09, 84.40it/s]Feature extracting:  33%|███▎      | 383/1145 [00:10<00:08, 92.78it/s]Feature extracting:  34%|███▍      | 393/1145 [00:10<00:08, 90.69it/s]