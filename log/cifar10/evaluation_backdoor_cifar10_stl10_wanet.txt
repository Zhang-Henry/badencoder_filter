/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
当前时间： 2023-12-16 15:09:34
test_transform_cifar10
Loaded from: output/cifar10/stl10_backdoored_encoder/2023-12-15-16:03:27ctrl/model_200.pth
Predicting features
Feature extracting:   0%|          | 0/79 [00:00<?, ?it/s]Feature extracting:   1%|▏         | 1/79 [00:02<03:27,  2.66s/it]Feature extracting:  24%|██▍       | 19/79 [00:02<00:06,  9.48it/s]Feature extracting:  37%|███▋      | 29/79 [00:02<00:03, 15.38it/s]Feature extracting:  49%|████▉     | 39/79 [00:03<00:01, 22.33it/s]Feature extracting:  61%|██████    | 48/79 [00:03<00:01, 29.59it/s]Feature extracting:  72%|███████▏  | 57/79 [00:03<00:00, 37.25it/s]Feature extracting:  84%|████████▎ | 66/79 [00:03<00:00, 44.81it/s]Feature extracting:  95%|█████████▍| 75/79 [00:03<00:00, 52.27it/s]Feature extracting: 100%|██████████| 79/79 [00:03<00:00, 21.25it/s]
Feature extracting:   0%|          | 0/125 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/125 [00:00<00:27,  4.46it/s]Feature extracting:  14%|█▍        | 18/125 [00:00<00:01, 68.35it/s]Feature extracting:  22%|██▏       | 28/125 [00:00<00:01, 74.06it/s]Feature extracting:  30%|███       | 38/125 [00:00<00:01, 77.33it/s]Feature extracting:  38%|███▊      | 47/125 [00:00<00:00, 80.72it/s]Feature extracting:  45%|████▍     | 56/125 [00:00<00:00, 80.87it/s]Feature extracting:  52%|█████▏    | 65/125 [00:00<00:00, 80.09it/s]Feature extracting:  59%|█████▉    | 74/125 [00:00<00:00, 82.48it/s]Feature extracting:  66%|██████▋   | 83/125 [00:01<00:00, 82.02it/s]Feature extracting:  74%|███████▎  | 92/125 [00:01<00:00, 82.68it/s]Feature extracting:  81%|████████  | 101/125 [00:01<00:00, 82.77it/s]Feature extracting:  88%|████████▊ | 110/125 [00:01<00:00, 84.35it/s]Feature extracting:  95%|█████████▌| 119/125 [00:01<00:00, 83.13it/s]Feature extracting: 100%|██████████| 125/125 [00:01<00:00, 72.87it/s]
Feature extracting:   0%|          | 0/125 [00:00<?, ?it/s]Feature extracting:   1%|          | 1/125 [00:00<01:01,  2.02it/s]Feature extracting:   6%|▋         | 8/125 [00:00<00:06, 16.75it/s]Feature extracting:  10%|▉         | 12/125 [00:00<00:06, 17.08it/s]Feature extracting:  13%|█▎        | 16/125 [00:00<00:05, 21.46it/s]Feature extracting:  16%|█▌        | 20/125 [00:01<00:04, 22.06it/s]Feature extracting:  19%|█▉        | 24/125 [00:01<00:04, 24.79it/s]Feature extracting:  22%|██▏       | 28/125 [00:01<00:03, 24.98it/s]Feature extracting:  26%|██▌       | 32/125 [00:01<00:03, 27.58it/s]Feature extracting:  29%|██▉       | 36/125 [00:01<00:03, 27.06it/s]Feature extracting:  32%|███▏      | 40/125 [00:01<00:02, 29.02it/s]Feature extracting:  35%|███▌      | 44/125 [00:01<00:02, 27.47it/s]Feature extracting:  38%|███▊      | 48/125 [00:02<00:02, 29.00it/s]Feature extracting:  42%|████▏     | 52/125 [00:02<00:02, 25.76it/s]Feature extracting:  46%|████▌     | 57/125 [00:02<00:02, 29.21it/s]Feature extracting:  49%|████▉     | 61/125 [00:02<00:02, 29.11it/s]Feature extracting:  52%|█████▏    | 65/125 [00:02<00:02, 29.95it/s]Feature extracting:  55%|█████▌    | 69/125 [00:02<00:01, 29.40it/s]Feature extracting:  58%|█████▊    | 73/125 [00:02<00:01, 30.52it/s]Feature extracting:  62%|██████▏   | 77/125 [00:03<00:01, 29.05it/s]Feature extracting:  64%|██████▍   | 80/125 [00:03<00:01, 27.24it/s]Feature extracting:  66%|██████▋   | 83/125 [00:03<00:01, 25.58it/s]Feature extracting:  70%|███████   | 88/125 [00:03<00:01, 28.11it/s]Feature extracting:  73%|███████▎  | 91/125 [00:03<00:01, 26.98it/s]Feature extracting:  77%|███████▋  | 96/125 [00:03<00:01, 27.96it/s]Feature extracting:  79%|███████▉  | 99/125 [00:03<00:00, 27.83it/s]Feature extracting:  83%|████████▎ | 104/125 [00:04<00:00, 27.95it/s]Feature extracting:  86%|████████▋ | 108/125 [00:04<00:00, 30.44it/s]Feature extracting:  90%|████████▉ | 112/125 [00:04<00:00, 27.88it/s]Feature extracting:  94%|█████████▎| 117/125 [00:04<00:00, 32.53it/s]Feature extracting:  97%|█████████▋| 121/125 [00:04<00:00, 29.31it/s]Feature extracting: 100%|██████████| 125/125 [00:04<00:00, 26.04it/s]
Feature extracting:   0%|          | 0/1 [00:00<?, ?it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  3.45it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  2.93it/s]
Train Epoch: 1 	Loss: 2.308026
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 32.8875, "epoch": 1}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 0.0, "epoch": 1}
Train Epoch: 2 	Loss: 2.110948
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 55.75, "epoch": 2}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 2}
Train Epoch: 3 	Loss: 1.650903
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 64.05, "epoch": 3}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 3}
Train Epoch: 4 	Loss: 1.330420
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 66.5125, "epoch": 4}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 4}
Train Epoch: 5 	Loss: 1.122249
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 68.125, "epoch": 5}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 5}
Train Epoch: 6 	Loss: 1.003250
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 69.575, "epoch": 6}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 6}
Train Epoch: 7 	Loss: 0.928156
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 70.575, "epoch": 7}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 7}
Train Epoch: 8 	Loss: 0.871199
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 71.3125, "epoch": 8}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 8}
Train Epoch: 9 	Loss: 0.831454
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 72.15, "epoch": 9}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 9}
Train Epoch: 10 	Loss: 0.808463
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 72.275, "epoch": 10}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 10}
Train Epoch: 11 	Loss: 0.788808
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 72.8125, "epoch": 11}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 11}
Train Epoch: 12 	Loss: 0.765294
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 72.9875, "epoch": 12}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 12}
Train Epoch: 13 	Loss: 0.745179
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.225, "epoch": 13}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 13}
Train Epoch: 14 	Loss: 0.733248
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.5875, "epoch": 14}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 14}
Train Epoch: 15 	Loss: 0.725365
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.7625, "epoch": 15}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 15}
Train Epoch: 16 	Loss: 0.710939
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.925, "epoch": 16}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 16}
Train Epoch: 17 	Loss: 0.693299
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 73.9375, "epoch": 17}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 17}
Train Epoch: 18 	Loss: 0.693442
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 74.125, "epoch": 18}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 18}
Train Epoch: 19 	Loss: 0.689257
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 74.275, "epoch": 19}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 19}
Train Epoch: 20 	Loss: 0.680787
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 74.35, "epoch": 20}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 20}
Train Epoch: 21 	Loss: 0.679320
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 74.5875, "epoch": 21}
Traceback (most recent call last):
  File "/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/multiprocessing/resource_sharer.py", line 142, in _serve
    with self._listener.accept() as conn:
  File "/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/multiprocessing/connection.py", line 465, in accept
    deliver_challenge(c, self._authkey)
  File "/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/multiprocessing/connection.py", line 740, in deliver_challenge
    response = connection.recv_bytes(256)        # reject large message
  File "/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/multiprocessing/connection.py", line 216, in recv_bytes
    buf = self._recv_bytes(maxlength)
  File "/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/multiprocessing/connection.py", line 414, in _recv_bytes
    buf = self._recv(4)
  File "/home/hrzhang/anaconda3/envs/badencoder/lib/python3.8/multiprocessing/connection.py", line 379, in _recv
    chunk = read(handle, remaining)
ConnectionResetError: [Errno 104] Connection reset by peer
