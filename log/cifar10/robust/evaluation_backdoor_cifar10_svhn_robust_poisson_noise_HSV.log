Setting up [LPIPS] perceptual loss: trunk [alex], v[0.1], spatial [off]
/home/jianzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/jianzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Loading model from: /home/jianzhang/anaconda3/envs/badencoder/lib/python3.8/site-packages/lpips/weights/v0.1/alex.pth
当前时间： 2025-01-26 11:11:36
当前时间： 2025-01-26 11:11:37
test_transform_cifar10
Number of classes: 10
Using SimCLR for CIFAR10, STL10, GTSRB, SVHN
Loaded from: output/cifar10/svhn_backdoored_encoder/2023-12-21-00:04:42/model_75.pth
Namespace(batch_size=512, color=0.0, data_dir='./data/cifar10/', encoder_usage_info='cifar10', epochs=200, gpu='3', hue_hsv=1, knn_k=200, knn_t=0.5, lambda1=1.0, lambda2=1.0, lightness=1, loss0=5.0, lr=0.001, pretrained_encoder='./output/cifar10/clean_encoder/model_1000.pth', pretraining_dataset='cifar10', psnr=0.025, rand_init=False, reference_file='./reference/cifar10/one.npz', reference_label=0, results_dir='./output/cifar10/svhn_backdoored_encoder/2023-12-21-00:04:42/', saturation_hsv=1, seed=100, shadow_dataset='cifar10', timestamp='2023-12-21-00:04:42', trigger_file='optimize_filter/trigger/cifar10/2023-12-20-23-18-29/ssim0.9855_psnr30.10_lp0.0166_wd0.066_color3.966.pt', value_hsv=1)
{'loss': -5.851589630559547, 'wd': 0.007197596166359703, 'ssim': 0.9916923660592935, 'psnr': 37.079971667417546, 'lp': 0.0002777701593004167, 'sim': -5.851589630559547, 'far': 0.0, 'color': 4.843235374725971}
Successfully load model from output/cifar10/svhn_backdoored_encoder/2023-12-21-00:04:42/model_75.pth.
Predicting features
Feature extracting:   0%|          | 0/1145 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/1145 [00:00<08:34,  2.22it/s]Feature extracting:   3%|▎         | 29/1145 [00:00<00:16, 69.18it/s]Feature extracting:   5%|▍         | 52/1145 [00:00<00:09, 109.99it/s]Feature extracting:   7%|▋         | 75/1145 [00:00<00:07, 141.61it/s]Feature extracting:   9%|▊         | 98/1145 [00:00<00:06, 164.21it/s]Feature extracting:  11%|█         | 121/1145 [00:00<00:05, 182.17it/s]Feature extracting:  13%|█▎        | 145/1145 [00:01<00:05, 197.79it/s]Feature extracting:  15%|█▍        | 168/1145 [00:01<00:04, 207.02it/s]Feature extracting:  17%|█▋        | 191/1145 [00:01<00:04, 211.94it/s]Feature extracting:  19%|█▉        | 215/1145 [00:01<00:04, 216.89it/s]Feature extracting:  21%|██        | 239/1145 [00:01<00:04, 222.32it/s]Feature extracting:  23%|██▎       | 262/1145 [00:01<00:03, 224.38it/s]Feature extracting:  25%|██▍       | 285/1145 [00:01<00:03, 225.73it/s]Feature extracting:  27%|██▋       | 308/1145 [00:01<00:03, 225.87it/s]Feature extracting:  29%|██▉       | 331/1145 [00:01<00:03, 225.64it/s]Feature extracting:  31%|███       | 354/1145 [00:01<00:03, 224.70it/s]Feature extracting:  33%|███▎      | 377/1145 [00:02<00:03, 225.94it/s]Feature extracting:  35%|███▍      | 400/1145 [00:02<00:03, 223.48it/s]Feature extracting:  37%|███▋      | 424/1145 [00:02<00:03, 226.29it/s]Feature extracting:  39%|███▉      | 447/1145 [00:02<00:03, 224.81it/s]Feature extracting:  41%|████      | 471/1145 [00:02<00:02, 228.66it/s]Feature extracting:  43%|████▎     | 494/1145 [00:02<00:02, 228.51it/s]Feature extracting:  45%|████▌     | 517/1145 [00:02<00:02, 228.72it/s]Feature extracting:  47%|████▋     | 540/1145 [00:02<00:02, 228.29it/s]Feature extracting:  49%|████▉     | 563/1145 [00:02<00:02, 225.25it/s]Feature extracting:  51%|█████     | 586/1145 [00:03<00:02, 202.42it/s]Feature extracting:  53%|█████▎    | 611/1145 [00:03<00:02, 215.14it/s]Feature extracting:  56%|█████▌    | 641/1145 [00:03<00:02, 238.47it/s]Feature extracting:  58%|█████▊    | 666/1145 [00:03<00:02, 237.92it/s]Feature extracting:  60%|██████    | 691/1145 [00:03<00:01, 234.28it/s]Feature extracting:  62%|██████▏   | 715/1145 [00:03<00:01, 235.18it/s]Feature extracting:  65%|██████▍   | 739/1145 [00:03<00:01, 232.12it/s]Feature extracting:  67%|██████▋   | 763/1145 [00:03<00:01, 231.57it/s]Feature extracting:  69%|██████▊   | 787/1145 [00:03<00:01, 230.17it/s]Feature extracting:  71%|███████   | 811/1145 [00:03<00:01, 228.35it/s]Feature extracting:  73%|███████▎  | 834/1145 [00:04<00:01, 227.94it/s]Feature extracting:  75%|███████▍  | 857/1145 [00:04<00:01, 226.53it/s]Feature extracting:  77%|███████▋  | 880/1145 [00:04<00:01, 224.92it/s]Feature extracting:  79%|███████▉  | 903/1145 [00:04<00:01, 225.77it/s]Feature extracting:  81%|████████  | 926/1145 [00:04<00:00, 224.83it/s]Feature extracting:  83%|████████▎ | 949/1145 [00:04<00:00, 218.46it/s]Feature extracting:  85%|████████▍ | 973/1145 [00:04<00:00, 220.83it/s]Feature extracting:  87%|████████▋ | 998/1145 [00:04<00:00, 227.52it/s]Feature extracting:  89%|████████▉ | 1021/1145 [00:04<00:00, 227.28it/s]Feature extracting:  91%|█████████ | 1044/1145 [00:05<00:00, 227.18it/s]Feature extracting:  93%|█████████▎| 1067/1145 [00:05<00:00, 224.01it/s]Feature extracting:  95%|█████████▌| 1090/1145 [00:05<00:00, 225.23it/s]Feature extracting:  97%|█████████▋| 1114/1145 [00:05<00:00, 228.49it/s]Feature extracting:  99%|█████████▉| 1138/1145 [00:05<00:00, 230.35it/s]Feature extracting: 100%|██████████| 1145/1145 [00:05<00:00, 205.99it/s]
Feature extracting:   0%|          | 0/407 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/407 [00:00<01:18,  5.16it/s]Feature extracting:   8%|▊         | 33/407 [00:00<00:02, 137.75it/s]Feature extracting:  14%|█▍        | 57/407 [00:00<00:02, 174.35it/s]Feature extracting:  20%|█▉        | 81/407 [00:00<00:01, 194.57it/s]Feature extracting:  26%|██▌       | 105/407 [00:00<00:01, 207.73it/s]Feature extracting:  32%|███▏      | 129/407 [00:00<00:01, 215.36it/s]Feature extracting:  38%|███▊      | 153/407 [00:00<00:01, 221.59it/s]Feature extracting:  43%|████▎     | 176/407 [00:00<00:01, 223.48it/s]Feature extracting:  49%|████▉     | 199/407 [00:01<00:00, 223.13it/s]Feature extracting:  55%|█████▍    | 222/407 [00:01<00:00, 223.30it/s]Feature extracting:  60%|██████    | 245/407 [00:01<00:00, 224.45it/s]Feature extracting:  66%|██████▌   | 268/407 [00:01<00:00, 224.76it/s]Feature extracting:  71%|███████▏  | 291/407 [00:01<00:00, 225.45it/s]Feature extracting:  77%|███████▋  | 315/407 [00:01<00:00, 227.71it/s]Feature extracting:  83%|████████▎ | 339/407 [00:01<00:00, 230.03it/s]Feature extracting:  89%|████████▉ | 363/407 [00:01<00:00, 231.28it/s]Feature extracting:  95%|█████████▌| 387/407 [00:01<00:00, 231.19it/s]Feature extracting: 100%|██████████| 407/407 [00:02<00:00, 202.29it/s]
Feature extracting:   0%|          | 0/407 [00:00<?, ?it/s]Feature extracting:   0%|          | 1/407 [00:00<01:35,  4.26it/s]Feature extracting:   5%|▍         | 20/407 [00:00<00:05, 73.07it/s]Feature extracting:   9%|▉         | 38/407 [00:00<00:03, 108.82it/s]Feature extracting:  14%|█▎        | 55/407 [00:00<00:02, 127.95it/s]Feature extracting:  18%|█▊        | 73/407 [00:00<00:02, 142.68it/s]Feature extracting:  22%|██▏       | 90/407 [00:00<00:02, 149.57it/s]Feature extracting:  26%|██▋       | 107/407 [00:00<00:01, 154.09it/s]Feature extracting:  31%|███       | 125/407 [00:00<00:01, 159.39it/s]Feature extracting:  35%|███▍      | 142/407 [00:01<00:01, 160.35it/s]Feature extracting:  39%|███▉      | 159/407 [00:01<00:01, 162.66it/s]Feature extracting:  43%|████▎     | 177/407 [00:01<00:01, 165.82it/s]Feature extracting:  48%|████▊     | 195/407 [00:01<00:01, 168.90it/s]Feature extracting:  52%|█████▏    | 213/407 [00:01<00:01, 169.56it/s]Feature extracting:  57%|█████▋    | 231/407 [00:01<00:01, 171.43it/s]Feature extracting:  61%|██████    | 249/407 [00:01<00:00, 170.03it/s]Feature extracting:  66%|██████▌   | 267/407 [00:01<00:00, 168.67it/s]Feature extracting:  70%|██████▉   | 284/407 [00:01<00:00, 168.58it/s]Feature extracting:  74%|███████▍  | 301/407 [00:02<00:00, 168.27it/s]Feature extracting:  78%|███████▊  | 318/407 [00:02<00:00, 168.31it/s]Feature extracting:  82%|████████▏ | 335/407 [00:02<00:00, 166.06it/s]Feature extracting:  86%|████████▋ | 352/407 [00:02<00:00, 166.07it/s]Feature extracting:  91%|█████████ | 369/407 [00:02<00:00, 166.73it/s]Feature extracting:  95%|█████████▍| 386/407 [00:02<00:00, 167.22it/s]Feature extracting: 100%|█████████▉| 405/407 [00:02<00:00, 173.26it/s]Feature extracting: 100%|██████████| 407/407 [00:02<00:00, 149.29it/s]
Feature extracting:   0%|          | 0/1 [00:00<?, ?it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  4.67it/s]Feature extracting: 100%|██████████| 1/1 [00:00<00:00,  3.72it/s]
Train Epoch: 1 	Loss: 1.976442
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 41.87538414259373, "epoch": 1}
{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 1}
Train Epoch: 2 	Loss: 1.630569
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 48.12922556853104, "epoch": {"m{"metric": "Eval - Attack Success Rate (ASR)", "value": 100.0, "epoch": 2}
Train Epoch: 3 	Loss: 1.500461
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 50.84127228027044, "epoch": {"m{"metric": "Eval - Attack Success Rate (ASR)", "value": 99.8540258143823, "epoch": 3{"Train Epoch: 4 	Loss: 1.430765
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 52.42778119237861, "epoch": 4}{{"metric": "Eval - Attack Success Rate (ASR)", "value": 79.83251382913338, "epoch": 4{"Train Epoch: 5 	Loss: 1.388377
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 53.69161032575292, "epoch": 5{"{"metric": "Eval - Attack Success Rate (ASR)", "value": 66.19161032575292, "epoch": 5{"Train Epoch: 6 	Loss: 1.355805
{"metric": "Eval - Backdoored Accuracy (BA)", "value"Train Epoch: 6 	Loss: 1.354125
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 54.936232329440685, "epoch": 6}
{Train Epoch: 7 	Loss: 1.326360
{"metric": "Eval - Backdoored Accuracy (BA)", "value": Train Epoch: 7 	Loss: 1.326484
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 55.63921327596804, "epoch": 7}
Train Epoch: 8 	Loss: 1.302043
{"metric": "Eval - Backdoored Accuracy (BA)", "value": Train Epoch: 8 	Loss: 1.301635
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 56.32298709280885, "epoch": 8}
{Train Epoch: 9 	Loss: 1.279396
{"metric": "Eval - Backdoored Accuracy (BA)", "value": Train Epoch: 9 	Loss: 1.279757
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 56.883835279655806, "epoch": 9Train Epoch: 10 	Loss: 1.258544
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 5Train Epoch: 10 	Loss: 1.260348
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 57.34096496619545, "epoch": 10}
Train Epoch: 11 	Loss: 1.242722
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 5Train Epoch: 11 	Loss: 1.241926
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 57.794253226797785, "epoch": 11}
Train Epoch: 12 	Loss: 1.223908
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 5Train Epoch: 12 	Loss: 1.226322
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 58.26674861708666, "epoch": 12}
{Train Epoch: 13 	Loss: 1.208927
{"metric": "Eval - Backdoored Accuracy (BA)", "value":Train Epoch: 13 	Loss: 1.209051
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 58.458819913952055, "epoch": 13}
{Train Epoch: 14 	Loss: 1.193489
{"metric": "Eval - Backdoored Accuracy (BA)", "value": Train Epoch: 14 	Loss: 1.195594
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 58.954363859864785, "epoch": 14}
Train Epoch: 15 	Loss: 1.180893
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 5Train Epoch: 15 	Loss: 1.182933
{"metric": "Eval - Backdoored Accuracy (BA)", "value": 59.2040565457898, "epoch": 15}
{Train Epoch: 16 	Loss: 1.167703
 Rate (ASR)", "value": 99.73878303626306, "epoch": 15}
